{"ast":null,"code":"'use strict';\n\nvar invariant = require('../vendor/invariant');\n\nvar constants = require('./constants');\n\nvar client = require('./client');\n\nvar getUser = require('./get_user');\n/**\n * Services all have the same constructor pattern: you initialize them\n * with an access token and options, and they validate those arguments\n * in a predictable way. This is a constructor-generator that makes\n * it possible to require each service's API individually.\n *\n * @private\n * @param {string} name the name of the Mapbox API this class will access:\n * this is set to the name of the function so it will show up in tracebacks\n * @returns {Function} constructor function\n */\n\n\nfunction makeService(name) {\n  function service(accessToken, options) {\n    this.name = name;\n    invariant(typeof accessToken === 'string', 'accessToken required to instantiate Mapbox client');\n    var endpoint = constants.DEFAULT_ENDPOINT;\n\n    if (options !== undefined) {\n      invariant(typeof options === 'object', 'options must be an object');\n\n      if (options.endpoint) {\n        invariant(typeof options.endpoint === 'string', 'endpoint must be a string');\n        endpoint = options.endpoint;\n      }\n\n      if (options.account) {\n        invariant(typeof options.account === 'string', 'account must be a string');\n        this.owner = options.account;\n      }\n    }\n\n    this.client = client({\n      endpoint: endpoint,\n      accessToken: accessToken\n    });\n    this.accessToken = accessToken;\n    this.endpoint = endpoint;\n    this.owner = this.owner || getUser(accessToken);\n    invariant(!!this.owner, 'could not determine account from provided accessToken');\n  }\n\n  return service;\n}\n\nmodule.exports = makeService;","map":{"version":3,"sources":["/Users/kevinrayjon/Documents/USC_MS_ADS/Fall_2021/DSCI_554/Project/project-datadocs/demo/node_modules/mapbox/lib/make_service.js"],"names":["invariant","require","constants","client","getUser","makeService","name","service","accessToken","options","endpoint","DEFAULT_ENDPOINT","undefined","account","owner","module","exports"],"mappings":"AAAA;;AAEA,IAAIA,SAAS,GAAGC,OAAO,CAAC,qBAAD,CAAvB;;AACA,IAAIC,SAAS,GAAGD,OAAO,CAAC,aAAD,CAAvB;;AACA,IAAIE,MAAM,GAAGF,OAAO,CAAC,UAAD,CAApB;;AACA,IAAIG,OAAO,GAAGH,OAAO,CAAC,YAAD,CAArB;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;AACA,SAASI,WAAT,CAAqBC,IAArB,EAA2B;AAEzB,WAASC,OAAT,CAAiBC,WAAjB,EAA8BC,OAA9B,EAAuC;AACrC,SAAKH,IAAL,GAAYA,IAAZ;AAEAN,IAAAA,SAAS,CAAC,OAAOQ,WAAP,KAAuB,QAAxB,EACP,mDADO,CAAT;AAGA,QAAIE,QAAQ,GAAGR,SAAS,CAACS,gBAAzB;;AAEA,QAAIF,OAAO,KAAKG,SAAhB,EAA2B;AACzBZ,MAAAA,SAAS,CAAC,OAAOS,OAAP,KAAmB,QAApB,EAA8B,2BAA9B,CAAT;;AACA,UAAIA,OAAO,CAACC,QAAZ,EAAsB;AACpBV,QAAAA,SAAS,CAAC,OAAOS,OAAO,CAACC,QAAf,KAA4B,QAA7B,EAAuC,2BAAvC,CAAT;AACAA,QAAAA,QAAQ,GAAGD,OAAO,CAACC,QAAnB;AACD;;AACD,UAAID,OAAO,CAACI,OAAZ,EAAqB;AACnBb,QAAAA,SAAS,CAAC,OAAOS,OAAO,CAACI,OAAf,KAA2B,QAA5B,EAAsC,0BAAtC,CAAT;AACA,aAAKC,KAAL,GAAaL,OAAO,CAACI,OAArB;AACD;AACF;;AAED,SAAKV,MAAL,GAAcA,MAAM,CAAC;AACnBO,MAAAA,QAAQ,EAAEA,QADS;AAEnBF,MAAAA,WAAW,EAAEA;AAFM,KAAD,CAApB;AAKA,SAAKA,WAAL,GAAmBA,WAAnB;AACA,SAAKE,QAAL,GAAgBA,QAAhB;AACA,SAAKI,KAAL,GAAa,KAAKA,KAAL,IAAcV,OAAO,CAACI,WAAD,CAAlC;AACAR,IAAAA,SAAS,CAAC,CAAC,CAAC,KAAKc,KAAR,EAAe,uDAAf,CAAT;AAED;;AAED,SAAOP,OAAP;AACD;;AAEDQ,MAAM,CAACC,OAAP,GAAiBX,WAAjB","sourcesContent":["'use strict';\n\nvar invariant = require('../vendor/invariant');\nvar constants = require('./constants');\nvar client = require('./client');\nvar getUser = require('./get_user');\n\n/**\n * Services all have the same constructor pattern: you initialize them\n * with an access token and options, and they validate those arguments\n * in a predictable way. This is a constructor-generator that makes\n * it possible to require each service's API individually.\n *\n * @private\n * @param {string} name the name of the Mapbox API this class will access:\n * this is set to the name of the function so it will show up in tracebacks\n * @returns {Function} constructor function\n */\nfunction makeService(name) {\n\n  function service(accessToken, options) {\n    this.name = name;\n\n    invariant(typeof accessToken === 'string',\n      'accessToken required to instantiate Mapbox client');\n\n    var endpoint = constants.DEFAULT_ENDPOINT;\n\n    if (options !== undefined) {\n      invariant(typeof options === 'object', 'options must be an object');\n      if (options.endpoint) {\n        invariant(typeof options.endpoint === 'string', 'endpoint must be a string');\n        endpoint = options.endpoint;\n      }\n      if (options.account) {\n        invariant(typeof options.account === 'string', 'account must be a string');\n        this.owner = options.account;\n      }\n    }\n\n    this.client = client({\n      endpoint: endpoint,\n      accessToken: accessToken\n    });\n\n    this.accessToken = accessToken;\n    this.endpoint = endpoint;\n    this.owner = this.owner || getUser(accessToken);\n    invariant(!!this.owner, 'could not determine account from provided accessToken');\n\n  }\n\n  return service;\n}\n\nmodule.exports = makeService;\n"]},"metadata":{},"sourceType":"script"}