{"ast":null,"code":"module.exports = function () {\n  /*\n   * Generated by PEG.js 0.7.0.\n   *\n   * http://pegjs.majda.cz/\n   */\n  function quote(s) {\n    /*\n     * ECMA-262, 5th ed., 7.8.4: All characters may appear literally in a\n     * string literal except for the closing quote character, backslash,\n     * carriage return, line separator, paragraph separator, and line feed.\n     * Any character may appear in the form of an escape sequence.\n     *\n     * For portability, we also escape escape all control and non-ASCII\n     * characters. Note that \"\\0\" and \"\\v\" escape sequences are not used\n     * because JSHint does not like the first and IE the second.\n     */\n    return '\"' + s.replace(/\\\\/g, '\\\\\\\\') // backslash\n    .replace(/\"/g, '\\\\\"') // closing quote character\n    .replace(/\\x08/g, '\\\\b') // backspace\n    .replace(/\\t/g, '\\\\t') // horizontal tab\n    .replace(/\\n/g, '\\\\n') // line feed\n    .replace(/\\f/g, '\\\\f') // form feed\n    .replace(/\\r/g, '\\\\r') // carriage return\n    .replace(/[\\x00-\\x07\\x0B\\x0E-\\x1F\\x80-\\uFFFF]/g, escape) + '\"';\n  }\n\n  var result = {\n    /*\n     * Parses the input with a generated parser. If the parsing is successfull,\n     * returns a value explicitly or implicitly specified by the grammar from\n     * which the parser was generated (see |PEG.buildParser|). If the parsing is\n     * unsuccessful, throws |PEG.parser.SyntaxError| describing the error.\n     */\n    parse: function (input, startRule) {\n      var parseFunctions = {\n        \"start\": parse_start,\n        \"LinkValue\": parse_LinkValue,\n        \"LinkParams\": parse_LinkParams,\n        \"URIReference\": parse_URIReference,\n        \"LinkParam\": parse_LinkParam,\n        \"LinkParamName\": parse_LinkParamName,\n        \"LinkParamValue\": parse_LinkParamValue,\n        \"PToken\": parse_PToken,\n        \"PTokenChar\": parse_PTokenChar,\n        \"OptionalSP\": parse_OptionalSP,\n        \"QuotedString\": parse_QuotedString,\n        \"QuotedStringInternal\": parse_QuotedStringInternal,\n        \"Char\": parse_Char,\n        \"UpAlpha\": parse_UpAlpha,\n        \"LoAlpha\": parse_LoAlpha,\n        \"Alpha\": parse_Alpha,\n        \"Digit\": parse_Digit,\n        \"SP\": parse_SP,\n        \"DQ\": parse_DQ,\n        \"QDText\": parse_QDText,\n        \"QuotedPair\": parse_QuotedPair\n      };\n\n      if (startRule !== undefined) {\n        if (parseFunctions[startRule] === undefined) {\n          throw new Error(\"Invalid rule name: \" + quote(startRule) + \".\");\n        }\n      } else {\n        startRule = \"start\";\n      }\n\n      var pos = 0;\n      var reportFailures = 0;\n      var rightmostFailuresPos = 0;\n      var rightmostFailuresExpected = [];\n\n      function padLeft(input, padding, length) {\n        var result = input;\n        var padLength = length - input.length;\n\n        for (var i = 0; i < padLength; i++) {\n          result = padding + result;\n        }\n\n        return result;\n      }\n\n      function escape(ch) {\n        var charCode = ch.charCodeAt(0);\n        var escapeChar;\n        var length;\n\n        if (charCode <= 0xFF) {\n          escapeChar = 'x';\n          length = 2;\n        } else {\n          escapeChar = 'u';\n          length = 4;\n        }\n\n        return '\\\\' + escapeChar + padLeft(charCode.toString(16).toUpperCase(), '0', length);\n      }\n\n      function matchFailed(failure) {\n        if (pos < rightmostFailuresPos) {\n          return;\n        }\n\n        if (pos > rightmostFailuresPos) {\n          rightmostFailuresPos = pos;\n          rightmostFailuresExpected = [];\n        }\n\n        rightmostFailuresExpected.push(failure);\n      }\n\n      function parse_start() {\n        var result0, result1, result2, result3, result4;\n        var pos0, pos1, pos2, pos3;\n        pos0 = pos;\n        pos1 = pos;\n        result0 = [];\n        pos2 = pos;\n        pos3 = pos;\n        result1 = parse_LinkValue();\n\n        if (result1 !== null) {\n          result2 = parse_OptionalSP();\n\n          if (result2 !== null) {\n            if (input.charCodeAt(pos) === 44) {\n              result3 = \",\";\n              pos++;\n            } else {\n              result3 = null;\n\n              if (reportFailures === 0) {\n                matchFailed(\"\\\",\\\"\");\n              }\n            }\n\n            if (result3 !== null) {\n              result4 = parse_OptionalSP();\n\n              if (result4 !== null) {\n                result1 = [result1, result2, result3, result4];\n              } else {\n                result1 = null;\n                pos = pos3;\n              }\n            } else {\n              result1 = null;\n              pos = pos3;\n            }\n          } else {\n            result1 = null;\n            pos = pos3;\n          }\n        } else {\n          result1 = null;\n          pos = pos3;\n        }\n\n        if (result1 !== null) {\n          result1 = function (offset, i) {\n            return i;\n          }(pos2, result1[0]);\n        }\n\n        if (result1 === null) {\n          pos = pos2;\n        }\n\n        while (result1 !== null) {\n          result0.push(result1);\n          pos2 = pos;\n          pos3 = pos;\n          result1 = parse_LinkValue();\n\n          if (result1 !== null) {\n            result2 = parse_OptionalSP();\n\n            if (result2 !== null) {\n              if (input.charCodeAt(pos) === 44) {\n                result3 = \",\";\n                pos++;\n              } else {\n                result3 = null;\n\n                if (reportFailures === 0) {\n                  matchFailed(\"\\\",\\\"\");\n                }\n              }\n\n              if (result3 !== null) {\n                result4 = parse_OptionalSP();\n\n                if (result4 !== null) {\n                  result1 = [result1, result2, result3, result4];\n                } else {\n                  result1 = null;\n                  pos = pos3;\n                }\n              } else {\n                result1 = null;\n                pos = pos3;\n              }\n            } else {\n              result1 = null;\n              pos = pos3;\n            }\n          } else {\n            result1 = null;\n            pos = pos3;\n          }\n\n          if (result1 !== null) {\n            result1 = function (offset, i) {\n              return i;\n            }(pos2, result1[0]);\n          }\n\n          if (result1 === null) {\n            pos = pos2;\n          }\n        }\n\n        if (result0 !== null) {\n          result1 = parse_LinkValue();\n\n          if (result1 !== null) {\n            result0 = [result0, result1];\n          } else {\n            result0 = null;\n            pos = pos1;\n          }\n        } else {\n          result0 = null;\n          pos = pos1;\n        }\n\n        if (result0 !== null) {\n          result0 = function (offset, start, last) {\n            return start.concat([last]);\n          }(pos0, result0[0], result0[1]);\n        }\n\n        if (result0 === null) {\n          pos = pos0;\n        }\n\n        return result0;\n      }\n\n      function parse_LinkValue() {\n        var result0, result1, result2, result3, result4, result5;\n        var pos0, pos1;\n        pos0 = pos;\n        pos1 = pos;\n\n        if (input.charCodeAt(pos) === 60) {\n          result0 = \"<\";\n          pos++;\n        } else {\n          result0 = null;\n\n          if (reportFailures === 0) {\n            matchFailed(\"\\\"<\\\"\");\n          }\n        }\n\n        if (result0 !== null) {\n          result1 = parse_URIReference();\n\n          if (result1 !== null) {\n            if (input.charCodeAt(pos) === 62) {\n              result2 = \">\";\n              pos++;\n            } else {\n              result2 = null;\n\n              if (reportFailures === 0) {\n                matchFailed(\"\\\">\\\"\");\n              }\n            }\n\n            if (result2 !== null) {\n              result3 = parse_OptionalSP();\n\n              if (result3 !== null) {\n                result4 = [];\n                result5 = parse_LinkParams();\n\n                while (result5 !== null) {\n                  result4.push(result5);\n                  result5 = parse_LinkParams();\n                }\n\n                if (result4 !== null) {\n                  result0 = [result0, result1, result2, result3, result4];\n                } else {\n                  result0 = null;\n                  pos = pos1;\n                }\n              } else {\n                result0 = null;\n                pos = pos1;\n              }\n            } else {\n              result0 = null;\n              pos = pos1;\n            }\n          } else {\n            result0 = null;\n            pos = pos1;\n          }\n        } else {\n          result0 = null;\n          pos = pos1;\n        }\n\n        if (result0 !== null) {\n          result0 = function (offset, href, params) {\n            var link = {};\n            params.forEach(function (param) {\n              link[param[0]] = param[1];\n            });\n            link.href = href;\n            return link;\n          }(pos0, result0[1], result0[4]);\n        }\n\n        if (result0 === null) {\n          pos = pos0;\n        }\n\n        return result0;\n      }\n\n      function parse_LinkParams() {\n        var result0, result1, result2, result3;\n        var pos0, pos1;\n        pos0 = pos;\n        pos1 = pos;\n\n        if (input.charCodeAt(pos) === 59) {\n          result0 = \";\";\n          pos++;\n        } else {\n          result0 = null;\n\n          if (reportFailures === 0) {\n            matchFailed(\"\\\";\\\"\");\n          }\n        }\n\n        if (result0 !== null) {\n          result1 = parse_OptionalSP();\n\n          if (result1 !== null) {\n            result2 = parse_LinkParam();\n\n            if (result2 !== null) {\n              result3 = parse_OptionalSP();\n\n              if (result3 !== null) {\n                result0 = [result0, result1, result2, result3];\n              } else {\n                result0 = null;\n                pos = pos1;\n              }\n            } else {\n              result0 = null;\n              pos = pos1;\n            }\n          } else {\n            result0 = null;\n            pos = pos1;\n          }\n        } else {\n          result0 = null;\n          pos = pos1;\n        }\n\n        if (result0 !== null) {\n          result0 = function (offset, param) {\n            return param;\n          }(pos0, result0[2]);\n        }\n\n        if (result0 === null) {\n          pos = pos0;\n        }\n\n        return result0;\n      }\n\n      function parse_URIReference() {\n        var result0, result1;\n        var pos0;\n        pos0 = pos;\n\n        if (/^[^>]/.test(input.charAt(pos))) {\n          result1 = input.charAt(pos);\n          pos++;\n        } else {\n          result1 = null;\n\n          if (reportFailures === 0) {\n            matchFailed(\"[^>]\");\n          }\n        }\n\n        if (result1 !== null) {\n          result0 = [];\n\n          while (result1 !== null) {\n            result0.push(result1);\n\n            if (/^[^>]/.test(input.charAt(pos))) {\n              result1 = input.charAt(pos);\n              pos++;\n            } else {\n              result1 = null;\n\n              if (reportFailures === 0) {\n                matchFailed(\"[^>]\");\n              }\n            }\n          }\n        } else {\n          result0 = null;\n        }\n\n        if (result0 !== null) {\n          result0 = function (offset, url) {\n            return url.join('');\n          }(pos0, result0);\n        }\n\n        if (result0 === null) {\n          pos = pos0;\n        }\n\n        return result0;\n      }\n\n      function parse_LinkParam() {\n        var result0, result1;\n        var pos0, pos1;\n        pos0 = pos;\n        pos1 = pos;\n        result0 = parse_LinkParamName();\n\n        if (result0 !== null) {\n          result1 = parse_LinkParamValue();\n          result1 = result1 !== null ? result1 : \"\";\n\n          if (result1 !== null) {\n            result0 = [result0, result1];\n          } else {\n            result0 = null;\n            pos = pos1;\n          }\n        } else {\n          result0 = null;\n          pos = pos1;\n        }\n\n        if (result0 !== null) {\n          result0 = function (offset, name, value) {\n            return [name, value];\n          }(pos0, result0[0], result0[1]);\n        }\n\n        if (result0 === null) {\n          pos = pos0;\n        }\n\n        return result0;\n      }\n\n      function parse_LinkParamName() {\n        var result0, result1;\n        var pos0;\n        pos0 = pos;\n\n        if (/^[a-z]/.test(input.charAt(pos))) {\n          result1 = input.charAt(pos);\n          pos++;\n        } else {\n          result1 = null;\n\n          if (reportFailures === 0) {\n            matchFailed(\"[a-z]\");\n          }\n        }\n\n        if (result1 !== null) {\n          result0 = [];\n\n          while (result1 !== null) {\n            result0.push(result1);\n\n            if (/^[a-z]/.test(input.charAt(pos))) {\n              result1 = input.charAt(pos);\n              pos++;\n            } else {\n              result1 = null;\n\n              if (reportFailures === 0) {\n                matchFailed(\"[a-z]\");\n              }\n            }\n          }\n        } else {\n          result0 = null;\n        }\n\n        if (result0 !== null) {\n          result0 = function (offset, name) {\n            return name.join('');\n          }(pos0, result0);\n        }\n\n        if (result0 === null) {\n          pos = pos0;\n        }\n\n        return result0;\n      }\n\n      function parse_LinkParamValue() {\n        var result0, result1;\n        var pos0, pos1;\n        pos0 = pos;\n        pos1 = pos;\n\n        if (input.charCodeAt(pos) === 61) {\n          result0 = \"=\";\n          pos++;\n        } else {\n          result0 = null;\n\n          if (reportFailures === 0) {\n            matchFailed(\"\\\"=\\\"\");\n          }\n        }\n\n        if (result0 !== null) {\n          result1 = parse_PToken();\n\n          if (result1 === null) {\n            result1 = parse_QuotedString();\n          }\n\n          if (result1 !== null) {\n            result0 = [result0, result1];\n          } else {\n            result0 = null;\n            pos = pos1;\n          }\n        } else {\n          result0 = null;\n          pos = pos1;\n        }\n\n        if (result0 !== null) {\n          result0 = function (offset, str) {\n            return str;\n          }(pos0, result0[1]);\n        }\n\n        if (result0 === null) {\n          pos = pos0;\n        }\n\n        return result0;\n      }\n\n      function parse_PToken() {\n        var result0, result1;\n        var pos0;\n        pos0 = pos;\n        result1 = parse_PTokenChar();\n\n        if (result1 !== null) {\n          result0 = [];\n\n          while (result1 !== null) {\n            result0.push(result1);\n            result1 = parse_PTokenChar();\n          }\n        } else {\n          result0 = null;\n        }\n\n        if (result0 !== null) {\n          result0 = function (offset, token) {\n            return token.join('');\n          }(pos0, result0);\n        }\n\n        if (result0 === null) {\n          pos = pos0;\n        }\n\n        return result0;\n      }\n\n      function parse_PTokenChar() {\n        var result0;\n\n        if (input.charCodeAt(pos) === 33) {\n          result0 = \"!\";\n          pos++;\n        } else {\n          result0 = null;\n\n          if (reportFailures === 0) {\n            matchFailed(\"\\\"!\\\"\");\n          }\n        }\n\n        if (result0 === null) {\n          if (input.charCodeAt(pos) === 35) {\n            result0 = \"#\";\n            pos++;\n          } else {\n            result0 = null;\n\n            if (reportFailures === 0) {\n              matchFailed(\"\\\"#\\\"\");\n            }\n          }\n\n          if (result0 === null) {\n            if (input.charCodeAt(pos) === 36) {\n              result0 = \"$\";\n              pos++;\n            } else {\n              result0 = null;\n\n              if (reportFailures === 0) {\n                matchFailed(\"\\\"$\\\"\");\n              }\n            }\n\n            if (result0 === null) {\n              if (input.charCodeAt(pos) === 37) {\n                result0 = \"%\";\n                pos++;\n              } else {\n                result0 = null;\n\n                if (reportFailures === 0) {\n                  matchFailed(\"\\\"%\\\"\");\n                }\n              }\n\n              if (result0 === null) {\n                if (input.charCodeAt(pos) === 38) {\n                  result0 = \"&\";\n                  pos++;\n                } else {\n                  result0 = null;\n\n                  if (reportFailures === 0) {\n                    matchFailed(\"\\\"&\\\"\");\n                  }\n                }\n\n                if (result0 === null) {\n                  if (input.charCodeAt(pos) === 39) {\n                    result0 = \"'\";\n                    pos++;\n                  } else {\n                    result0 = null;\n\n                    if (reportFailures === 0) {\n                      matchFailed(\"\\\"'\\\"\");\n                    }\n                  }\n\n                  if (result0 === null) {\n                    if (input.charCodeAt(pos) === 40) {\n                      result0 = \"(\";\n                      pos++;\n                    } else {\n                      result0 = null;\n\n                      if (reportFailures === 0) {\n                        matchFailed(\"\\\"(\\\"\");\n                      }\n                    }\n\n                    if (result0 === null) {\n                      if (input.charCodeAt(pos) === 41) {\n                        result0 = \")\";\n                        pos++;\n                      } else {\n                        result0 = null;\n\n                        if (reportFailures === 0) {\n                          matchFailed(\"\\\")\\\"\");\n                        }\n                      }\n\n                      if (result0 === null) {\n                        if (input.charCodeAt(pos) === 42) {\n                          result0 = \"*\";\n                          pos++;\n                        } else {\n                          result0 = null;\n\n                          if (reportFailures === 0) {\n                            matchFailed(\"\\\"*\\\"\");\n                          }\n                        }\n\n                        if (result0 === null) {\n                          if (input.charCodeAt(pos) === 43) {\n                            result0 = \"+\";\n                            pos++;\n                          } else {\n                            result0 = null;\n\n                            if (reportFailures === 0) {\n                              matchFailed(\"\\\"+\\\"\");\n                            }\n                          }\n\n                          if (result0 === null) {\n                            if (input.charCodeAt(pos) === 45) {\n                              result0 = \"-\";\n                              pos++;\n                            } else {\n                              result0 = null;\n\n                              if (reportFailures === 0) {\n                                matchFailed(\"\\\"-\\\"\");\n                              }\n                            }\n\n                            if (result0 === null) {\n                              if (input.charCodeAt(pos) === 46) {\n                                result0 = \".\";\n                                pos++;\n                              } else {\n                                result0 = null;\n\n                                if (reportFailures === 0) {\n                                  matchFailed(\"\\\".\\\"\");\n                                }\n                              }\n\n                              if (result0 === null) {\n                                if (input.charCodeAt(pos) === 124) {\n                                  result0 = \"|\";\n                                  pos++;\n                                } else {\n                                  result0 = null;\n\n                                  if (reportFailures === 0) {\n                                    matchFailed(\"\\\"|\\\"\");\n                                  }\n                                }\n\n                                if (result0 === null) {\n                                  result0 = parse_Digit();\n\n                                  if (result0 === null) {\n                                    if (input.charCodeAt(pos) === 58) {\n                                      result0 = \":\";\n                                      pos++;\n                                    } else {\n                                      result0 = null;\n\n                                      if (reportFailures === 0) {\n                                        matchFailed(\"\\\":\\\"\");\n                                      }\n                                    }\n\n                                    if (result0 === null) {\n                                      if (input.charCodeAt(pos) === 60) {\n                                        result0 = \"<\";\n                                        pos++;\n                                      } else {\n                                        result0 = null;\n\n                                        if (reportFailures === 0) {\n                                          matchFailed(\"\\\"<\\\"\");\n                                        }\n                                      }\n\n                                      if (result0 === null) {\n                                        if (input.charCodeAt(pos) === 61) {\n                                          result0 = \"=\";\n                                          pos++;\n                                        } else {\n                                          result0 = null;\n\n                                          if (reportFailures === 0) {\n                                            matchFailed(\"\\\"=\\\"\");\n                                          }\n                                        }\n\n                                        if (result0 === null) {\n                                          if (input.charCodeAt(pos) === 62) {\n                                            result0 = \">\";\n                                            pos++;\n                                          } else {\n                                            result0 = null;\n\n                                            if (reportFailures === 0) {\n                                              matchFailed(\"\\\">\\\"\");\n                                            }\n                                          }\n\n                                          if (result0 === null) {\n                                            if (input.charCodeAt(pos) === 63) {\n                                              result0 = \"?\";\n                                              pos++;\n                                            } else {\n                                              result0 = null;\n\n                                              if (reportFailures === 0) {\n                                                matchFailed(\"\\\"?\\\"\");\n                                              }\n                                            }\n\n                                            if (result0 === null) {\n                                              if (input.charCodeAt(pos) === 64) {\n                                                result0 = \"@\";\n                                                pos++;\n                                              } else {\n                                                result0 = null;\n\n                                                if (reportFailures === 0) {\n                                                  matchFailed(\"\\\"@\\\"\");\n                                                }\n                                              }\n\n                                              if (result0 === null) {\n                                                result0 = parse_Alpha();\n\n                                                if (result0 === null) {\n                                                  if (input.charCodeAt(pos) === 91) {\n                                                    result0 = \"[\";\n                                                    pos++;\n                                                  } else {\n                                                    result0 = null;\n\n                                                    if (reportFailures === 0) {\n                                                      matchFailed(\"\\\"[\\\"\");\n                                                    }\n                                                  }\n\n                                                  if (result0 === null) {\n                                                    if (input.charCodeAt(pos) === 93) {\n                                                      result0 = \"]\";\n                                                      pos++;\n                                                    } else {\n                                                      result0 = null;\n\n                                                      if (reportFailures === 0) {\n                                                        matchFailed(\"\\\"]\\\"\");\n                                                      }\n                                                    }\n\n                                                    if (result0 === null) {\n                                                      if (input.charCodeAt(pos) === 94) {\n                                                        result0 = \"^\";\n                                                        pos++;\n                                                      } else {\n                                                        result0 = null;\n\n                                                        if (reportFailures === 0) {\n                                                          matchFailed(\"\\\"^\\\"\");\n                                                        }\n                                                      }\n\n                                                      if (result0 === null) {\n                                                        if (input.charCodeAt(pos) === 95) {\n                                                          result0 = \"_\";\n                                                          pos++;\n                                                        } else {\n                                                          result0 = null;\n\n                                                          if (reportFailures === 0) {\n                                                            matchFailed(\"\\\"_\\\"\");\n                                                          }\n                                                        }\n\n                                                        if (result0 === null) {\n                                                          if (input.charCodeAt(pos) === 96) {\n                                                            result0 = \"`\";\n                                                            pos++;\n                                                          } else {\n                                                            result0 = null;\n\n                                                            if (reportFailures === 0) {\n                                                              matchFailed(\"\\\"`\\\"\");\n                                                            }\n                                                          }\n\n                                                          if (result0 === null) {\n                                                            if (input.charCodeAt(pos) === 123) {\n                                                              result0 = \"{\";\n                                                              pos++;\n                                                            } else {\n                                                              result0 = null;\n\n                                                              if (reportFailures === 0) {\n                                                                matchFailed(\"\\\"{\\\"\");\n                                                              }\n                                                            }\n\n                                                            if (result0 === null) {\n                                                              if (/^[\\/\\/]/.test(input.charAt(pos))) {\n                                                                result0 = input.charAt(pos);\n                                                                pos++;\n                                                              } else {\n                                                                result0 = null;\n\n                                                                if (reportFailures === 0) {\n                                                                  matchFailed(\"[\\\\/\\\\/]\");\n                                                                }\n                                                              }\n\n                                                              if (result0 === null) {\n                                                                if (input.charCodeAt(pos) === 125) {\n                                                                  result0 = \"}\";\n                                                                  pos++;\n                                                                } else {\n                                                                  result0 = null;\n\n                                                                  if (reportFailures === 0) {\n                                                                    matchFailed(\"\\\"}\\\"\");\n                                                                  }\n                                                                }\n\n                                                                if (result0 === null) {\n                                                                  if (input.charCodeAt(pos) === 126) {\n                                                                    result0 = \"~\";\n                                                                    pos++;\n                                                                  } else {\n                                                                    result0 = null;\n\n                                                                    if (reportFailures === 0) {\n                                                                      matchFailed(\"\\\"~\\\"\");\n                                                                    }\n                                                                  }\n                                                                }\n                                                              }\n                                                            }\n                                                          }\n                                                        }\n                                                      }\n                                                    }\n                                                  }\n                                                }\n                                              }\n                                            }\n                                          }\n                                        }\n                                      }\n                                    }\n                                  }\n                                }\n                              }\n                            }\n                          }\n                        }\n                      }\n                    }\n                  }\n                }\n              }\n            }\n          }\n        }\n\n        return result0;\n      }\n\n      function parse_OptionalSP() {\n        var result0, result1;\n        result0 = [];\n        result1 = parse_SP();\n\n        while (result1 !== null) {\n          result0.push(result1);\n          result1 = parse_SP();\n        }\n\n        return result0;\n      }\n\n      function parse_QuotedString() {\n        var result0, result1, result2;\n        var pos0, pos1;\n        pos0 = pos;\n        pos1 = pos;\n        result0 = parse_DQ();\n\n        if (result0 !== null) {\n          result1 = parse_QuotedStringInternal();\n\n          if (result1 !== null) {\n            result2 = parse_DQ();\n\n            if (result2 !== null) {\n              result0 = [result0, result1, result2];\n            } else {\n              result0 = null;\n              pos = pos1;\n            }\n          } else {\n            result0 = null;\n            pos = pos1;\n          }\n        } else {\n          result0 = null;\n          pos = pos1;\n        }\n\n        if (result0 !== null) {\n          result0 = function (offset, str) {\n            return str;\n          }(pos0, result0[1]);\n        }\n\n        if (result0 === null) {\n          pos = pos0;\n        }\n\n        return result0;\n      }\n\n      function parse_QuotedStringInternal() {\n        var result0, result1;\n        var pos0;\n        pos0 = pos;\n        result0 = [];\n        result1 = parse_QDText();\n\n        if (result1 === null) {\n          result1 = parse_QuotedPair();\n        }\n\n        while (result1 !== null) {\n          result0.push(result1);\n          result1 = parse_QDText();\n\n          if (result1 === null) {\n            result1 = parse_QuotedPair();\n          }\n        }\n\n        if (result0 !== null) {\n          result0 = function (offset, str) {\n            return str.join('');\n          }(pos0, result0);\n        }\n\n        if (result0 === null) {\n          pos = pos0;\n        }\n\n        return result0;\n      }\n\n      function parse_Char() {\n        var result0;\n\n        if (/^[\\0-]/.test(input.charAt(pos))) {\n          result0 = input.charAt(pos);\n          pos++;\n        } else {\n          result0 = null;\n\n          if (reportFailures === 0) {\n            matchFailed(\"[\\\\0-]\");\n          }\n        }\n\n        return result0;\n      }\n\n      function parse_UpAlpha() {\n        var result0;\n\n        if (/^[A-Z]/.test(input.charAt(pos))) {\n          result0 = input.charAt(pos);\n          pos++;\n        } else {\n          result0 = null;\n\n          if (reportFailures === 0) {\n            matchFailed(\"[A-Z]\");\n          }\n        }\n\n        return result0;\n      }\n\n      function parse_LoAlpha() {\n        var result0;\n\n        if (/^[a-z]/.test(input.charAt(pos))) {\n          result0 = input.charAt(pos);\n          pos++;\n        } else {\n          result0 = null;\n\n          if (reportFailures === 0) {\n            matchFailed(\"[a-z]\");\n          }\n        }\n\n        return result0;\n      }\n\n      function parse_Alpha() {\n        var result0;\n        result0 = parse_UpAlpha();\n\n        if (result0 === null) {\n          result0 = parse_LoAlpha();\n        }\n\n        return result0;\n      }\n\n      function parse_Digit() {\n        var result0;\n\n        if (/^[0-9]/.test(input.charAt(pos))) {\n          result0 = input.charAt(pos);\n          pos++;\n        } else {\n          result0 = null;\n\n          if (reportFailures === 0) {\n            matchFailed(\"[0-9]\");\n          }\n        }\n\n        return result0;\n      }\n\n      function parse_SP() {\n        var result0;\n\n        if (/^[ ]/.test(input.charAt(pos))) {\n          result0 = input.charAt(pos);\n          pos++;\n        } else {\n          result0 = null;\n\n          if (reportFailures === 0) {\n            matchFailed(\"[ ]\");\n          }\n        }\n\n        return result0;\n      }\n\n      function parse_DQ() {\n        var result0;\n\n        if (/^[\"]/.test(input.charAt(pos))) {\n          result0 = input.charAt(pos);\n          pos++;\n        } else {\n          result0 = null;\n\n          if (reportFailures === 0) {\n            matchFailed(\"[\\\"]\");\n          }\n        }\n\n        return result0;\n      }\n\n      function parse_QDText() {\n        var result0;\n\n        if (/^[^\"]/.test(input.charAt(pos))) {\n          result0 = input.charAt(pos);\n          pos++;\n        } else {\n          result0 = null;\n\n          if (reportFailures === 0) {\n            matchFailed(\"[^\\\"]\");\n          }\n        }\n\n        return result0;\n      }\n\n      function parse_QuotedPair() {\n        var result0, result1;\n        var pos0;\n        pos0 = pos;\n\n        if (/^[\\\\]/.test(input.charAt(pos))) {\n          result0 = input.charAt(pos);\n          pos++;\n        } else {\n          result0 = null;\n\n          if (reportFailures === 0) {\n            matchFailed(\"[\\\\\\\\]\");\n          }\n        }\n\n        if (result0 !== null) {\n          result1 = parse_Char();\n\n          if (result1 !== null) {\n            result0 = [result0, result1];\n          } else {\n            result0 = null;\n            pos = pos0;\n          }\n        } else {\n          result0 = null;\n          pos = pos0;\n        }\n\n        return result0;\n      }\n\n      function cleanupExpected(expected) {\n        expected.sort();\n        var lastExpected = null;\n        var cleanExpected = [];\n\n        for (var i = 0; i < expected.length; i++) {\n          if (expected[i] !== lastExpected) {\n            cleanExpected.push(expected[i]);\n            lastExpected = expected[i];\n          }\n        }\n\n        return cleanExpected;\n      }\n\n      function computeErrorPosition() {\n        /*\n         * The first idea was to use |String.split| to break the input up to the\n         * error position along newlines and derive the line and column from\n         * there. However IE's |split| implementation is so broken that it was\n         * enough to prevent it.\n         */\n        var line = 1;\n        var column = 1;\n        var seenCR = false;\n\n        for (var i = 0; i < Math.max(pos, rightmostFailuresPos); i++) {\n          var ch = input.charAt(i);\n\n          if (ch === \"\\n\") {\n            if (!seenCR) {\n              line++;\n            }\n\n            column = 1;\n            seenCR = false;\n          } else if (ch === \"\\r\" || ch === \"\\u2028\" || ch === \"\\u2029\") {\n            line++;\n            column = 1;\n            seenCR = true;\n          } else {\n            column++;\n            seenCR = false;\n          }\n        }\n\n        return {\n          line: line,\n          column: column\n        };\n      }\n\n      var result = parseFunctions[startRule]();\n      /*\n       * The parser is now in one of the following three states:\n       *\n       * 1. The parser successfully parsed the whole input.\n       *\n       *    - |result !== null|\n       *    - |pos === input.length|\n       *    - |rightmostFailuresExpected| may or may not contain something\n       *\n       * 2. The parser successfully parsed only a part of the input.\n       *\n       *    - |result !== null|\n       *    - |pos < input.length|\n       *    - |rightmostFailuresExpected| may or may not contain something\n       *\n       * 3. The parser did not successfully parse any part of the input.\n       *\n       *   - |result === null|\n       *   - |pos === 0|\n       *   - |rightmostFailuresExpected| contains at least one failure\n       *\n       * All code following this comment (including called functions) must\n       * handle these states.\n       */\n\n      if (result === null || pos !== input.length) {\n        var offset = Math.max(pos, rightmostFailuresPos);\n        var found = offset < input.length ? input.charAt(offset) : null;\n        var errorPosition = computeErrorPosition();\n        throw new this.SyntaxError(cleanupExpected(rightmostFailuresExpected), found, offset, errorPosition.line, errorPosition.column);\n      }\n\n      return result;\n    },\n\n    /* Returns the parser source code. */\n    toSource: function () {\n      return this._source;\n    }\n  };\n  /* Thrown when a parser encounters a syntax error. */\n\n  result.SyntaxError = function (expected, found, offset, line, column) {\n    function buildMessage(expected, found) {\n      var expectedHumanized, foundHumanized;\n\n      switch (expected.length) {\n        case 0:\n          expectedHumanized = \"end of input\";\n          break;\n\n        case 1:\n          expectedHumanized = expected[0];\n          break;\n\n        default:\n          expectedHumanized = expected.slice(0, expected.length - 1).join(\", \") + \" or \" + expected[expected.length - 1];\n      }\n\n      foundHumanized = found ? quote(found) : \"end of input\";\n      return \"Expected \" + expectedHumanized + \" but \" + foundHumanized + \" found.\";\n    }\n\n    this.name = \"SyntaxError\";\n    this.expected = expected;\n    this.found = found;\n    this.message = buildMessage(expected, found);\n    this.offset = offset;\n    this.line = line;\n    this.column = column;\n  };\n\n  result.SyntaxError.prototype = Error.prototype;\n  return result;\n}();","map":{"version":3,"sources":["/Users/carlin/Desktop/USC_classes/DSCI_554/project-datadocs-real/demo/node_modules/rest/parsers/rfc5988.js"],"names":["module","exports","quote","s","replace","escape","result","parse","input","startRule","parseFunctions","parse_start","parse_LinkValue","parse_LinkParams","parse_URIReference","parse_LinkParam","parse_LinkParamName","parse_LinkParamValue","parse_PToken","parse_PTokenChar","parse_OptionalSP","parse_QuotedString","parse_QuotedStringInternal","parse_Char","parse_UpAlpha","parse_LoAlpha","parse_Alpha","parse_Digit","parse_SP","parse_DQ","parse_QDText","parse_QuotedPair","undefined","Error","pos","reportFailures","rightmostFailuresPos","rightmostFailuresExpected","padLeft","padding","length","padLength","i","ch","charCode","charCodeAt","escapeChar","toString","toUpperCase","matchFailed","failure","push","result0","result1","result2","result3","result4","pos0","pos1","pos2","pos3","offset","start","last","concat","result5","href","params","link","forEach","param","test","charAt","url","join","name","value","str","token","cleanupExpected","expected","sort","lastExpected","cleanExpected","computeErrorPosition","line","column","seenCR","Math","max","found","errorPosition","SyntaxError","toSource","_source","buildMessage","expectedHumanized","foundHumanized","slice","message","prototype"],"mappings":"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","sourcesContent":["module.exports = (function(){\n  /*\n   * Generated by PEG.js 0.7.0.\n   *\n   * http://pegjs.majda.cz/\n   */\n\n  function quote(s) {\n    /*\n     * ECMA-262, 5th ed., 7.8.4: All characters may appear literally in a\n     * string literal except for the closing quote character, backslash,\n     * carriage return, line separator, paragraph separator, and line feed.\n     * Any character may appear in the form of an escape sequence.\n     *\n     * For portability, we also escape escape all control and non-ASCII\n     * characters. Note that \"\\0\" and \"\\v\" escape sequences are not used\n     * because JSHint does not like the first and IE the second.\n     */\n     return '\"' + s\n      .replace(/\\\\/g, '\\\\\\\\')  // backslash\n      .replace(/\"/g, '\\\\\"')    // closing quote character\n      .replace(/\\x08/g, '\\\\b') // backspace\n      .replace(/\\t/g, '\\\\t')   // horizontal tab\n      .replace(/\\n/g, '\\\\n')   // line feed\n      .replace(/\\f/g, '\\\\f')   // form feed\n      .replace(/\\r/g, '\\\\r')   // carriage return\n      .replace(/[\\x00-\\x07\\x0B\\x0E-\\x1F\\x80-\\uFFFF]/g, escape)\n      + '\"';\n  }\n\n  var result = {\n    /*\n     * Parses the input with a generated parser. If the parsing is successfull,\n     * returns a value explicitly or implicitly specified by the grammar from\n     * which the parser was generated (see |PEG.buildParser|). If the parsing is\n     * unsuccessful, throws |PEG.parser.SyntaxError| describing the error.\n     */\n    parse: function(input, startRule) {\n      var parseFunctions = {\n        \"start\": parse_start,\n        \"LinkValue\": parse_LinkValue,\n        \"LinkParams\": parse_LinkParams,\n        \"URIReference\": parse_URIReference,\n        \"LinkParam\": parse_LinkParam,\n        \"LinkParamName\": parse_LinkParamName,\n        \"LinkParamValue\": parse_LinkParamValue,\n        \"PToken\": parse_PToken,\n        \"PTokenChar\": parse_PTokenChar,\n        \"OptionalSP\": parse_OptionalSP,\n        \"QuotedString\": parse_QuotedString,\n        \"QuotedStringInternal\": parse_QuotedStringInternal,\n        \"Char\": parse_Char,\n        \"UpAlpha\": parse_UpAlpha,\n        \"LoAlpha\": parse_LoAlpha,\n        \"Alpha\": parse_Alpha,\n        \"Digit\": parse_Digit,\n        \"SP\": parse_SP,\n        \"DQ\": parse_DQ,\n        \"QDText\": parse_QDText,\n        \"QuotedPair\": parse_QuotedPair\n      };\n\n      if (startRule !== undefined) {\n        if (parseFunctions[startRule] === undefined) {\n          throw new Error(\"Invalid rule name: \" + quote(startRule) + \".\");\n        }\n      } else {\n        startRule = \"start\";\n      }\n\n      var pos = 0;\n      var reportFailures = 0;\n      var rightmostFailuresPos = 0;\n      var rightmostFailuresExpected = [];\n\n      function padLeft(input, padding, length) {\n        var result = input;\n\n        var padLength = length - input.length;\n        for (var i = 0; i < padLength; i++) {\n          result = padding + result;\n        }\n\n        return result;\n      }\n\n      function escape(ch) {\n        var charCode = ch.charCodeAt(0);\n        var escapeChar;\n        var length;\n\n        if (charCode <= 0xFF) {\n          escapeChar = 'x';\n          length = 2;\n        } else {\n          escapeChar = 'u';\n          length = 4;\n        }\n\n        return '\\\\' + escapeChar + padLeft(charCode.toString(16).toUpperCase(), '0', length);\n      }\n\n      function matchFailed(failure) {\n        if (pos < rightmostFailuresPos) {\n          return;\n        }\n\n        if (pos > rightmostFailuresPos) {\n          rightmostFailuresPos = pos;\n          rightmostFailuresExpected = [];\n        }\n\n        rightmostFailuresExpected.push(failure);\n      }\n\n      function parse_start() {\n        var result0, result1, result2, result3, result4;\n        var pos0, pos1, pos2, pos3;\n\n        pos0 = pos;\n        pos1 = pos;\n        result0 = [];\n        pos2 = pos;\n        pos3 = pos;\n        result1 = parse_LinkValue();\n        if (result1 !== null) {\n          result2 = parse_OptionalSP();\n          if (result2 !== null) {\n            if (input.charCodeAt(pos) === 44) {\n              result3 = \",\";\n              pos++;\n            } else {\n              result3 = null;\n              if (reportFailures === 0) {\n                matchFailed(\"\\\",\\\"\");\n              }\n            }\n            if (result3 !== null) {\n              result4 = parse_OptionalSP();\n              if (result4 !== null) {\n                result1 = [result1, result2, result3, result4];\n              } else {\n                result1 = null;\n                pos = pos3;\n              }\n            } else {\n              result1 = null;\n              pos = pos3;\n            }\n          } else {\n            result1 = null;\n            pos = pos3;\n          }\n        } else {\n          result1 = null;\n          pos = pos3;\n        }\n        if (result1 !== null) {\n          result1 = (function(offset, i) {return i;})(pos2, result1[0]);\n        }\n        if (result1 === null) {\n          pos = pos2;\n        }\n        while (result1 !== null) {\n          result0.push(result1);\n          pos2 = pos;\n          pos3 = pos;\n          result1 = parse_LinkValue();\n          if (result1 !== null) {\n            result2 = parse_OptionalSP();\n            if (result2 !== null) {\n              if (input.charCodeAt(pos) === 44) {\n                result3 = \",\";\n                pos++;\n              } else {\n                result3 = null;\n                if (reportFailures === 0) {\n                  matchFailed(\"\\\",\\\"\");\n                }\n              }\n              if (result3 !== null) {\n                result4 = parse_OptionalSP();\n                if (result4 !== null) {\n                  result1 = [result1, result2, result3, result4];\n                } else {\n                  result1 = null;\n                  pos = pos3;\n                }\n              } else {\n                result1 = null;\n                pos = pos3;\n              }\n            } else {\n              result1 = null;\n              pos = pos3;\n            }\n          } else {\n            result1 = null;\n            pos = pos3;\n          }\n          if (result1 !== null) {\n            result1 = (function(offset, i) {return i;})(pos2, result1[0]);\n          }\n          if (result1 === null) {\n            pos = pos2;\n          }\n        }\n        if (result0 !== null) {\n          result1 = parse_LinkValue();\n          if (result1 !== null) {\n            result0 = [result0, result1];\n          } else {\n            result0 = null;\n            pos = pos1;\n          }\n        } else {\n          result0 = null;\n          pos = pos1;\n        }\n        if (result0 !== null) {\n          result0 = (function(offset, start, last) { return start.concat([last]) })(pos0, result0[0], result0[1]);\n        }\n        if (result0 === null) {\n          pos = pos0;\n        }\n        return result0;\n      }\n\n      function parse_LinkValue() {\n        var result0, result1, result2, result3, result4, result5;\n        var pos0, pos1;\n\n        pos0 = pos;\n        pos1 = pos;\n        if (input.charCodeAt(pos) === 60) {\n          result0 = \"<\";\n          pos++;\n        } else {\n          result0 = null;\n          if (reportFailures === 0) {\n            matchFailed(\"\\\"<\\\"\");\n          }\n        }\n        if (result0 !== null) {\n          result1 = parse_URIReference();\n          if (result1 !== null) {\n            if (input.charCodeAt(pos) === 62) {\n              result2 = \">\";\n              pos++;\n            } else {\n              result2 = null;\n              if (reportFailures === 0) {\n                matchFailed(\"\\\">\\\"\");\n              }\n            }\n            if (result2 !== null) {\n              result3 = parse_OptionalSP();\n              if (result3 !== null) {\n                result4 = [];\n                result5 = parse_LinkParams();\n                while (result5 !== null) {\n                  result4.push(result5);\n                  result5 = parse_LinkParams();\n                }\n                if (result4 !== null) {\n                  result0 = [result0, result1, result2, result3, result4];\n                } else {\n                  result0 = null;\n                  pos = pos1;\n                }\n              } else {\n                result0 = null;\n                pos = pos1;\n              }\n            } else {\n              result0 = null;\n              pos = pos1;\n            }\n          } else {\n            result0 = null;\n            pos = pos1;\n          }\n        } else {\n          result0 = null;\n          pos = pos1;\n        }\n        if (result0 !== null) {\n          result0 = (function(offset, href, params) {\n            var link = {};\n            params.forEach(function (param) {\n              link[param[0]] = param[1];\n            });\n            link.href = href;\n            return link;\n          })(pos0, result0[1], result0[4]);\n        }\n        if (result0 === null) {\n          pos = pos0;\n        }\n        return result0;\n      }\n\n      function parse_LinkParams() {\n        var result0, result1, result2, result3;\n        var pos0, pos1;\n\n        pos0 = pos;\n        pos1 = pos;\n        if (input.charCodeAt(pos) === 59) {\n          result0 = \";\";\n          pos++;\n        } else {\n          result0 = null;\n          if (reportFailures === 0) {\n            matchFailed(\"\\\";\\\"\");\n          }\n        }\n        if (result0 !== null) {\n          result1 = parse_OptionalSP();\n          if (result1 !== null) {\n            result2 = parse_LinkParam();\n            if (result2 !== null) {\n              result3 = parse_OptionalSP();\n              if (result3 !== null) {\n                result0 = [result0, result1, result2, result3];\n              } else {\n                result0 = null;\n                pos = pos1;\n              }\n            } else {\n              result0 = null;\n              pos = pos1;\n            }\n          } else {\n            result0 = null;\n            pos = pos1;\n          }\n        } else {\n          result0 = null;\n          pos = pos1;\n        }\n        if (result0 !== null) {\n          result0 = (function(offset, param) { return param })(pos0, result0[2]);\n        }\n        if (result0 === null) {\n          pos = pos0;\n        }\n        return result0;\n      }\n\n      function parse_URIReference() {\n        var result0, result1;\n        var pos0;\n\n        pos0 = pos;\n        if (/^[^>]/.test(input.charAt(pos))) {\n          result1 = input.charAt(pos);\n          pos++;\n        } else {\n          result1 = null;\n          if (reportFailures === 0) {\n            matchFailed(\"[^>]\");\n          }\n        }\n        if (result1 !== null) {\n          result0 = [];\n          while (result1 !== null) {\n            result0.push(result1);\n            if (/^[^>]/.test(input.charAt(pos))) {\n              result1 = input.charAt(pos);\n              pos++;\n            } else {\n              result1 = null;\n              if (reportFailures === 0) {\n                matchFailed(\"[^>]\");\n              }\n            }\n          }\n        } else {\n          result0 = null;\n        }\n        if (result0 !== null) {\n          result0 = (function(offset, url) { return url.join('') })(pos0, result0);\n        }\n        if (result0 === null) {\n          pos = pos0;\n        }\n        return result0;\n      }\n\n      function parse_LinkParam() {\n        var result0, result1;\n        var pos0, pos1;\n\n        pos0 = pos;\n        pos1 = pos;\n        result0 = parse_LinkParamName();\n        if (result0 !== null) {\n          result1 = parse_LinkParamValue();\n          result1 = result1 !== null ? result1 : \"\";\n          if (result1 !== null) {\n            result0 = [result0, result1];\n          } else {\n            result0 = null;\n            pos = pos1;\n          }\n        } else {\n          result0 = null;\n          pos = pos1;\n        }\n        if (result0 !== null) {\n          result0 = (function(offset, name, value) { return [name, value] })(pos0, result0[0], result0[1]);\n        }\n        if (result0 === null) {\n          pos = pos0;\n        }\n        return result0;\n      }\n\n      function parse_LinkParamName() {\n        var result0, result1;\n        var pos0;\n\n        pos0 = pos;\n        if (/^[a-z]/.test(input.charAt(pos))) {\n          result1 = input.charAt(pos);\n          pos++;\n        } else {\n          result1 = null;\n          if (reportFailures === 0) {\n            matchFailed(\"[a-z]\");\n          }\n        }\n        if (result1 !== null) {\n          result0 = [];\n          while (result1 !== null) {\n            result0.push(result1);\n            if (/^[a-z]/.test(input.charAt(pos))) {\n              result1 = input.charAt(pos);\n              pos++;\n            } else {\n              result1 = null;\n              if (reportFailures === 0) {\n                matchFailed(\"[a-z]\");\n              }\n            }\n          }\n        } else {\n          result0 = null;\n        }\n        if (result0 !== null) {\n          result0 = (function(offset, name) { return name.join('') })(pos0, result0);\n        }\n        if (result0 === null) {\n          pos = pos0;\n        }\n        return result0;\n      }\n\n      function parse_LinkParamValue() {\n        var result0, result1;\n        var pos0, pos1;\n\n        pos0 = pos;\n        pos1 = pos;\n        if (input.charCodeAt(pos) === 61) {\n          result0 = \"=\";\n          pos++;\n        } else {\n          result0 = null;\n          if (reportFailures === 0) {\n            matchFailed(\"\\\"=\\\"\");\n          }\n        }\n        if (result0 !== null) {\n          result1 = parse_PToken();\n          if (result1 === null) {\n            result1 = parse_QuotedString();\n          }\n          if (result1 !== null) {\n            result0 = [result0, result1];\n          } else {\n            result0 = null;\n            pos = pos1;\n          }\n        } else {\n          result0 = null;\n          pos = pos1;\n        }\n        if (result0 !== null) {\n          result0 = (function(offset, str) { return str })(pos0, result0[1]);\n        }\n        if (result0 === null) {\n          pos = pos0;\n        }\n        return result0;\n      }\n\n      function parse_PToken() {\n        var result0, result1;\n        var pos0;\n\n        pos0 = pos;\n        result1 = parse_PTokenChar();\n        if (result1 !== null) {\n          result0 = [];\n          while (result1 !== null) {\n            result0.push(result1);\n            result1 = parse_PTokenChar();\n          }\n        } else {\n          result0 = null;\n        }\n        if (result0 !== null) {\n          result0 = (function(offset, token) { return token.join('') })(pos0, result0);\n        }\n        if (result0 === null) {\n          pos = pos0;\n        }\n        return result0;\n      }\n\n      function parse_PTokenChar() {\n        var result0;\n\n        if (input.charCodeAt(pos) === 33) {\n          result0 = \"!\";\n          pos++;\n        } else {\n          result0 = null;\n          if (reportFailures === 0) {\n            matchFailed(\"\\\"!\\\"\");\n          }\n        }\n        if (result0 === null) {\n          if (input.charCodeAt(pos) === 35) {\n            result0 = \"#\";\n            pos++;\n          } else {\n            result0 = null;\n            if (reportFailures === 0) {\n              matchFailed(\"\\\"#\\\"\");\n            }\n          }\n          if (result0 === null) {\n            if (input.charCodeAt(pos) === 36) {\n              result0 = \"$\";\n              pos++;\n            } else {\n              result0 = null;\n              if (reportFailures === 0) {\n                matchFailed(\"\\\"$\\\"\");\n              }\n            }\n            if (result0 === null) {\n              if (input.charCodeAt(pos) === 37) {\n                result0 = \"%\";\n                pos++;\n              } else {\n                result0 = null;\n                if (reportFailures === 0) {\n                  matchFailed(\"\\\"%\\\"\");\n                }\n              }\n              if (result0 === null) {\n                if (input.charCodeAt(pos) === 38) {\n                  result0 = \"&\";\n                  pos++;\n                } else {\n                  result0 = null;\n                  if (reportFailures === 0) {\n                    matchFailed(\"\\\"&\\\"\");\n                  }\n                }\n                if (result0 === null) {\n                  if (input.charCodeAt(pos) === 39) {\n                    result0 = \"'\";\n                    pos++;\n                  } else {\n                    result0 = null;\n                    if (reportFailures === 0) {\n                      matchFailed(\"\\\"'\\\"\");\n                    }\n                  }\n                  if (result0 === null) {\n                    if (input.charCodeAt(pos) === 40) {\n                      result0 = \"(\";\n                      pos++;\n                    } else {\n                      result0 = null;\n                      if (reportFailures === 0) {\n                        matchFailed(\"\\\"(\\\"\");\n                      }\n                    }\n                    if (result0 === null) {\n                      if (input.charCodeAt(pos) === 41) {\n                        result0 = \")\";\n                        pos++;\n                      } else {\n                        result0 = null;\n                        if (reportFailures === 0) {\n                          matchFailed(\"\\\")\\\"\");\n                        }\n                      }\n                      if (result0 === null) {\n                        if (input.charCodeAt(pos) === 42) {\n                          result0 = \"*\";\n                          pos++;\n                        } else {\n                          result0 = null;\n                          if (reportFailures === 0) {\n                            matchFailed(\"\\\"*\\\"\");\n                          }\n                        }\n                        if (result0 === null) {\n                          if (input.charCodeAt(pos) === 43) {\n                            result0 = \"+\";\n                            pos++;\n                          } else {\n                            result0 = null;\n                            if (reportFailures === 0) {\n                              matchFailed(\"\\\"+\\\"\");\n                            }\n                          }\n                          if (result0 === null) {\n                            if (input.charCodeAt(pos) === 45) {\n                              result0 = \"-\";\n                              pos++;\n                            } else {\n                              result0 = null;\n                              if (reportFailures === 0) {\n                                matchFailed(\"\\\"-\\\"\");\n                              }\n                            }\n                            if (result0 === null) {\n                              if (input.charCodeAt(pos) === 46) {\n                                result0 = \".\";\n                                pos++;\n                              } else {\n                                result0 = null;\n                                if (reportFailures === 0) {\n                                  matchFailed(\"\\\".\\\"\");\n                                }\n                              }\n                              if (result0 === null) {\n                                if (input.charCodeAt(pos) === 124) {\n                                  result0 = \"|\";\n                                  pos++;\n                                } else {\n                                  result0 = null;\n                                  if (reportFailures === 0) {\n                                    matchFailed(\"\\\"|\\\"\");\n                                  }\n                                }\n                                if (result0 === null) {\n                                  result0 = parse_Digit();\n                                  if (result0 === null) {\n                                    if (input.charCodeAt(pos) === 58) {\n                                      result0 = \":\";\n                                      pos++;\n                                    } else {\n                                      result0 = null;\n                                      if (reportFailures === 0) {\n                                        matchFailed(\"\\\":\\\"\");\n                                      }\n                                    }\n                                    if (result0 === null) {\n                                      if (input.charCodeAt(pos) === 60) {\n                                        result0 = \"<\";\n                                        pos++;\n                                      } else {\n                                        result0 = null;\n                                        if (reportFailures === 0) {\n                                          matchFailed(\"\\\"<\\\"\");\n                                        }\n                                      }\n                                      if (result0 === null) {\n                                        if (input.charCodeAt(pos) === 61) {\n                                          result0 = \"=\";\n                                          pos++;\n                                        } else {\n                                          result0 = null;\n                                          if (reportFailures === 0) {\n                                            matchFailed(\"\\\"=\\\"\");\n                                          }\n                                        }\n                                        if (result0 === null) {\n                                          if (input.charCodeAt(pos) === 62) {\n                                            result0 = \">\";\n                                            pos++;\n                                          } else {\n                                            result0 = null;\n                                            if (reportFailures === 0) {\n                                              matchFailed(\"\\\">\\\"\");\n                                            }\n                                          }\n                                          if (result0 === null) {\n                                            if (input.charCodeAt(pos) === 63) {\n                                              result0 = \"?\";\n                                              pos++;\n                                            } else {\n                                              result0 = null;\n                                              if (reportFailures === 0) {\n                                                matchFailed(\"\\\"?\\\"\");\n                                              }\n                                            }\n                                            if (result0 === null) {\n                                              if (input.charCodeAt(pos) === 64) {\n                                                result0 = \"@\";\n                                                pos++;\n                                              } else {\n                                                result0 = null;\n                                                if (reportFailures === 0) {\n                                                  matchFailed(\"\\\"@\\\"\");\n                                                }\n                                              }\n                                              if (result0 === null) {\n                                                result0 = parse_Alpha();\n                                                if (result0 === null) {\n                                                  if (input.charCodeAt(pos) === 91) {\n                                                    result0 = \"[\";\n                                                    pos++;\n                                                  } else {\n                                                    result0 = null;\n                                                    if (reportFailures === 0) {\n                                                      matchFailed(\"\\\"[\\\"\");\n                                                    }\n                                                  }\n                                                  if (result0 === null) {\n                                                    if (input.charCodeAt(pos) === 93) {\n                                                      result0 = \"]\";\n                                                      pos++;\n                                                    } else {\n                                                      result0 = null;\n                                                      if (reportFailures === 0) {\n                                                        matchFailed(\"\\\"]\\\"\");\n                                                      }\n                                                    }\n                                                    if (result0 === null) {\n                                                      if (input.charCodeAt(pos) === 94) {\n                                                        result0 = \"^\";\n                                                        pos++;\n                                                      } else {\n                                                        result0 = null;\n                                                        if (reportFailures === 0) {\n                                                          matchFailed(\"\\\"^\\\"\");\n                                                        }\n                                                      }\n                                                      if (result0 === null) {\n                                                        if (input.charCodeAt(pos) === 95) {\n                                                          result0 = \"_\";\n                                                          pos++;\n                                                        } else {\n                                                          result0 = null;\n                                                          if (reportFailures === 0) {\n                                                            matchFailed(\"\\\"_\\\"\");\n                                                          }\n                                                        }\n                                                        if (result0 === null) {\n                                                          if (input.charCodeAt(pos) === 96) {\n                                                            result0 = \"`\";\n                                                            pos++;\n                                                          } else {\n                                                            result0 = null;\n                                                            if (reportFailures === 0) {\n                                                              matchFailed(\"\\\"`\\\"\");\n                                                            }\n                                                          }\n                                                          if (result0 === null) {\n                                                            if (input.charCodeAt(pos) === 123) {\n                                                              result0 = \"{\";\n                                                              pos++;\n                                                            } else {\n                                                              result0 = null;\n                                                              if (reportFailures === 0) {\n                                                                matchFailed(\"\\\"{\\\"\");\n                                                              }\n                                                            }\n                                                            if (result0 === null) {\n                                                              if (/^[\\/\\/]/.test(input.charAt(pos))) {\n                                                                result0 = input.charAt(pos);\n                                                                pos++;\n                                                              } else {\n                                                                result0 = null;\n                                                                if (reportFailures === 0) {\n                                                                  matchFailed(\"[\\\\/\\\\/]\");\n                                                                }\n                                                              }\n                                                              if (result0 === null) {\n                                                                if (input.charCodeAt(pos) === 125) {\n                                                                  result0 = \"}\";\n                                                                  pos++;\n                                                                } else {\n                                                                  result0 = null;\n                                                                  if (reportFailures === 0) {\n                                                                    matchFailed(\"\\\"}\\\"\");\n                                                                  }\n                                                                }\n                                                                if (result0 === null) {\n                                                                  if (input.charCodeAt(pos) === 126) {\n                                                                    result0 = \"~\";\n                                                                    pos++;\n                                                                  } else {\n                                                                    result0 = null;\n                                                                    if (reportFailures === 0) {\n                                                                      matchFailed(\"\\\"~\\\"\");\n                                                                    }\n                                                                  }\n                                                                }\n                                                              }\n                                                            }\n                                                          }\n                                                        }\n                                                      }\n                                                    }\n                                                  }\n                                                }\n                                              }\n                                            }\n                                          }\n                                        }\n                                      }\n                                    }\n                                  }\n                                }\n                              }\n                            }\n                          }\n                        }\n                      }\n                    }\n                  }\n                }\n              }\n            }\n          }\n        }\n        return result0;\n      }\n\n      function parse_OptionalSP() {\n        var result0, result1;\n\n        result0 = [];\n        result1 = parse_SP();\n        while (result1 !== null) {\n          result0.push(result1);\n          result1 = parse_SP();\n        }\n        return result0;\n      }\n\n      function parse_QuotedString() {\n        var result0, result1, result2;\n        var pos0, pos1;\n\n        pos0 = pos;\n        pos1 = pos;\n        result0 = parse_DQ();\n        if (result0 !== null) {\n          result1 = parse_QuotedStringInternal();\n          if (result1 !== null) {\n            result2 = parse_DQ();\n            if (result2 !== null) {\n              result0 = [result0, result1, result2];\n            } else {\n              result0 = null;\n              pos = pos1;\n            }\n          } else {\n            result0 = null;\n            pos = pos1;\n          }\n        } else {\n          result0 = null;\n          pos = pos1;\n        }\n        if (result0 !== null) {\n          result0 = (function(offset, str) { return str })(pos0, result0[1]);\n        }\n        if (result0 === null) {\n          pos = pos0;\n        }\n        return result0;\n      }\n\n      function parse_QuotedStringInternal() {\n        var result0, result1;\n        var pos0;\n\n        pos0 = pos;\n        result0 = [];\n        result1 = parse_QDText();\n        if (result1 === null) {\n          result1 = parse_QuotedPair();\n        }\n        while (result1 !== null) {\n          result0.push(result1);\n          result1 = parse_QDText();\n          if (result1 === null) {\n            result1 = parse_QuotedPair();\n          }\n        }\n        if (result0 !== null) {\n          result0 = (function(offset, str) { return str.join('') })(pos0, result0);\n        }\n        if (result0 === null) {\n          pos = pos0;\n        }\n        return result0;\n      }\n\n      function parse_Char() {\n        var result0;\n\n        if (/^[\\0-]/.test(input.charAt(pos))) {\n          result0 = input.charAt(pos);\n          pos++;\n        } else {\n          result0 = null;\n          if (reportFailures === 0) {\n            matchFailed(\"[\\\\0-]\");\n          }\n        }\n        return result0;\n      }\n\n      function parse_UpAlpha() {\n        var result0;\n\n        if (/^[A-Z]/.test(input.charAt(pos))) {\n          result0 = input.charAt(pos);\n          pos++;\n        } else {\n          result0 = null;\n          if (reportFailures === 0) {\n            matchFailed(\"[A-Z]\");\n          }\n        }\n        return result0;\n      }\n\n      function parse_LoAlpha() {\n        var result0;\n\n        if (/^[a-z]/.test(input.charAt(pos))) {\n          result0 = input.charAt(pos);\n          pos++;\n        } else {\n          result0 = null;\n          if (reportFailures === 0) {\n            matchFailed(\"[a-z]\");\n          }\n        }\n        return result0;\n      }\n\n      function parse_Alpha() {\n        var result0;\n\n        result0 = parse_UpAlpha();\n        if (result0 === null) {\n          result0 = parse_LoAlpha();\n        }\n        return result0;\n      }\n\n      function parse_Digit() {\n        var result0;\n\n        if (/^[0-9]/.test(input.charAt(pos))) {\n          result0 = input.charAt(pos);\n          pos++;\n        } else {\n          result0 = null;\n          if (reportFailures === 0) {\n            matchFailed(\"[0-9]\");\n          }\n        }\n        return result0;\n      }\n\n      function parse_SP() {\n        var result0;\n\n        if (/^[ ]/.test(input.charAt(pos))) {\n          result0 = input.charAt(pos);\n          pos++;\n        } else {\n          result0 = null;\n          if (reportFailures === 0) {\n            matchFailed(\"[ ]\");\n          }\n        }\n        return result0;\n      }\n\n      function parse_DQ() {\n        var result0;\n\n        if (/^[\"]/.test(input.charAt(pos))) {\n          result0 = input.charAt(pos);\n          pos++;\n        } else {\n          result0 = null;\n          if (reportFailures === 0) {\n            matchFailed(\"[\\\"]\");\n          }\n        }\n        return result0;\n      }\n\n      function parse_QDText() {\n        var result0;\n\n        if (/^[^\"]/.test(input.charAt(pos))) {\n          result0 = input.charAt(pos);\n          pos++;\n        } else {\n          result0 = null;\n          if (reportFailures === 0) {\n            matchFailed(\"[^\\\"]\");\n          }\n        }\n        return result0;\n      }\n\n      function parse_QuotedPair() {\n        var result0, result1;\n        var pos0;\n\n        pos0 = pos;\n        if (/^[\\\\]/.test(input.charAt(pos))) {\n          result0 = input.charAt(pos);\n          pos++;\n        } else {\n          result0 = null;\n          if (reportFailures === 0) {\n            matchFailed(\"[\\\\\\\\]\");\n          }\n        }\n        if (result0 !== null) {\n          result1 = parse_Char();\n          if (result1 !== null) {\n            result0 = [result0, result1];\n          } else {\n            result0 = null;\n            pos = pos0;\n          }\n        } else {\n          result0 = null;\n          pos = pos0;\n        }\n        return result0;\n      }\n\n\n      function cleanupExpected(expected) {\n        expected.sort();\n\n        var lastExpected = null;\n        var cleanExpected = [];\n        for (var i = 0; i < expected.length; i++) {\n          if (expected[i] !== lastExpected) {\n            cleanExpected.push(expected[i]);\n            lastExpected = expected[i];\n          }\n        }\n        return cleanExpected;\n      }\n\n      function computeErrorPosition() {\n        /*\n         * The first idea was to use |String.split| to break the input up to the\n         * error position along newlines and derive the line and column from\n         * there. However IE's |split| implementation is so broken that it was\n         * enough to prevent it.\n         */\n\n        var line = 1;\n        var column = 1;\n        var seenCR = false;\n\n        for (var i = 0; i < Math.max(pos, rightmostFailuresPos); i++) {\n          var ch = input.charAt(i);\n          if (ch === \"\\n\") {\n            if (!seenCR) { line++; }\n            column = 1;\n            seenCR = false;\n          } else if (ch === \"\\r\" || ch === \"\\u2028\" || ch === \"\\u2029\") {\n            line++;\n            column = 1;\n            seenCR = true;\n          } else {\n            column++;\n            seenCR = false;\n          }\n        }\n\n        return { line: line, column: column };\n      }\n\n\n      var result = parseFunctions[startRule]();\n\n      /*\n       * The parser is now in one of the following three states:\n       *\n       * 1. The parser successfully parsed the whole input.\n       *\n       *    - |result !== null|\n       *    - |pos === input.length|\n       *    - |rightmostFailuresExpected| may or may not contain something\n       *\n       * 2. The parser successfully parsed only a part of the input.\n       *\n       *    - |result !== null|\n       *    - |pos < input.length|\n       *    - |rightmostFailuresExpected| may or may not contain something\n       *\n       * 3. The parser did not successfully parse any part of the input.\n       *\n       *   - |result === null|\n       *   - |pos === 0|\n       *   - |rightmostFailuresExpected| contains at least one failure\n       *\n       * All code following this comment (including called functions) must\n       * handle these states.\n       */\n      if (result === null || pos !== input.length) {\n        var offset = Math.max(pos, rightmostFailuresPos);\n        var found = offset < input.length ? input.charAt(offset) : null;\n        var errorPosition = computeErrorPosition();\n\n        throw new this.SyntaxError(\n          cleanupExpected(rightmostFailuresExpected),\n          found,\n          offset,\n          errorPosition.line,\n          errorPosition.column\n        );\n      }\n\n      return result;\n    },\n\n    /* Returns the parser source code. */\n    toSource: function() { return this._source; }\n  };\n\n  /* Thrown when a parser encounters a syntax error. */\n\n  result.SyntaxError = function(expected, found, offset, line, column) {\n    function buildMessage(expected, found) {\n      var expectedHumanized, foundHumanized;\n\n      switch (expected.length) {\n        case 0:\n          expectedHumanized = \"end of input\";\n          break;\n        case 1:\n          expectedHumanized = expected[0];\n          break;\n        default:\n          expectedHumanized = expected.slice(0, expected.length - 1).join(\", \")\n            + \" or \"\n            + expected[expected.length - 1];\n      }\n\n      foundHumanized = found ? quote(found) : \"end of input\";\n\n      return \"Expected \" + expectedHumanized + \" but \" + foundHumanized + \" found.\";\n    }\n\n    this.name = \"SyntaxError\";\n    this.expected = expected;\n    this.found = found;\n    this.message = buildMessage(expected, found);\n    this.offset = offset;\n    this.line = line;\n    this.column = column;\n  };\n\n  result.SyntaxError.prototype = Error.prototype;\n\n  return result;\n})();\n"]},"metadata":{},"sourceType":"script"}