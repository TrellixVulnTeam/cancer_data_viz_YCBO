{"ast":null,"code":"'use strict';\n\nvar invariant = require('../../vendor/invariant');\n\nvar makeService = require('../make_service');\n/**\n * @class MapboxMatching\n */\n\n\nvar MapboxMatching = makeService('MapboxMatching');\nvar API_MATCHING = '/matching/v5/{account}/{profile}/{coordinates}.json{?access_token,geometries,radiuses,steps,overview,timestamps,annotations}';\n/**\n * Snap recorded location traces to roads and paths from OpenStreetMap.\n * Consult the [Map Matching API](https://www.mapbox.com/api-documentation/#map-matching)\n * for more documentation.\n *\n * @param {Array<Array<number>>} coordinates an array of coordinate pairs\n * in [longitude, latitude] order. Up to 100 coordinates can be specified.\n * @param {Object} [options={}] additional options meant to tune\n * the request\n * @param {string} [options.profile=driving] the directions\n * profile, which determines how to prioritize different routes.\n * Options are `'driving'`, which assumes transportation via an\n * automobile and will use highways, `'walking'`, which avoids\n * streets without sidewalks, and `'cycling'`, which prefers streets\n * with bicycle lanes and lower speed limits for transportation via\n * bicycle.\n * @param {string} [options.geometries=geojson] format of the returned geometry.\n * Allowed values are: `'geojson'` (as LineString), `'polyline'` with\n * precision 5, `'polyline6'`. `'polyline'` yields more compact responses which\n * can be decoded on the client side. [GeoJSON](http://geojson.org/), the\n * default, is compatible with libraries like\n * [Mapbox GL](https://www.mapbox.com/mapbox-gl/), Leaflet and\n * [Mapbox.js](https://www.mapbox.com/mapbox.js/).\n * @param {Array<number>} [options.radiuses] an array of integers in meters\n * indicating the assumed precision of the used tracking device. There must be\n * as many radiuses as there are coordinates in the request. Values can be a\n * number between 0 and 30. Use higher numbers (20-30) for noisy traces and\n * lower numbers (1-10) for clean traces. The default value is 5.\n * @param {boolean} [options.steps=false] Whether to return steps and\n * turn-by-turn instructions. Can be `true` or `false`.\n * @param {string|boolean} [options.overview=simplified] type of returned\n * overview geometry. Can be `'full'` (the most detailed geometry available),\n * `'simplified'` (a simplified version of the full geometry), or `false`.\n * @param {Array<number>} [options.timestamps] an array of timestamps\n * corresponding to each coordinate provided in the request; must be numbers in\n * [Unix time](https://en.wikipedia.org/wiki/Unix_time)\n * (seconds since the Unix epoch). There must be as many timestamps as there\n * are coordinates in the request.\n * @param {Array<string>} [options.annotations] an array of fields that return\n * additional metadata for each coordinate along the match geometry. Can be any\n * of `'duration'`, `'distance'`, or `'nodes'`.\n * @param {Function} callback called with (err, results)\n * @returns {Promise} response\n * @example\n * var mapboxClient = new MapboxClient('ACCESSTOKEN');\n * mapboxClient.matching([\n *   [-95.4431142, 33.6875431],\n *   [-95.0431142, 33.6875431],\n *   [-95.0431142, 33.0875431],\n *   [-95.0431142, 33.0175431],\n *   [-95.4831142, 33.6875431]\n * ], {\n *  overview: 'full'\n * }, function(err, res) {\n *   // res is a match response object\n * });\n */\n\nMapboxMatching.prototype.matching = function (coordinates, options, callback) {\n  // permit the options argument to be omitted\n  if (callback === undefined && typeof options === 'function') {\n    callback = options;\n    options = {};\n  } // typecheck arguments\n\n\n  invariant(Array.isArray(coordinates), 'coordinates must be an array');\n  var params = {\n    profile: 'driving',\n    account: 'mapbox',\n    geometries: 'geojson',\n    coordinates: coordinates.join(';')\n  };\n\n  if (options.profile) {\n    invariant(typeof options.profile === 'string', 'profile option must be string');\n    params.profile = options.profile;\n  }\n\n  var allowedGeometries = ['polyline', 'geojson'];\n\n  if (options.geometries) {\n    invariant(allowedGeometries.indexOf(options.geometries) !== -1, 'geometries option must be ' + allowedGeometries);\n    params.geometries = options.geometries;\n  }\n\n  if (options.radiuses) {\n    invariant(Array.isArray(options.radiuses), 'radiuses must be an array');\n    invariant(options.radiuses.length === coordinates.length, 'There must be as many radiuses as there are coordinates in the request');\n    params.radiuses = options.radiuses.join(';');\n  }\n\n  if (typeof options.steps !== 'undefined') {\n    invariant(typeof options.steps === 'boolean', 'steps option must be boolean');\n    params.steps = options.steps;\n  }\n\n  var allowedOverview = ['full', 'simplified'];\n\n  if (typeof options.overview !== 'undefined') {\n    invariant(allowedOverview.indexOf(options.overview) !== -1 || options.overview === false, 'overview option must be ' + allowedOverview + ' or false');\n    params.overview = options.overview;\n  }\n\n  if (options.timestamps) {\n    invariant(Array.isArray(options.timestamps), 'timestamps must be an array');\n    invariant(options.timestamps.length === coordinates.length, 'There must be as many timestamps as there are coordinates in the request');\n    params.timestamps = options.timestamps.join(';');\n  }\n\n  if (options.annotations) {\n    invariant(Array.isArray(options.annotations), 'annotations must be an array');\n    params.annotations = options.annotations.join();\n  }\n\n  return this.client({\n    path: API_MATCHING,\n    params: params,\n    method: 'get',\n    callback: callback\n  });\n};\n\nmodule.exports = MapboxMatching;","map":{"version":3,"sources":["/Users/carlin/Desktop/USC_classes/DSCI_554/project-datadocs-real/demo/node_modules/mapbox/lib/services/matching.js"],"names":["invariant","require","makeService","MapboxMatching","API_MATCHING","prototype","matching","coordinates","options","callback","undefined","Array","isArray","params","profile","account","geometries","join","allowedGeometries","indexOf","radiuses","length","steps","allowedOverview","overview","timestamps","annotations","client","path","method","module","exports"],"mappings":"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","sourcesContent":["'use strict';\n\nvar invariant = require('../../vendor/invariant');\nvar makeService = require('../make_service');\n\n/**\n * @class MapboxMatching\n */\nvar MapboxMatching = makeService('MapboxMatching');\n\nvar API_MATCHING = '/matching/v5/{account}/{profile}/{coordinates}.json{?access_token,geometries,radiuses,steps,overview,timestamps,annotations}';\n\n/**\n * Snap recorded location traces to roads and paths from OpenStreetMap.\n * Consult the [Map Matching API](https://www.mapbox.com/api-documentation/#map-matching)\n * for more documentation.\n *\n * @param {Array<Array<number>>} coordinates an array of coordinate pairs\n * in [longitude, latitude] order. Up to 100 coordinates can be specified.\n * @param {Object} [options={}] additional options meant to tune\n * the request\n * @param {string} [options.profile=driving] the directions\n * profile, which determines how to prioritize different routes.\n * Options are `'driving'`, which assumes transportation via an\n * automobile and will use highways, `'walking'`, which avoids\n * streets without sidewalks, and `'cycling'`, which prefers streets\n * with bicycle lanes and lower speed limits for transportation via\n * bicycle.\n * @param {string} [options.geometries=geojson] format of the returned geometry.\n * Allowed values are: `'geojson'` (as LineString), `'polyline'` with\n * precision 5, `'polyline6'`. `'polyline'` yields more compact responses which\n * can be decoded on the client side. [GeoJSON](http://geojson.org/), the\n * default, is compatible with libraries like\n * [Mapbox GL](https://www.mapbox.com/mapbox-gl/), Leaflet and\n * [Mapbox.js](https://www.mapbox.com/mapbox.js/).\n * @param {Array<number>} [options.radiuses] an array of integers in meters\n * indicating the assumed precision of the used tracking device. There must be\n * as many radiuses as there are coordinates in the request. Values can be a\n * number between 0 and 30. Use higher numbers (20-30) for noisy traces and\n * lower numbers (1-10) for clean traces. The default value is 5.\n * @param {boolean} [options.steps=false] Whether to return steps and\n * turn-by-turn instructions. Can be `true` or `false`.\n * @param {string|boolean} [options.overview=simplified] type of returned\n * overview geometry. Can be `'full'` (the most detailed geometry available),\n * `'simplified'` (a simplified version of the full geometry), or `false`.\n * @param {Array<number>} [options.timestamps] an array of timestamps\n * corresponding to each coordinate provided in the request; must be numbers in\n * [Unix time](https://en.wikipedia.org/wiki/Unix_time)\n * (seconds since the Unix epoch). There must be as many timestamps as there\n * are coordinates in the request.\n * @param {Array<string>} [options.annotations] an array of fields that return\n * additional metadata for each coordinate along the match geometry. Can be any\n * of `'duration'`, `'distance'`, or `'nodes'`.\n * @param {Function} callback called with (err, results)\n * @returns {Promise} response\n * @example\n * var mapboxClient = new MapboxClient('ACCESSTOKEN');\n * mapboxClient.matching([\n *   [-95.4431142, 33.6875431],\n *   [-95.0431142, 33.6875431],\n *   [-95.0431142, 33.0875431],\n *   [-95.0431142, 33.0175431],\n *   [-95.4831142, 33.6875431]\n * ], {\n *  overview: 'full'\n * }, function(err, res) {\n *   // res is a match response object\n * });\n */\nMapboxMatching.prototype.matching = function(coordinates, options, callback) {\n\n  // permit the options argument to be omitted\n  if (callback === undefined && typeof options === 'function') {\n    callback = options;\n    options = {};\n  }\n\n  // typecheck arguments\n  invariant(Array.isArray(coordinates), 'coordinates must be an array');\n\n  var params = {\n    profile: 'driving',\n    account: 'mapbox',\n    geometries: 'geojson',\n    coordinates: coordinates.join(';')\n  };\n\n  if (options.profile) {\n    invariant(typeof options.profile === 'string', 'profile option must be string');\n    params.profile = options.profile;\n  }\n\n  var allowedGeometries = ['polyline', 'geojson'];\n  if (options.geometries) {\n    invariant(allowedGeometries.indexOf(options.geometries) !== -1, 'geometries option must be ' + allowedGeometries);\n    params.geometries = options.geometries;\n  }\n\n  if (options.radiuses) {\n    invariant(Array.isArray(options.radiuses), 'radiuses must be an array');\n    invariant(options.radiuses.length === coordinates.length, 'There must be as many radiuses as there are coordinates in the request');\n    params.radiuses = options.radiuses.join(';');\n  }\n\n  if (typeof options.steps !== 'undefined') {\n    invariant(typeof options.steps === 'boolean', 'steps option must be boolean');\n    params.steps = options.steps;\n  }\n\n  var allowedOverview = ['full', 'simplified'];\n  if (typeof options.overview !== 'undefined') {\n    invariant(allowedOverview.indexOf(options.overview) !== -1 || options.overview === false, 'overview option must be ' + allowedOverview + ' or false');\n    params.overview = options.overview;\n  }\n\n  if (options.timestamps) {\n    invariant(Array.isArray(options.timestamps), 'timestamps must be an array');\n    invariant(options.timestamps.length === coordinates.length, 'There must be as many timestamps as there are coordinates in the request');\n    params.timestamps = options.timestamps.join(';');\n  }\n\n  if (options.annotations) {\n    invariant(Array.isArray(options.annotations), 'annotations must be an array');\n    params.annotations = options.annotations.join();\n  }\n\n  return this.client({\n    path: API_MATCHING,\n    params: params,\n    method: 'get',\n    callback: callback\n  });\n};\n\nmodule.exports = MapboxMatching;\n"]},"metadata":{},"sourceType":"script"}