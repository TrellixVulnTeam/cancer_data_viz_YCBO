{"ast":null,"code":"import * as d3 from 'd3';\nexport function drawMap(height, width) {// function legend({\n  //     color,\n  //     title,\n  //     tickSize = 6,\n  //     width = 800,\n  //     height = 50 + tickSize,\n  //     marginTop = 18,\n  //     marginRight = 0,\n  //     marginBottom = 16 + tickSize,\n  //     marginLeft = 0,\n  //     ticks = width / 64,\n  //     tickFormat,\n  //     tickValues\n  // } = {}) {  \n  //     const svg = d3.create(\"svg\")\n  //         .attr(\"width\", width)\n  //         .attr(\"height\", height)\n  //         .attr(\"viewBox\", [0, 0, width, height])\n  //         .style(\"overflow\", \"visible\")\n  //         .style(\"display\", \"block\");\n  //     let x;\n  //     //discrete\n  //     if (color.invertExtent) {\n  //         const thresholds\n  //             = color.thresholds ? color.thresholds() // scaleQuantize\n  //                 : color.quantiles ? color.quantiles() // scaleQuantile\n  //                     : color.domain(); // scaleThreshold\n  //         const thresholdFormat\n  //             = tickFormat === undefined ? d => d\n  //                 : typeof tickFormat === \"string\" ? d3.format(tickFormat)\n  //                     : tickFormat;\n  //         x = d3.scaleLinear()\n  //             .domain([-1, color.range().length - 1])\n  //             .rangeRound([marginLeft, width - marginRight]);\n  //         svg.append(\"g\")\n  //             .selectAll(\"rect\")\n  //             .data(color.range())\n  //             .join(\"rect\")\n  //             .attr(\"x\", (d, i) => x(i - 1))\n  //             .attr(\"y\", marginTop)\n  //             .attr(\"width\", (d, i) => x(i) - x(i - 1))\n  //             .attr(\"height\", height - marginTop - marginBottom)\n  //             .attr(\"fill\", d => d);\n  //         tickValues = d3.range(thresholds.length);\n  //         tickFormat = i => thresholdFormat(thresholds[i], i);\n  //     }\n  //     svg.append(\"g\")\n  //         .attr(\"transform\", `translate(0, ${height - marginBottom})`)\n  //         .call(d3.axisBottom(x)\n  //             .ticks(ticks, typeof tickFormat === \"string\" ? tickFormat : undefined)\n  //             .tickFormat(typeof tickFormat === \"function\" ? tickFormat : undefined)\n  //             .tickSize(tickSize)\n  //             .tickValues(tickValues))\n  //         .call(g => g.selectAll(\".tick line\").attr(\"y1\", marginTop + marginBottom - height))\n  //         .call(g => g.select(\".domain\").remove())\n  //         .call(g => g.append(\"text\")\n  //             .attr(\"y\", marginTop + marginBottom - height - 6)\n  //             .attr(\"fill\", \"currentColor\")\n  //             .attr(\"text-anchor\", \"start\")\n  //             .attr(\"font-weight\", \"bold\")\n  //             .text(title));\n  //     return svg.node();\n  // }\n  // function ramp(color, n = 256) {\n  //     const canvas = DOM.canvas(n, 1);\n  //     const context = canvas.getContext(\"2d\");\n  //     for (let i = 0; i < n; ++i) {\n  //         context.fillStyle = color(i / (n - 1));\n  //         context.fillRect(i, 0, 1, 1);\n  //     }\n  //     return canvas;\n  // }\n  // /////////////////////////////////////////////////////////////\n  // var promises = [];\n  // promises.push(d3.json(\"https://raw.githubusercontent.com/Heun-Johnson/dsci554projectdata/main/coh_area_simplified_rw.json\"));\n  // promises.push(d3.json(\"https://raw.githubusercontent.com/Heun-Johnson/dsci554projectdata/main/data.json\"));\n  // Promise.all(promises).then(function (values) {  \n  //     var la_map = values[0];\n  //     var canc_data = values[1];\n  //     color = d3.scaleQuantize([0, 36], d3.schemeGreys[9])  \n  //     canc_data = Object.assign(new Map(canc_data.slice(1).map(([zip_code,zip_canc_deaths_10k]) => [zip_code, +zip_canc_deaths_10k])));  \n  //     canc_data.title = \"2019 cancer deaths per 10k\";\n  //     var svg = d3.select('#map1'),\n  //         width = +svg.attr('width'),\n  //         height = +svg.attr('height');\n  //     projection = d3.geoMercator()\n  //         .fitSize([width, height], la_map);\n  //     path = d3.geoPath()\n  //         .projection(projection);\n  //     svg.append(\"g\")\n  //         .attr(\"transform\", \"translate(1000,80)\")\n  //         .append(() => legend({ color, title: canc_data.title, width: 200 }));\n  //     svg.append('g')\n  //         .attr('class', 'zipcodes')\n  //         .selectAll(\"path\")\n  //         .data(la_map.features)\n  //         .enter()\n  //         .append('path')\n  //         .attr('d', path)\n  //         .attr(\"fill\", d => color(canc_data.get(d.properties.zcta))) \n  //         .on('mouseover', function () {            \n  //             d3.select('#chor_info1')\n  //                 .text('Zip code: ' +  this.__data__.properties.zcta +  ' - Total population: ' +  this.__data__.properties.tot_pop + ' - Median age: ' +  this.__data__.properties.age_median + ' years');               \n  //             d3.select(this).style(\"stroke\", 'blue').style(\"stroke-width\",3);\n  //             })\n  //         .on(\"mouseout\", function () {\n  //           d3.select(this).style(\"stroke\", 'black').style(\"stroke-width\",0.2);\n  //         });    \n  //     coh_hosp = [-117.97265500193778, 34.131232240226815];\n  //     marker = projection(coh_hosp);\n  //     svg.append('circle')\n  //         .attr('cx', marker[0])\n  //         .attr('cy', marker[1])\n  //         .attr('fill', 'blue')\n  //         .attr('r', 10);\n  // });\n}","map":{"version":3,"sources":["/Users/HHJ/Dropbox/Class/2021/DSCI554/Github/project-datadocs/demo/src/views/charts/MapChart.js"],"names":["d3","drawMap","height","width"],"mappings":"AAAA,OAAO,KAAKA,EAAZ,MAAoB,IAApB;AAEA,OAAO,SAASC,OAAT,CAAiBC,MAAjB,EAAyBC,KAAzB,EAA+B,CAIlsourcesContent":["import * as d3 from 'd3';\n\nexport function drawMap(height, width){\n  \n\n\n    // function legend({\n    //     color,\n    //     title,\n    //     tickSize = 6,\n    //     width = 800,\n    //     height = 50 + tickSize,\n    //     marginTop = 18,\n    //     marginRight = 0,\n    //     marginBottom = 16 + tickSize,\n    //     marginLeft = 0,\n    //     ticks = width / 64,\n    //     tickFormat,\n    //     tickValues\n    // } = {}) {  \n    \n    //     const svg = d3.create(\"svg\")\n    //         .attr(\"width\", width)\n    //         .attr(\"height\", height)\n    //         .attr(\"viewBox\", [0, 0, width, height])\n    //         .style(\"overflow\", \"visible\")\n    //         .style(\"display\", \"block\");\n    \n    //     let x;\n    \n    \n    //     //discrete\n    //     if (color.invertExtent) {\n    //         const thresholds\n    //             = color.thresholds ? color.thresholds() // scaleQuantize\n    //                 : color.quantiles ? color.quantiles() // scaleQuantile\n    //                     : color.domain(); // scaleThreshold\n    \n    //         const thresholdFormat\n    //             = tickFormat === undefined ? d => d\n    //                 : typeof tickFormat === \"string\" ? d3.format(tickFormat)\n    //                     : tickFormat;\n    \n    //         x = d3.scaleLinear()\n    //             .domain([-1, color.range().length - 1])\n    //             .rangeRound([marginLeft, width - marginRight]);\n    \n    //         svg.append(\"g\")\n    //             .selectAll(\"rect\")\n    //             .data(color.range())\n    //             .join(\"rect\")\n    //             .attr(\"x\", (d, i) => x(i - 1))\n    //             .attr(\"y\", marginTop)\n    //             .attr(\"width\", (d, i) => x(i) - x(i - 1))\n    //             .attr(\"height\", height - marginTop - marginBottom)\n    //             .attr(\"fill\", d => d);\n    \n    //         tickValues = d3.range(thresholds.length);\n    //         tickFormat = i => thresholdFormat(thresholds[i], i);\n    //     }\n    \n    //     svg.append(\"g\")\n    //         .attr(\"transform\", `translate(0, ${height - marginBottom})`)\n    //         .call(d3.axisBottom(x)\n    //             .ticks(ticks, typeof tickFormat === \"string\" ? tickFormat : undefined)\n    //             .tickFormat(typeof tickFormat === \"function\" ? tickFormat : undefined)\n    //             .tickSize(tickSize)\n    //             .tickValues(tickValues))\n    //         .call(g => g.selectAll(\".tick line\").attr(\"y1\", marginTop + marginBottom - height))\n    //         .call(g => g.select(\".domain\").remove())\n    //         .call(g => g.append(\"text\")\n    //             .attr(\"y\", marginTop + marginBottom - height - 6)\n    //             .attr(\"fill\", \"currentColor\")\n    //             .attr(\"text-anchor\", \"start\")\n    //             .attr(\"font-weight\", \"bold\")\n    //             .text(title));\n    \n    //     return svg.node();\n    // }\n    \n    // function ramp(color, n = 256) {\n    //     const canvas = DOM.canvas(n, 1);\n    //     const context = canvas.getContext(\"2d\");\n    //     for (let i = 0; i < n; ++i) {\n    //         context.fillStyle = color(i / (n - 1));\n    //         context.fillRect(i, 0, 1, 1);\n    //     }\n    //     return canvas;\n    // }\n    \n    // /////////////////////////////////////////////////////////////\n    \n    \n    // var promises = [];\n    \n    // promises.push(d3.json(\"https://raw.githubusercontent.com/Heun-Johnson/dsci554projectdata/main/coh_area_simplified_rw.json\"));\n    // promises.push(d3.json(\"https://raw.githubusercontent.com/Heun-Johnson/dsci554projectdata/main/data.json\"));\n    \n    // Promise.all(promises).then(function (values) {  \n    //     var la_map = values[0];\n    //     var canc_data = values[1];\n    \n    //     color = d3.scaleQuantize([0, 36], d3.schemeGreys[9])  \n    \n    //     canc_data = Object.assign(new Map(canc_data.slice(1).map(([zip_code,zip_canc_deaths_10k]) => [zip_code, +zip_canc_deaths_10k])));  \n    \n    //     canc_data.title = \"2019 cancer deaths per 10k\";\n    \n    //     var svg = d3.select('#map1'),\n    //         width = +svg.attr('width'),\n    //         height = +svg.attr('height');\n    \n    //     projection = d3.geoMercator()\n    //         .fitSize([width, height], la_map);\n            \n    //     path = d3.geoPath()\n    //         .projection(projection);\n    \n    //     svg.append(\"g\")\n    //         .attr(\"transform\", \"translate(1000,80)\")\n    //         .append(() => legend({ color, title: canc_data.title, width: 200 }));\n    \n    //     svg.append('g')\n    //         .attr('class', 'zipcodes')\n    //         .selectAll(\"path\")\n    //         .data(la_map.features)\n    //         .enter()\n    //         .append('path')\n    //         .attr('d', path)\n    //         .attr(\"fill\", d => color(canc_data.get(d.properties.zcta))) \n    //         .on('mouseover', function () {            \n    //             d3.select('#chor_info1')\n    //                 .text('Zip code: ' +  this.__data__.properties.zcta +  ' - Total population: ' +  this.__data__.properties.tot_pop + ' - Median age: ' +  this.__data__.properties.age_median + ' years');               \n    //             d3.select(this).style(\"stroke\", 'blue').style(\"stroke-width\",3);\n    //             })\n    //         .on(\"mouseout\", function () {\n    //           d3.select(this).style(\"stroke\", 'black').style(\"stroke-width\",0.2);\n    //         });    \n    \n    \n    //     coh_hosp = [-117.97265500193778, 34.131232240226815];\n    \n    //     marker = projection(coh_hosp);\n    \n    //     svg.append('circle')\n    //         .attr('cx', marker[0])\n    //         .attr('cy', marker[1])\n    //         .attr('fill', 'blue')\n    //         .attr('r', 10);\n    // });\n    \n    \n}\n"]},"metadata":{},"sourceType":"module"}