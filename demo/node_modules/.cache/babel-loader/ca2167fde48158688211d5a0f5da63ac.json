{"ast":null,"code":"import * as d3 from 'd3';\nexport function drawSankey(height, width) {\n  d3.sankey = function () {\n    var sankey = {},\n        nodeWidth = 24,\n        nodePadding = 8,\n        size = [1, 1],\n        nodes = [],\n        links = [];\n\n    sankey.nodeWidth = function (_) {\n      if (!arguments.length) return nodeWidth;\n      nodeWidth = +_;\n      return sankey;\n    };\n\n    sankey.nodePadding = function (_) {\n      if (!arguments.length) return nodePadding;\n      nodePadding = +_;\n      return sankey;\n    };\n\n    sankey.nodes = function (_) {\n      if (!arguments.length) return nodes;\n      nodes = _;\n      return sankey;\n    };\n\n    sankey.links = function (_) {\n      if (!arguments.length) return links;\n      links = _;\n      return sankey;\n    };\n\n    sankey.size = function (_) {\n      if (!arguments.length) return size;\n      size = _;\n      return sankey;\n    };\n\n    sankey.layout = function (iterations) {\n      computeNodeLinks();\n      computeNodeValues();\n      computeNodeBreadths();\n      computeNodeDepths(iterations);\n      computeLinkDepths();\n      return sankey;\n    };\n\n    sankey.relayout = function () {\n      computeLinkDepths();\n      return sankey;\n    };\n\n    sankey.link = function () {\n      var curvature = .5;\n\n      function link(d) {\n        var x0 = d.source.x + d.source.dx,\n            x1 = d.target.x,\n            xi = d3.interpolateNumber(x0, x1),\n            x2 = xi(curvature),\n            x3 = xi(1 - curvature),\n            y0 = d.source.y + d.sy + d.dy / 2,\n            y1 = d.target.y + d.ty + d.dy / 2;\n        return \"M\" + x0 + \",\" + y0 + \"C\" + x2 + \",\" + y0 + \" \" + x3 + \",\" + y1 + \" \" + x1 + \",\" + y1;\n      }\n\n      link.curvature = function (_) {\n        if (!arguments.length) return curvature;\n        curvature = +_;\n        return link;\n      };\n\n      return link;\n    }; // Populate the sourceLinks and targetLinks for each node.\n    // Also, if the source and target are not objects, assume they are indices.\n\n\n    function computeNodeLinks() {\n      nodes.forEach(function (node) {\n        node.sourceLinks = [];\n        node.targetLinks = [];\n      });\n      links.forEach(function (link) {\n        var source = link.source,\n            target = link.target;\n        if (typeof source === \"number\") source = link.source = nodes[link.source];\n        if (typeof target === \"number\") target = link.target = nodes[link.target];\n        source.sourceLinks.push(link);\n        target.targetLinks.push(link);\n      });\n    } // Compute the value (size) of each node by summing the associated links.\n\n\n    function computeNodeValues() {\n      nodes.forEach(function (node) {\n        node.value = Math.max(d3.sum(node.sourceLinks, value), d3.sum(node.targetLinks, value));\n      });\n    } // Iteratively assign the breadth (x-position) for each node.\n    // Nodes are assigned the maximum breadth of incoming neighbors plus one;\n    // nodes with no incoming links are assigned breadth zero, while\n    // nodes with no outgoing links are assigned the maximum breadth.\n\n\n    function computeNodeBreadths() {\n      var remainingNodes = nodes,\n          nextNodes,\n          x = 0;\n\n      while (remainingNodes.length) {\n        nextNodes = [];\n        remainingNodes.forEach(function (node) {\n          node.x = x;\n          node.dx = nodeWidth;\n          node.sourceLinks.forEach(function (link) {\n            if (nextNodes.indexOf(link.target) < 0) {\n              nextNodes.push(link.target);\n            }\n          });\n        });\n        remainingNodes = nextNodes;\n        ++x;\n      } //\n\n\n      moveSinksRight(x);\n      scaleNodeBreadths((size[0] - nodeWidth) / (x - 1));\n    }\n\n    function moveSourcesRight() {\n      nodes.forEach(function (node) {\n        if (!node.targetLinks.length) {\n          node.x = d3.min(node.sourceLinks, function (d) {\n            return d.target.x;\n          }) - 1;\n        }\n      });\n    }\n\n    function moveSinksRight(x) {\n      nodes.forEach(function (node) {\n        if (!node.sourceLinks.length) {\n          node.x = x - 1;\n        }\n      });\n    }\n\n    function scaleNodeBreadths(kx) {\n      nodes.forEach(function (node) {\n        node.x *= kx;\n      });\n    }\n\n    function computeNodeDepths(iterations) {\n      var nodesByBreadth = d3.nest().key(function (d) {\n        return d.x;\n      }).sortKeys(d3.ascending).entries(nodes).map(function (d) {\n        return d.values;\n      }); //\n\n      initializeNodeDepth();\n      resolveCollisions();\n\n      for (var alpha = 1; iterations > 0; --iterations) {\n        relaxRightToLeft(alpha *= .99);\n        resolveCollisions();\n        relaxLeftToRight(alpha);\n        resolveCollisions();\n      }\n\n      function initializeNodeDepth() {\n        var ky = d3.min(nodesByBreadth, function (nodes) {\n          return (size[1] - (nodes.length - 1) * nodePadding) / d3.sum(nodes, value);\n        });\n        nodesByBreadth.forEach(function (nodes) {\n          nodes.forEach(function (node, i) {\n            node.y = i;\n            node.dy = node.value * ky;\n          });\n        });\n        links.forEach(function (link) {\n          link.dy = link.value * ky;\n        });\n      }\n\n      function relaxLeftToRight(alpha) {\n        nodesByBreadth.forEach(function (nodes, breadth) {\n          nodes.forEach(function (node) {\n            if (node.targetLinks.length) {\n              var y = d3.sum(node.targetLinks, weightedSource) / d3.sum(node.targetLinks, value);\n              node.y += (y - center(node)) * alpha;\n            }\n          });\n        });\n\n        function weightedSource(link) {\n          return center(link.source) * link.value;\n        }\n      }\n\n      function relaxRightToLeft(alpha) {\n        nodesByBreadth.slice().reverse().forEach(function (nodes) {\n          nodes.forEach(function (node) {\n            if (node.sourceLinks.length) {\n              var y = d3.sum(node.sourceLinks, weightedTarget) / d3.sum(node.sourceLinks, value);\n              node.y += (y - center(node)) * alpha;\n            }\n          });\n        });\n\n        function weightedTarget(link) {\n          return center(link.target) * link.value;\n        }\n      }\n\n      function resolveCollisions() {\n        nodesByBreadth.forEach(function (nodes) {\n          var node,\n              dy,\n              y0 = 0,\n              n = nodes.length,\n              i; // Push any overlapping nodes down.\n\n          nodes.sort(ascendingDepth);\n\n          for (i = 0; i < n; ++i) {\n            node = nodes[i];\n            dy = y0 - node.y;\n            if (dy > 0) node.y += dy;\n            y0 = node.y + node.dy + nodePadding;\n          } // If the bottommost node goes outside the bounds, push it back up.\n\n\n          dy = y0 - nodePadding - size[1];\n\n          if (dy > 0) {\n            y0 = node.y -= dy; // Push any overlapping nodes back up.\n\n            for (i = n - 2; i >= 0; --i) {\n              node = nodes[i];\n              dy = node.y + node.dy + nodePadding - y0;\n              if (dy > 0) node.y -= dy;\n              y0 = node.y;\n            }\n          }\n        });\n      }\n\n      function ascendingDepth(a, b) {\n        return a.y - b.y;\n      }\n    }\n\n    function computeLinkDepths() {\n      nodes.forEach(function (node) {\n        node.sourceLinks.sort(ascendingTargetDepth);\n        node.targetLinks.sort(ascendingSourceDepth);\n      });\n      nodes.forEach(function (node) {\n        var sy = 0,\n            ty = 0;\n        node.sourceLinks.forEach(function (link) {\n          link.sy = sy;\n          sy += link.dy;\n        });\n        node.targetLinks.forEach(function (link) {\n          link.ty = ty;\n          ty += link.dy;\n        });\n      });\n\n      function ascendingSourceDepth(a, b) {\n        return a.source.y - b.source.y;\n      }\n\n      function ascendingTargetDepth(a, b) {\n        return a.target.y - b.target.y;\n      }\n    }\n\n    function center(node) {\n      return node.y + node.dy / 2;\n    }\n\n    function value(link) {\n      return link.value;\n    }\n\n    return sankey;\n  }; /////////////////////////////////////////////////////////////////\n\n\n  var units = \"Widgets\"; // set the dimensions and margins of the graph\n\n  var margin = {\n    top: 10,\n    right: 10,\n    bottom: 10,\n    left: 10\n  },\n      width = 900 - margin.left - margin.right,\n      height = 300 - margin.top - margin.bottom; // format variables\n\n  var formatNumber = d3.format(\",.0f\"),\n      // zero decimal places\n  format = function (d) {\n    return formatNumber(d) + \" \" + units;\n  },\n      color = d3.scaleOrdinal(d3.schemeCategory10); // color = [\"#003f5c\",\"#2f4b7c\",\"#665191\",\"#a05195\",\"#d45087\",\"#f95d6a\",\"#ff7c43\",\"#ffa600\",\"#003f5c\",\"#2f4b7c\"];\n  // append the svg object to the body of the page\n\n\n  var svg = d3.select('#sankey1').append(\"svg\").attr(\"width\", width + margin.left + margin.right).attr(\"height\", height + margin.top + margin.bottom).append(\"g\").attr(\"transform\", \"translate(\" + margin.left + \",\" + margin.top + \")\"); // Set the sankey diagram properties\n\n  var sankey = d3.sankey().nodeWidth(36).nodePadding(40).size([width, height]);\n  var path = sankey.link(); // load the data\n\n  d3.csv(\"data/sankey.csv\", function (error, data) {\n    //set up graph in same style as original example but empty\n    graph = {\n      \"nodes\": [],\n      \"links\": []\n    };\n    data.forEach(function (d) {\n      graph.nodes.push({\n        \"name\": d.source\n      });\n      graph.nodes.push({\n        \"name\": d.target\n      });\n      graph.links.push({\n        \"source\": d.source,\n        \"target\": d.target,\n        \"value\": +d.value\n      });\n    }); // return only the distinct / unique nodes\n\n    graph.nodes = d3.keys(d3.nest().key(function (d) {\n      return d.name;\n    }).object(graph.nodes)); // loop through each link replacing the text with its index from node\n\n    graph.links.forEach(function (d, i) {\n      graph.links[i].source = graph.nodes.indexOf(graph.links[i].source);\n      graph.links[i].target = graph.nodes.indexOf(graph.links[i].target);\n    }); // now loop through each nodes to make nodes an array of objects\n    // rather than an array of strings\n\n    graph.nodes.forEach(function (d, i) {\n      graph.nodes[i] = {\n        \"name\": d\n      };\n    });\n    sankey.nodes(graph.nodes).links(graph.links).layout(32); // add in the links\n\n    var link = svg.append(\"g\").selectAll(\".link\").data(graph.links).enter().append(\"path\").attr(\"class\", \"link\").attr(\"d\", path).style(\"stroke-width\", function (d) {\n      return Math.max(1, d.dy);\n    }).sort(function (a, b) {\n      return b.dy - a.dy;\n    }); // add the link titles\n\n    link.append(\"title\").text(function (d) {\n      return d.source.name + \" → \" + d.target.name + \"\\n\" + format(d.value);\n    }); // add in the nodes\n\n    var node = svg.append(\"g\").selectAll(\".node\").data(graph.nodes).enter().append(\"g\").attr(\"class\", \"node\").attr(\"transform\", function (d) {\n      return \"translate(\" + d.x + \",\" + d.y + \")\";\n    }).call(d3.drag().subject(function (d) {\n      return d;\n    }).on(\"start\", function () {\n      this.parentNode.appendChild(this);\n    }).on(\"drag\", dragmove)); // add the rectangles for the nodes\n\n    node.append(\"rect\").attr(\"height\", function (d) {\n      return d.dy;\n    }).attr(\"width\", sankey.nodeWidth()).style(\"fill\", function (d) {\n      return d.color = color(d.name.replace(/ .*/, \"\"));\n    }).style(\"stroke\", function (d) {\n      return d3.rgb(d.color).darker(2);\n    }).append(\"title\").text(function (d) {\n      return d.name + \"\\n\" + format(d.value);\n    }); // add in the title for the nodes\n\n    node.append(\"text\").attr(\"x\", -6).attr(\"y\", function (d) {\n      return d.dy / 2;\n    }).attr(\"dy\", \".35em\").attr(\"text-anchor\", \"end\").attr(\"transform\", null).text(function (d) {\n      return d.name;\n    }).filter(function (d) {\n      return d.x < width / 2;\n    }).attr(\"x\", 6 + sankey.nodeWidth()).attr(\"text-anchor\", \"start\"); // the function for moving the nodes\n\n    function dragmove(d) {\n      d3.select(this).attr(\"transform\", \"translate(\" + d.x + \",\" + (d.y = Math.max(0, Math.min(height - d.dy, d3.event.y))) + \")\");\n      sankey.relayout();\n      link.attr(\"d\", path);\n    }\n  });\n}","map":{"version":3,"sources":["/Users/HHJ/Dropbox/Class/2021/DSCI554/Github/project-datadocs/demo/src/views/charts/SankeyChart.js"],"names":["d3","drawSankey","height","width","sankey","nodeWidth","nodePadding","size","nodes","links","_","arguments","length","layout","iterations","computeNodeLinks","computeNodeValues","computeNodeBreadths","computeNodeDepths","computeLinkDepths","relayout","link","curvature","d","x0","source","x","dx","x1","target","xi","interpolateNumber","x2","x3","y0","y","sy","dy","y1","ty","forEach","node","sourceLinks","targetLinks","push","value","Math","max","sum","remainingNodes","nextNodes","indexOf","moveSinksRight","scaleNodeBreadths","moveSourcesRight","min","kx","nodesByBreadth","nest","key","sortKeys","ascending","entries","map","values","initializeNodeDepth","resolveCollisions","alpha","relaxRightToLeft","relaxLeftToRight","ky","i","breadth","weightedSource","center","slice","reverse","weightedTarget","n","sort","ascendingDepth","a","b","ascendingTargetDepth","ascendingSourceDepth","units","margin","top","right","bottom","left","formatNumber","format","color","scaleOrdinal","schemeCategory10","svg","select","append","attr","path","csv","error","data","graph","keys","name","object","selectAll","enter","style","text","call","drag","subject","on","parentNode","appendChild","dragmove","replace","rgb","darker","filter","event"],"mappings":"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","sourcesContent":["import * as d3 from 'd3';\n\nexport function drawSankey(height, width){\n\n    d3.sankey = function() {\n        var sankey = {},\n            nodeWidth = 24,\n            nodePadding = 8,\n            size = [1, 1],\n            nodes = [],\n            links = [];\n      \n        sankey.nodeWidth = function(_) {\n          if (!arguments.length) return nodeWidth;\n          nodeWidth = +_;\n          return sankey;\n        };\n      \n        sankey.nodePadding = function(_) {\n          if (!arguments.length) return nodePadding;\n          nodePadding = +_;\n          return sankey;\n        };\n      \n        sankey.nodes = function(_) {\n          if (!arguments.length) return nodes;\n          nodes = _;\n          return sankey;\n        };\n      \n        sankey.links = function(_) {\n          if (!arguments.length) return links;\n          links = _;\n          return sankey;\n        };\n      \n        sankey.size = function(_) {\n          if (!arguments.length) return size;\n          size = _;\n          return sankey;\n        };\n      \n        sankey.layout = function(iterations) {\n          computeNodeLinks();\n          computeNodeValues();\n          computeNodeBreadths();\n          computeNodeDepths(iterations);\n          computeLinkDepths();\n          return sankey;\n        };\n      \n        sankey.relayout = function() {\n          computeLinkDepths();\n          return sankey;\n        };\n      \n        sankey.link = function() {\n          var curvature = .5;\n      \n          function link(d) {\n            var x0 = d.source.x + d.source.dx,\n                x1 = d.target.x,\n                xi = d3.interpolateNumber(x0, x1),\n                x2 = xi(curvature),\n                x3 = xi(1 - curvature),\n                y0 = d.source.y + d.sy + d.dy / 2,\n                y1 = d.target.y + d.ty + d.dy / 2;\n            return \"M\" + x0 + \",\" + y0\n                 + \"C\" + x2 + \",\" + y0\n                 + \" \" + x3 + \",\" + y1\n                 + \" \" + x1 + \",\" + y1;\n          }\n      \n          link.curvature = function(_) {\n            if (!arguments.length) return curvature;\n            curvature = +_;\n            return link;\n          };\n      \n          return link;\n        };\n      \n        // Populate the sourceLinks and targetLinks for each node.\n        // Also, if the source and target are not objects, assume they are indices.\n        function computeNodeLinks() {\n          nodes.forEach(function(node) {\n            node.sourceLinks = [];\n            node.targetLinks = [];\n          });\n          links.forEach(function(link) {\n            var source = link.source,\n                target = link.target;\n            if (typeof source === \"number\") source = link.source = nodes[link.source];\n            if (typeof target === \"number\") target = link.target = nodes[link.target];\n            source.sourceLinks.push(link);\n            target.targetLinks.push(link);\n          });\n        }\n      \n        // Compute the value (size) of each node by summing the associated links.\n        function computeNodeValues() {\n          nodes.forEach(function(node) {\n            node.value = Math.max(\n              d3.sum(node.sourceLinks, value),\n              d3.sum(node.targetLinks, value)\n            );\n          });\n        }\n      \n        // Iteratively assign the breadth (x-position) for each node.\n        // Nodes are assigned the maximum breadth of incoming neighbors plus one;\n        // nodes with no incoming links are assigned breadth zero, while\n        // nodes with no outgoing links are assigned the maximum breadth.\n        function computeNodeBreadths() {\n          var remainingNodes = nodes,\n              nextNodes,\n              x = 0;\n      \n          while (remainingNodes.length) {\n            nextNodes = [];\n            remainingNodes.forEach(function(node) {\n              node.x = x;\n              node.dx = nodeWidth;\n              node.sourceLinks.forEach(function(link) {\n                if (nextNodes.indexOf(link.target) < 0) {\n                  nextNodes.push(link.target);\n                }\n              });\n            });\n            remainingNodes = nextNodes;\n            ++x;\n          }\n      \n          //\n          moveSinksRight(x);\n          scaleNodeBreadths((size[0] - nodeWidth) / (x - 1));\n        }\n      \n        function moveSourcesRight() {\n          nodes.forEach(function(node) {\n            if (!node.targetLinks.length) {\n              node.x = d3.min(node.sourceLinks, function(d) { return d.target.x; }) - 1;\n            }\n          });\n        }\n      \n        function moveSinksRight(x) {\n          nodes.forEach(function(node) {\n            if (!node.sourceLinks.length) {\n              node.x = x - 1;\n            }\n          });\n        }\n      \n        function scaleNodeBreadths(kx) {\n          nodes.forEach(function(node) {\n            node.x *= kx;\n          });\n        }\n      \n        function computeNodeDepths(iterations) {\n          var nodesByBreadth = d3.nest()\n              .key(function(d) { return d.x; })\n              .sortKeys(d3.ascending)\n              .entries(nodes)\n              .map(function(d) { return d.values; });\n      \n          //\n          initializeNodeDepth();\n          resolveCollisions();\n          for (var alpha = 1; iterations > 0; --iterations) {\n            relaxRightToLeft(alpha *= .99);\n            resolveCollisions();\n            relaxLeftToRight(alpha);\n            resolveCollisions();\n          }\n      \n          function initializeNodeDepth() {\n            var ky = d3.min(nodesByBreadth, function(nodes) {\n              return (size[1] - (nodes.length - 1) * nodePadding) / d3.sum(nodes, value);\n            });\n      \n            nodesByBreadth.forEach(function(nodes) {\n              nodes.forEach(function(node, i) {\n                node.y = i;\n                node.dy = node.value * ky;\n              });\n            });\n      \n            links.forEach(function(link) {\n              link.dy = link.value * ky;\n            });\n          }\n      \n          function relaxLeftToRight(alpha) {\n            nodesByBreadth.forEach(function(nodes, breadth) {\n              nodes.forEach(function(node) {\n                if (node.targetLinks.length) {\n                  var y = d3.sum(node.targetLinks, weightedSource) / d3.sum(node.targetLinks, value);\n                  node.y += (y - center(node)) * alpha;\n                }\n              });\n            });\n      \n            function weightedSource(link) {\n              return center(link.source) * link.value;\n            }\n          }\n      \n          function relaxRightToLeft(alpha) {\n            nodesByBreadth.slice().reverse().forEach(function(nodes) {\n              nodes.forEach(function(node) {\n                if (node.sourceLinks.length) {\n                  var y = d3.sum(node.sourceLinks, weightedTarget) / d3.sum(node.sourceLinks, value);\n                  node.y += (y - center(node)) * alpha;\n                }\n              });\n            });\n      \n            function weightedTarget(link) {\n              return center(link.target) * link.value;\n            }\n          }\n      \n          function resolveCollisions() {\n            nodesByBreadth.forEach(function(nodes) {\n              var node,\n                  dy,\n                  y0 = 0,\n                  n = nodes.length,\n                  i;\n      \n              // Push any overlapping nodes down.\n              nodes.sort(ascendingDepth);\n              for (i = 0; i < n; ++i) {\n                node = nodes[i];\n                dy = y0 - node.y;\n                if (dy > 0) node.y += dy;\n                y0 = node.y + node.dy + nodePadding;\n              }\n      \n              // If the bottommost node goes outside the bounds, push it back up.\n              dy = y0 - nodePadding - size[1];\n              if (dy > 0) {\n                y0 = node.y -= dy;\n      \n                // Push any overlapping nodes back up.\n                for (i = n - 2; i >= 0; --i) {\n                  node = nodes[i];\n                  dy = node.y + node.dy + nodePadding - y0;\n                  if (dy > 0) node.y -= dy;\n                  y0 = node.y;\n                }\n              }\n            });\n          }\n      \n          function ascendingDepth(a, b) {\n            return a.y - b.y;\n          }\n        }\n      \n        function computeLinkDepths() {\n          nodes.forEach(function(node) {\n            node.sourceLinks.sort(ascendingTargetDepth);\n            node.targetLinks.sort(ascendingSourceDepth);\n          });\n          nodes.forEach(function(node) {\n            var sy = 0, ty = 0;\n            node.sourceLinks.forEach(function(link) {\n              link.sy = sy;\n              sy += link.dy;\n            });\n            node.targetLinks.forEach(function(link) {\n              link.ty = ty;\n              ty += link.dy;\n            });\n          });\n      \n          function ascendingSourceDepth(a, b) {\n            return a.source.y - b.source.y;\n          }\n      \n          function ascendingTargetDepth(a, b) {\n            return a.target.y - b.target.y;\n          }\n        }\n      \n        function center(node) {\n          return node.y + node.dy / 2;\n        }\n      \n        function value(link) {\n          return link.value;\n        }\n      \n        return sankey;\n      };\n    \n    /////////////////////////////////////////////////////////////////\n    \n    \n    var units = \"Widgets\";\n    \n    // set the dimensions and margins of the graph\n    var margin = {top: 10, right: 10, bottom: 10, left: 10},\n        width = 900 - margin.left - margin.right,\n        height = 300 - margin.top - margin.bottom;\n    \n    // format variables\n    var formatNumber = d3.format(\",.0f\"),    // zero decimal places\n        format = function(d) { return formatNumber(d) + \" \" + units; },\n        color = d3.scaleOrdinal(d3.schemeCategory10);\n        // color = [\"#003f5c\",\"#2f4b7c\",\"#665191\",\"#a05195\",\"#d45087\",\"#f95d6a\",\"#ff7c43\",\"#ffa600\",\"#003f5c\",\"#2f4b7c\"];\n    \n    \n    // append the svg object to the body of the page\n    var svg = d3.select('#sankey1').append(\"svg\")\n        .attr(\"width\", width + margin.left + margin.right)\n        .attr(\"height\", height + margin.top + margin.bottom)\n      .append(\"g\")\n        .attr(\"transform\", \n              \"translate(\" + margin.left + \",\" + margin.top + \")\");\n    \n    // Set the sankey diagram properties\n    var sankey = d3.sankey()\n        .nodeWidth(36)\n        .nodePadding(40)\n        .size([width, height]);\n    \n    var path = sankey.link();\n    \n    // load the data\n    d3.csv(\"data/sankey.csv\", function(error, data) {\n     \n      //set up graph in same style as original example but empty\n      graph = {\"nodes\" : [], \"links\" : []};\n    \n      data.forEach(function (d) {\n        graph.nodes.push({ \"name\": d.source });\n        graph.nodes.push({ \"name\": d.target });\n        graph.links.push({ \"source\": d.source,\n                           \"target\": d.target,\n                           \"value\": +d.value });\n       });\n    \n      // return only the distinct / unique nodes\n      graph.nodes = d3.keys(d3.nest()\n        .key(function (d) { return d.name; })\n        .object(graph.nodes));\n    \n      // loop through each link replacing the text with its index from node\n      graph.links.forEach(function (d, i) {\n        graph.links[i].source = graph.nodes.indexOf(graph.links[i].source);\n        graph.links[i].target = graph.nodes.indexOf(graph.links[i].target);\n      });\n    \n      // now loop through each nodes to make nodes an array of objects\n      // rather than an array of strings\n      graph.nodes.forEach(function (d, i) {\n        graph.nodes[i] = { \"name\": d };\n      });\n    \n      sankey\n          .nodes(graph.nodes)\n          .links(graph.links)\n          .layout(32);\n    \n      // add in the links\n      var link = svg.append(\"g\").selectAll(\".link\")\n          .data(graph.links)\n        .enter().append(\"path\")\n          .attr(\"class\", \"link\")\n          .attr(\"d\", path)\n          .style(\"stroke-width\", function(d) { return Math.max(1, d.dy); })\n          .sort(function(a, b) { return b.dy - a.dy; });\n    \n      // add the link titles\n      link.append(\"title\")\n            .text(function(d) {\n                return d.source.name + \" → \" + \n                    d.target.name + \"\\n\" + format(d.value); });\n    \n      // add in the nodes\n      var node = svg.append(\"g\").selectAll(\".node\")\n          .data(graph.nodes)\n        .enter().append(\"g\")\n          .attr(\"class\", \"node\")\n          .attr(\"transform\", function(d) { \n              return \"translate(\" + d.x + \",\" + d.y + \")\"; })\n          .call(d3.drag()\n            .subject(function(d) {\n              return d;\n            })\n            .on(\"start\", function() {\n              this.parentNode.appendChild(this);\n            })\n            .on(\"drag\", dragmove));\n    \n      // add the rectangles for the nodes\n      node.append(\"rect\")\n          .attr(\"height\", function(d) { return d.dy; })\n          .attr(\"width\", sankey.nodeWidth())\n          .style(\"fill\", function(d) { \n              return d.color = color(d.name.replace(/ .*/, \"\")); })\n          .style(\"stroke\", function(d) { \n              return d3.rgb(d.color).darker(2); })\n        .append(\"title\")\n          .text(function(d) { \n              return d.name + \"\\n\" + format(d.value); });\n    \n      // add in the title for the nodes\n      node.append(\"text\")\n          .attr(\"x\", -6)\n          .attr(\"y\", function(d) { return d.dy / 2; })\n          .attr(\"dy\", \".35em\")\n          .attr(\"text-anchor\", \"end\")\n          .attr(\"transform\", null)\n          .text(function(d) { return d.name; })\n        .filter(function(d) { return d.x < width / 2; })\n          .attr(\"x\", 6 + sankey.nodeWidth())\n          .attr(\"text-anchor\", \"start\");\n    \n      // the function for moving the nodes\n      function dragmove(d) {\n        d3.select(this)\n          .attr(\"transform\", \n                \"translate(\" \n                   + d.x + \",\" \n                   + (d.y = Math.max(\n                      0, Math.min(height - d.dy, d3.event.y))\n                     ) + \")\");\n        sankey.relayout();\n        link.attr(\"d\", path);\n      }\n    });\n}\n"]},"metadata":{},"sourceType":"module"}