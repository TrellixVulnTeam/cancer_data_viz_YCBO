{"ast":null,"code":"'use strict';\n\nvar makeClient = require('./make_service');\n\nvar xtend = require('../vendor/xtend').extendMutable;\n\nvar getUser = require('./get_user');\n\nvar MapboxGeocoding = require('./services/geocoding');\n\nvar MapboxSurface = require('./services/surface');\n\nvar MapboxDirections = require('./services/directions');\n\nvar MapboxUploads = require('./services/uploads');\n\nvar MapboxMatching = require('./services/matching');\n\nvar MapboxDatasets = require('./services/datasets');\n\nvar MapboxMatrix = require('./services/matrix');\n\nvar MapboxTilestats = require('./services/tilestats');\n\nvar MapboxStyles = require('./services/styles');\n\nvar MapboxStatic = require('./services/static');\n\nvar MapboxTilesets = require('./services/tilesets');\n\nvar MapboxTokens = require('./services/tokens');\n/**\n * The JavaScript API to Mapbox services\n *\n * @class\n * @throws {Error} if accessToken is not provided\n * @param {string} accessToken a private or public access token\n * @param {Object} options additional options provided for configuration\n * @param {string} [options.endpoint=https://api.mapbox.com] location\n * of the Mapbox API pointed-to. This can be customized to point to a\n * Mapbox Atlas Server instance, or a different service, a mock,\n * or a staging endpoint. Usually you don't need to customize this.\n * @param {string} [options.account] account id to use for api\n * requests. If not is specified, the account defaults to the owner\n * of the provided accessToken.\n * @example\n * var client = new MapboxClient('ACCESSTOKEN');\n */\n\n\nvar MapboxClient = makeClient('MapboxClient'); // Combine all client APIs into one API for when people require()\n// the main mapbox-sdk-js library.\n\nxtend(MapboxClient.prototype, MapboxGeocoding.prototype, MapboxSurface.prototype, MapboxDirections.prototype, MapboxMatrix.prototype, MapboxMatching.prototype, MapboxDatasets.prototype, MapboxUploads.prototype, MapboxTilestats.prototype, MapboxStyles.prototype, MapboxStatic.prototype, MapboxTilesets.prototype, MapboxTokens.prototype);\nMapboxClient.getUser = getUser;\nmodule.exports = MapboxClient;","map":{"version":3,"sources":["/Users/HHJ/Dropbox/Class/2021/DSCI554/Github/project-datadocs/demo/node_modules/mapbox/lib/mapbox.js"],"names":["makeClient","require","xtend","extendMutable","getUser","MapboxGeocoding","MapboxSurface","MapboxDirections","MapboxUploads","MapboxMatching","MapboxDatasets","MapboxMatrix","MapboxTilestats","MapboxStyles","MapboxStatic","MapboxTilesets","MapboxTokens","MapboxClient","prototype","module","exports"],"mappings":"AAAA;;AAEA,IAAIA,UAAU,GAAGC,OAAO,CAAC,gBAAD,CAAxB;;AACA,IAAIC,KAAK,GAAGD,OAAO,CAAC,iBAAD,CAAP,CAA2BE,aAAvC;;AACA,IAAIC,OAAO,GAAGH,OAAO,CAAC,YAAD,CAArB;;AACA,IAAII,eAAe,GAAGJ,OAAO,CAAC,sBAAD,CAA7B;;AACA,IAAIK,aAAa,GAAGL,OAAO,CAAC,oBAAD,CAA3B;;AACA,IAAIM,gBAAgB,GAAGN,OAAO,CAAC,uBAAD,CAA9B;;AACA,IAAIO,aAAa,GAAGP,OAAO,CAAC,oBAAD,CAA3B;;AACA,IAAIQ,cAAc,GAAGR,OAAO,CAAC,qBAAD,CAA5B;;AACA,IAAIS,cAAc,GAAGT,OAAO,CAAC,qBAAD,CAA5B;;AACA,IAAIU,YAAY,GAAGV,OAAO,CAAC,mBAAD,CAA1B;;AACA,IAAIW,eAAe,GAAGX,OAAO,CAAC,sBAAD,CAA7B;;AACA,IAAIY,YAAY,GAAGZ,OAAO,CAAC,mBAAD,CAA1B;;AACA,IAAIa,YAAY,GAAGb,OAAO,CAAC,mBAAD,CAA1B;;AACA,IAAIc,cAAc,GAAGd,OAAO,CAAC,qBAAD,CAA5B;;AACA,IAAIe,YAAY,GAAGf,OAAO,CAAC,mBAAD,CAA1B;AAGA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;AACA,IAAIgB,YAAY,GAAGjB,UAAU,CAAC,cAAD,CAA7B,C,CAEA;AACA;;AACAE,KAAK,CACHe,YAAY,CAACC,SADV,EAEHb,eAAe,CAACa,SAFb,EAGHZ,aAAa,CAACY,SAHX,EAIHX,gBAAgB,CAACW,SAJd,EAKHP,YAAY,CAACO,SALV,EAMHT,cAAc,CAACS,SANZ,EAOHR,cAAc,CAACQ,SAPZ,EAQHV,aAAa,CAACU,SARX,EASHN,eAAe,CAACM,SATb,EAUHL,YAAY,CAACK,SAVV,EAWHJ,YAAY,CAACI,SAXV,EAYHH,cAAc,CAACG,SAZZ,EAaHF,YAAY,CAACE,SAbV,CAAL;AAgBAD,YAAY,CAACb,OAAb,GAAuBA,OAAvB;AAEAe,MAAM,CAACC,OAAP,GAAiBH,YAAjB","sourcesContent":["'use strict';\n\nvar makeClient = require('./make_service');\nvar xtend = require('../vendor/xtend').extendMutable;\nvar getUser = require('./get_user');\nvar MapboxGeocoding = require('./services/geocoding');\nvar MapboxSurface = require('./services/surface');\nvar MapboxDirections = require('./services/directions');\nvar MapboxUploads = require('./services/uploads');\nvar MapboxMatching = require('./services/matching');\nvar MapboxDatasets = require('./services/datasets');\nvar MapboxMatrix = require('./services/matrix');\nvar MapboxTilestats = require('./services/tilestats');\nvar MapboxStyles = require('./services/styles');\nvar MapboxStatic = require('./services/static');\nvar MapboxTilesets = require('./services/tilesets');\nvar MapboxTokens = require('./services/tokens');\n\n\n/**\n * The JavaScript API to Mapbox services\n *\n * @class\n * @throws {Error} if accessToken is not provided\n * @param {string} accessToken a private or public access token\n * @param {Object} options additional options provided for configuration\n * @param {string} [options.endpoint=https://api.mapbox.com] location\n * of the Mapbox API pointed-to. This can be customized to point to a\n * Mapbox Atlas Server instance, or a different service, a mock,\n * or a staging endpoint. Usually you don't need to customize this.\n * @param {string} [options.account] account id to use for api\n * requests. If not is specified, the account defaults to the owner\n * of the provided accessToken.\n * @example\n * var client = new MapboxClient('ACCESSTOKEN');\n */\nvar MapboxClient = makeClient('MapboxClient');\n\n// Combine all client APIs into one API for when people require()\n// the main mapbox-sdk-js library.\nxtend(\n  MapboxClient.prototype,\n  MapboxGeocoding.prototype,\n  MapboxSurface.prototype,\n  MapboxDirections.prototype,\n  MapboxMatrix.prototype,\n  MapboxMatching.prototype,\n  MapboxDatasets.prototype,\n  MapboxUploads.prototype,\n  MapboxTilestats.prototype,\n  MapboxStyles.prototype,\n  MapboxStatic.prototype,\n  MapboxTilesets.prototype,\n  MapboxTokens.prototype\n);\n\nMapboxClient.getUser = getUser;\n\nmodule.exports = MapboxClient;\n"]},"metadata":{},"sourceType":"script"}