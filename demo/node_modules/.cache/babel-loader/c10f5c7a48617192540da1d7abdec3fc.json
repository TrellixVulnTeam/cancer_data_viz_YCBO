{"ast":null,"code":"'use strict';\n\nvar invariant = require('../../vendor/invariant');\n\nvar formatPoints = require('../format_points');\n\nvar makeService = require('../make_service');\n/**\n * @class MapboxSurface\n */\n\n\nvar MapboxSurface = makeService('MapboxSurface');\nvar API_SURFACE = '/v4/surface/{mapid}.json{?access_token,layer,fields,points,geojson,interpolate,encoded_polyline}';\n/**\n * Given a list of locations, retrieve vector tiles, find the nearest\n * spatial features, extract their data values, and then absolute values and\n * optionally interpolated values in-between, if the interpolate option is specified.\n *\n * Consult the [Surface API](https://www.mapbox.com/developers/api/surface/)\n * for more documentation.\n *\n * @param {string} mapid a Mapbox mapid containing vector tiles against\n * which we'll query\n * @param {string} layer layer within the given `mapid` for which to pull\n * data\n * @param {Array<string>} fields layer within the given `mapid` for which to pull\n * data\n * @param {Array<Object>|string} path either an encoded polyline,\n * provided as a string, or an array of objects with longitude and latitude\n * properties, similar to waypoints.\n * @param {Object} [options={}] additional options meant to tune\n * the request\n * @param {string} [options.geojson=false] whether to return data as a\n * GeoJSON point\n * @param {string} [options.zoom=maximum] zoom level at which features\n * are queried\n * @param {boolean} [options.interpolate=true] Whether to interpolate\n * between matches in the feature collection.\n * @param {Function} callback called with (err, results)\n * @returns {Promise} response\n * @example\n * var mapboxClient = new MapboxClient('ACCESSTOKEN');\n */\n\nMapboxSurface.prototype.surface = function (mapid, layer, fields, path, options, callback) {\n  // permit the options argument to be omitted\n  if (callback === undefined && typeof options === 'function') {\n    callback = options;\n    options = {};\n  } // typecheck arguments\n\n\n  invariant(typeof mapid === 'string', 'mapid must be a string');\n  invariant(typeof layer === 'string', 'layer must be a string');\n  invariant(Array.isArray(fields), 'fields must be an array of strings');\n  invariant(Array.isArray(path) || typeof path === 'string', 'path must be an array of objects or a string');\n  invariant(typeof options === 'object', 'options must be an object');\n  var interpolate = true,\n      geojson = false;\n\n  if (options.interpolate !== undefined) {\n    invariant(typeof options.interpolate === 'boolean', 'interpolate must be a boolean');\n    interpolate = options.interpolate;\n  }\n\n  if (options.geojson !== undefined) {\n    invariant(typeof options.geojson === 'boolean', 'geojson option must be boolean');\n    geojson = options.geojson;\n  }\n\n  var surfaceOptions = {\n    geojson: geojson,\n    layer: layer,\n    mapid: mapid,\n    fields: fields.join(','),\n    interpolate: interpolate\n  };\n\n  if (Array.isArray(path)) {\n    surfaceOptions.points = formatPoints(path);\n  } else {\n    surfaceOptions.encoded_polyline = path;\n  }\n\n  if (options.zoom !== undefined) {\n    invariant(typeof options.zoom === 'number', 'zoom must be a number');\n    surfaceOptions.z = options.zoom;\n  }\n\n  return this.client({\n    path: API_SURFACE,\n    params: surfaceOptions,\n    callback: callback\n  });\n};\n\nmodule.exports = MapboxSurface;","map":{"version":3,"sources":["/Users/carlin/Desktop/USC_classes/DSCI_554/project-datadocs-real/demo/node_modules/mapbox/lib/services/surface.js"],"names":["invariant","require","formatPoints","makeService","MapboxSurface","API_SURFACE","prototype","surface","mapid","layer","fields","path","options","callback","undefined","Array","isArray","interpolate","geojson","surfaceOptions","join","points","encoded_polyline","zoom","z","client","params","module","exports"],"mappings":"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","sourcesContent":["'use strict';\n\nvar invariant = require('../../vendor/invariant');\nvar formatPoints = require('../format_points');\nvar makeService = require('../make_service');\n\n/**\n * @class MapboxSurface\n */\nvar MapboxSurface = makeService('MapboxSurface');\n\nvar API_SURFACE = '/v4/surface/{mapid}.json{?access_token,layer,fields,points,geojson,interpolate,encoded_polyline}';\n\n/**\n * Given a list of locations, retrieve vector tiles, find the nearest\n * spatial features, extract their data values, and then absolute values and\n * optionally interpolated values in-between, if the interpolate option is specified.\n *\n * Consult the [Surface API](https://www.mapbox.com/developers/api/surface/)\n * for more documentation.\n *\n * @param {string} mapid a Mapbox mapid containing vector tiles against\n * which we'll query\n * @param {string} layer layer within the given `mapid` for which to pull\n * data\n * @param {Array<string>} fields layer within the given `mapid` for which to pull\n * data\n * @param {Array<Object>|string} path either an encoded polyline,\n * provided as a string, or an array of objects with longitude and latitude\n * properties, similar to waypoints.\n * @param {Object} [options={}] additional options meant to tune\n * the request\n * @param {string} [options.geojson=false] whether to return data as a\n * GeoJSON point\n * @param {string} [options.zoom=maximum] zoom level at which features\n * are queried\n * @param {boolean} [options.interpolate=true] Whether to interpolate\n * between matches in the feature collection.\n * @param {Function} callback called with (err, results)\n * @returns {Promise} response\n * @example\n * var mapboxClient = new MapboxClient('ACCESSTOKEN');\n */\nMapboxSurface.prototype.surface = function(mapid, layer, fields, path, options, callback) {\n\n  // permit the options argument to be omitted\n  if (callback === undefined && typeof options === 'function') {\n    callback = options;\n    options = {};\n  }\n\n  // typecheck arguments\n  invariant(typeof mapid === 'string', 'mapid must be a string');\n  invariant(typeof layer === 'string', 'layer must be a string');\n  invariant(Array.isArray(fields), 'fields must be an array of strings');\n  invariant(Array.isArray(path) || typeof path === 'string', 'path must be an array of objects or a string');\n  invariant(typeof options === 'object', 'options must be an object');\n\n  var interpolate = true,\n    geojson = false;\n\n  if (options.interpolate !== undefined) {\n    invariant(typeof options.interpolate === 'boolean', 'interpolate must be a boolean');\n    interpolate = options.interpolate;\n  }\n\n  if (options.geojson !== undefined) {\n    invariant(typeof options.geojson === 'boolean', 'geojson option must be boolean');\n    geojson = options.geojson;\n  }\n\n  var surfaceOptions = {\n    geojson: geojson,\n    layer: layer,\n    mapid: mapid,\n    fields: fields.join(','),\n    interpolate: interpolate\n  };\n\n  if (Array.isArray(path)) {\n    surfaceOptions.points = formatPoints(path);\n  } else {\n    surfaceOptions.encoded_polyline = path;\n  }\n\n  if (options.zoom !== undefined) {\n    invariant(typeof options.zoom === 'number', 'zoom must be a number');\n    surfaceOptions.z = options.zoom;\n  }\n\n  return this.client({\n    path: API_SURFACE,\n    params: surfaceOptions,\n    callback: callback\n  });\n};\n\nmodule.exports = MapboxSurface;\n"]},"metadata":{},"sourceType":"script"}