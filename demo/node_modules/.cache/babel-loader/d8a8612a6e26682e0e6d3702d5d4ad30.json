{"ast":null,"code":"'use strict';\n\nvar invariant = require('../../vendor/invariant');\n\nvar xtend = require('../../vendor/xtend').extend;\n\nvar uriTemplate = require('rest/util/uriTemplate');\n\nvar encodeOverlay = require('../encode_overlay');\n\nvar invariantLocation = require('../invariant_location');\n\nvar makeService = require('../make_service');\n/**\n * @class MapboxStatic\n */\n\n\nvar MapboxStatic = makeService('MapboxStatic');\nvar API_STATIC = '/styles/v1/{username}/{styleid}/static{+overlay}/{+xyzbp}/{width}x{height}{+retina}{?access_token,attribution,logo,before_layer}';\nvar API_STATIC_CLASSIC = '/v4/{mapid}{+overlay}/{+xyz}/{width}x{height}{+retina}{.format}{?access_token}';\n/**\n * Determine a URL for a static map image, using the [Mapbox Static Map API](https://www.mapbox.com/api-documentation/#static).\n *\n * @param {string} username Mapbox username\n * @param {string} styleid Mapbox Style ID\n * @param {number} width width of the image\n * @param {number} height height of the image\n *\n * @param {Object|string} position either an object with longitude and latitude members, or the string 'auto'\n * @param {number} position.longitude east, west bearing\n * @param {number} position.latitude north, south bearing\n * @param {number} position.zoom map zoom level\n * @param {number} position.bearing map bearing in degrees between 0 and 360\n * @param {number} position.pitch map pitch in degrees between 0 (straight down, no pitch) and 60 (maximum pitch)\n *\n * @param {Object} options all map options\n * @param {boolean} [options.retina=false] whether to double image pixel density\n *\n * @param {Array<Object>} [options.markers=[]] an array of simple marker objects as an overlay\n * @param {Object} [options.geojson={}] geojson data for the overlay\n * @param {Object} [options.path={}] a path and\n * @param {Array<Object>} options.path.geojson data for the path as an array of longitude, latitude objects\n * @param {Array<Object>} options.path.style optional style definitions for a path\n * @param {boolean} options.attribution controlling whether there is attribution on the image; defaults to true\n * @param {boolean} options.logo controlling whether there is a Mapbox logo on the image; defaults to true\n * @param {string} options.before_layer value for controlling where the overlay is inserted in the style\n *\n * @returns {string} static map url\n * @example\n * var mapboxClient = new MapboxClient('ACCESSTOKEN');\n * var url = mapboxClient.getStaticURL('mapbox', 'streets-v10', 600, 400, {\n *   longitude: 151.22,\n *   latitude: -33.87,\n *   zoom: 11\n * }, {\n *   markers: [{ longitude: 151.22, latitude: -33.87 }],\n *   before_layer: 'housenum-label'\n * });\n * // url = https://api.mapbox.com/styles/v1/mapbox/streets-v10/static/pin-l-circle(151.22,-33.87)/151.22,-33.87,11/600x400?access_token=ACCESS_TOKEN&before_layer=housenum-label\n */\n\nMapboxStatic.prototype.getStaticURL = function (username, styleid, width, height, position, options) {\n  invariant(typeof username === 'string', 'username option required and must be a string');\n  invariant(typeof styleid === 'string', 'styleid option required and must be a string');\n  invariant(typeof width === 'number', 'width option required and must be a number');\n  invariant(typeof height === 'number', 'height option required and must be a number');\n  var defaults = {\n    retina: ''\n  };\n  var xyzbp;\n\n  if (position === 'auto') {\n    xyzbp = 'auto';\n  } else {\n    invariantLocation(position);\n    xyzbp = position.longitude + ',' + position.latitude + ',' + position.zoom;\n\n    if ('pitch' in position) {\n      xyzbp += ',' + (position.bearing || 0) + ',' + position.pitch;\n    } else if ('bearing' in position) {\n      xyzbp += ',' + position.bearing;\n    }\n  }\n\n  var userOptions = {};\n\n  if (options) {\n    invariant(typeof options === 'object', 'options must be an object');\n\n    if (options.format) {\n      invariant(typeof options.format === 'string', 'format must be a string');\n      userOptions.format = options.format;\n    }\n\n    if (options.retina) {\n      invariant(typeof options.retina === 'boolean', 'retina must be a boolean');\n      userOptions.retina = options.retina;\n    }\n\n    if (options.markers) {\n      userOptions.overlay = '/' + encodeOverlay.encodeMarkers(options.markers);\n    } else if (options.geojson) {\n      userOptions.overlay = '/' + encodeOverlay.encodeGeoJSON(options.geojson);\n    } else if (options.path) {\n      userOptions.overlay = '/' + encodeOverlay.encodePath(options.path);\n    }\n\n    if ('attribution' in options) {\n      invariant(typeof options.attribution === 'boolean', 'attribution must be a boolean');\n      userOptions.attribution = options.attribution;\n    }\n\n    if ('logo' in options) {\n      invariant(typeof options.logo === 'boolean', 'logo must be a boolean');\n      userOptions.logo = options.logo;\n    }\n\n    if (options.before_layer) {\n      invariant(typeof options.before_layer === 'string', 'before_layer must be a string');\n      userOptions.before_layer = options.before_layer;\n    }\n  }\n\n  var params = xtend(defaults, userOptions, {\n    username: username,\n    styleid: styleid,\n    width: width,\n    xyzbp: xyzbp,\n    height: height,\n    access_token: this.accessToken\n  });\n\n  if (params.retina === true) {\n    params.retina = '@2x';\n  }\n\n  return this.endpoint + uriTemplate.expand(API_STATIC, params);\n};\n/**\n * Determine a URL for a static classic map image, using the [Mapbox Static (Classic) Map API](https://www.mapbox.com/api-documentation/pages/static_classic.html).\n *\n * @param {string} mapid a Mapbox map id in username.id form\n * @param {number} width width of the image\n * @param {number} height height of the image\n *\n * @param {Object|string} position either an object with longitude and latitude members, or the string 'auto'\n * @param {number} position.longitude east, west bearing\n * @param {number} position.latitude north, south bearing\n * @param {number} position.zoom zoom level\n *\n * @param {Object} options all map options\n * @param {string} [options.format=png] image format. can be jpg70, jpg80, jpg90, png32, png64, png128, png256\n * @param {boolean} [options.retina=false] whether to double image pixel density\n *\n * @param {Array<Object>} [options.markers=[]] an array of simple marker objects as an overlay\n * @param {Object} [options.geojson={}] geojson data for the overlay\n * @param {Object} [options.path={}] a path and\n * @param {Array<Object>} options.path.geojson data for the path as an array of longitude, latitude objects\n * @param {Array<Object>} options.path.style optional style definitions for a path\n *\n * @returns {string} static classic map url\n * @example\n * var mapboxClient = new MapboxClient('ACCESSTOKEN');\n */\n\n\nMapboxStatic.prototype.getStaticClassicURL = function (mapid, width, height, position, options) {\n  invariant(typeof mapid === 'string', 'mapid option required and must be a string');\n  invariant(typeof width === 'number', 'width option required and must be a number');\n  invariant(typeof height === 'number', 'height option required and must be a number');\n  var defaults = {\n    format: 'png',\n    retina: ''\n  };\n  var xyz;\n\n  if (position === 'auto') {\n    xyz = 'auto';\n  } else {\n    invariantLocation(position);\n    xyz = position.longitude + ',' + position.latitude + ',' + position.zoom;\n  }\n\n  var userOptions = {};\n\n  if (options) {\n    invariant(typeof options === 'object', 'options must be an object');\n\n    if (options.format) {\n      invariant(typeof options.format === 'string', 'format must be a string');\n      userOptions.format = options.format;\n    }\n\n    if (options.retina) {\n      invariant(typeof options.retina === 'boolean', 'retina must be a boolean');\n      userOptions.retina = options.retina;\n    }\n\n    if (options.markers) {\n      userOptions.overlay = '/' + encodeOverlay.encodeMarkers(options.markers);\n    } else if (options.geojson) {\n      userOptions.overlay = '/' + encodeOverlay.encodeGeoJSON(options.geojson);\n    } else if (options.path) {\n      userOptions.overlay = '/' + encodeOverlay.encodePath(options.path);\n    }\n  }\n\n  var params = xtend(defaults, userOptions, {\n    mapid: mapid,\n    width: width,\n    xyz: xyz,\n    height: height,\n    access_token: this.accessToken\n  });\n\n  if (params.retina === true) {\n    params.retina = '@2x';\n  }\n\n  return this.endpoint + uriTemplate.expand(API_STATIC_CLASSIC, params);\n};\n\nmodule.exports = MapboxStatic;","map":{"version":3,"sources":["/Users/kevinrayjon/Documents/USC_MS_ADS/Fall_2021/DSCI_554/Project/project-datadocs/demo/node_modules/mapbox/lib/services/static.js"],"names":["invariant","require","xtend","extend","uriTemplate","encodeOverlay","invariantLocation","makeService","MapboxStatic","API_STATIC","API_STATIC_CLASSIC","prototype","getStaticURL","username","styleid","width","height","position","options","defaults","retina","xyzbp","longitude","latitude","zoom","bearing","pitch","userOptions","format","markers","overlay","encodeMarkers","geojson","encodeGeoJSON","path","encodePath","attribution","logo","before_layer","params","access_token","accessToken","endpoint","expand","getStaticClassicURL","mapid","xyz","module","exports"],"mappings":"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","sourcesContent":["'use strict';\n\nvar invariant = require('../../vendor/invariant');\nvar xtend = require('../../vendor/xtend').extend;\nvar uriTemplate = require('rest/util/uriTemplate');\nvar encodeOverlay = require('../encode_overlay');\nvar invariantLocation = require('../invariant_location');\nvar makeService = require('../make_service');\n\n/**\n * @class MapboxStatic\n */\nvar MapboxStatic = makeService('MapboxStatic');\n\nvar API_STATIC = '/styles/v1/{username}/{styleid}/static{+overlay}/{+xyzbp}/{width}x{height}{+retina}{?access_token,attribution,logo,before_layer}';\nvar API_STATIC_CLASSIC = '/v4/{mapid}{+overlay}/{+xyz}/{width}x{height}{+retina}{.format}{?access_token}';\n\n/**\n * Determine a URL for a static map image, using the [Mapbox Static Map API](https://www.mapbox.com/api-documentation/#static).\n *\n * @param {string} username Mapbox username\n * @param {string} styleid Mapbox Style ID\n * @param {number} width width of the image\n * @param {number} height height of the image\n *\n * @param {Object|string} position either an object with longitude and latitude members, or the string 'auto'\n * @param {number} position.longitude east, west bearing\n * @param {number} position.latitude north, south bearing\n * @param {number} position.zoom map zoom level\n * @param {number} position.bearing map bearing in degrees between 0 and 360\n * @param {number} position.pitch map pitch in degrees between 0 (straight down, no pitch) and 60 (maximum pitch)\n *\n * @param {Object} options all map options\n * @param {boolean} [options.retina=false] whether to double image pixel density\n *\n * @param {Array<Object>} [options.markers=[]] an array of simple marker objects as an overlay\n * @param {Object} [options.geojson={}] geojson data for the overlay\n * @param {Object} [options.path={}] a path and\n * @param {Array<Object>} options.path.geojson data for the path as an array of longitude, latitude objects\n * @param {Array<Object>} options.path.style optional style definitions for a path\n * @param {boolean} options.attribution controlling whether there is attribution on the image; defaults to true\n * @param {boolean} options.logo controlling whether there is a Mapbox logo on the image; defaults to true\n * @param {string} options.before_layer value for controlling where the overlay is inserted in the style\n *\n * @returns {string} static map url\n * @example\n * var mapboxClient = new MapboxClient('ACCESSTOKEN');\n * var url = mapboxClient.getStaticURL('mapbox', 'streets-v10', 600, 400, {\n *   longitude: 151.22,\n *   latitude: -33.87,\n *   zoom: 11\n * }, {\n *   markers: [{ longitude: 151.22, latitude: -33.87 }],\n *   before_layer: 'housenum-label'\n * });\n * // url = https://api.mapbox.com/styles/v1/mapbox/streets-v10/static/pin-l-circle(151.22,-33.87)/151.22,-33.87,11/600x400?access_token=ACCESS_TOKEN&before_layer=housenum-label\n */\nMapboxStatic.prototype.getStaticURL = function(username, styleid, width, height, position, options) {\n  invariant(typeof username === 'string', 'username option required and must be a string');\n  invariant(typeof styleid === 'string', 'styleid option required and must be a string');\n  invariant(typeof width === 'number', 'width option required and must be a number');\n  invariant(typeof height === 'number', 'height option required and must be a number');\n\n  var defaults = {\n    retina: ''\n  };\n\n  var xyzbp;\n\n  if (position === 'auto') {\n    xyzbp = 'auto';\n  } else {\n    invariantLocation(position);\n    xyzbp = position.longitude + ',' + position.latitude + ',' + position.zoom;\n    if ('pitch' in position) {\n        xyzbp += ',' + (position.bearing || 0) + ',' + position.pitch;\n    } else if ('bearing' in position) {\n        xyzbp += ',' + position.bearing;\n    }\n  }\n\n  var userOptions = {};\n\n  if (options) {\n    invariant(typeof options === 'object', 'options must be an object');\n    if (options.format) {\n      invariant(typeof options.format === 'string', 'format must be a string');\n      userOptions.format = options.format;\n    }\n    if (options.retina) {\n      invariant(typeof options.retina === 'boolean', 'retina must be a boolean');\n      userOptions.retina = options.retina;\n    }\n    if (options.markers) {\n      userOptions.overlay = '/' + encodeOverlay.encodeMarkers(options.markers);\n    } else if (options.geojson) {\n      userOptions.overlay = '/' + encodeOverlay.encodeGeoJSON(options.geojson);\n    } else if (options.path) {\n      userOptions.overlay = '/' + encodeOverlay.encodePath(options.path);\n    }\n    if ('attribution' in options) {\n      invariant(typeof options.attribution === 'boolean', 'attribution must be a boolean');\n      userOptions.attribution = options.attribution;\n    }\n    if ('logo' in options) {\n      invariant(typeof options.logo === 'boolean', 'logo must be a boolean');\n      userOptions.logo = options.logo;\n    }\n    if (options.before_layer) {\n      invariant(typeof options.before_layer === 'string', 'before_layer must be a string');\n      userOptions.before_layer = options.before_layer;\n    }\n  }\n\n  var params = xtend(defaults, userOptions, {\n    username: username,\n    styleid: styleid,\n    width: width,\n    xyzbp: xyzbp,\n    height: height,\n    access_token: this.accessToken\n  });\n\n  if (params.retina === true) {\n    params.retina = '@2x';\n  }\n\n  return this.endpoint + uriTemplate.expand(API_STATIC, params);\n};\n\n/**\n * Determine a URL for a static classic map image, using the [Mapbox Static (Classic) Map API](https://www.mapbox.com/api-documentation/pages/static_classic.html).\n *\n * @param {string} mapid a Mapbox map id in username.id form\n * @param {number} width width of the image\n * @param {number} height height of the image\n *\n * @param {Object|string} position either an object with longitude and latitude members, or the string 'auto'\n * @param {number} position.longitude east, west bearing\n * @param {number} position.latitude north, south bearing\n * @param {number} position.zoom zoom level\n *\n * @param {Object} options all map options\n * @param {string} [options.format=png] image format. can be jpg70, jpg80, jpg90, png32, png64, png128, png256\n * @param {boolean} [options.retina=false] whether to double image pixel density\n *\n * @param {Array<Object>} [options.markers=[]] an array of simple marker objects as an overlay\n * @param {Object} [options.geojson={}] geojson data for the overlay\n * @param {Object} [options.path={}] a path and\n * @param {Array<Object>} options.path.geojson data for the path as an array of longitude, latitude objects\n * @param {Array<Object>} options.path.style optional style definitions for a path\n *\n * @returns {string} static classic map url\n * @example\n * var mapboxClient = new MapboxClient('ACCESSTOKEN');\n */\nMapboxStatic.prototype.getStaticClassicURL = function(mapid, width, height, position, options) {\n  invariant(typeof mapid === 'string', 'mapid option required and must be a string');\n  invariant(typeof width === 'number', 'width option required and must be a number');\n  invariant(typeof height === 'number', 'height option required and must be a number');\n\n  var defaults = {\n    format: 'png',\n    retina: ''\n  };\n\n  var xyz;\n\n  if (position === 'auto') {\n    xyz = 'auto';\n  } else {\n    invariantLocation(position);\n    xyz = position.longitude + ',' + position.latitude + ',' + position.zoom;\n  }\n\n  var userOptions = {};\n\n  if (options) {\n    invariant(typeof options === 'object', 'options must be an object');\n    if (options.format) {\n      invariant(typeof options.format === 'string', 'format must be a string');\n      userOptions.format = options.format;\n    }\n    if (options.retina) {\n      invariant(typeof options.retina === 'boolean', 'retina must be a boolean');\n      userOptions.retina = options.retina;\n    }\n    if (options.markers) {\n      userOptions.overlay = '/' + encodeOverlay.encodeMarkers(options.markers);\n    } else if (options.geojson) {\n      userOptions.overlay = '/' + encodeOverlay.encodeGeoJSON(options.geojson);\n    } else if (options.path) {\n      userOptions.overlay = '/' + encodeOverlay.encodePath(options.path);\n    }\n  }\n\n  var params = xtend(defaults, userOptions, {\n    mapid: mapid,\n    width: width,\n    xyz: xyz,\n    height: height,\n    access_token: this.accessToken\n  });\n\n  if (params.retina === true) {\n    params.retina = '@2x';\n  }\n\n  return this.endpoint + uriTemplate.expand(API_STATIC_CLASSIC, params);\n};\n\nmodule.exports = MapboxStatic;\n"]},"metadata":{},"sourceType":"script"}