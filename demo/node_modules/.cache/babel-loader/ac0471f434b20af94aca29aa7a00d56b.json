{"ast":null,"code":"/*\n * Copyright (c) 2009 Nicholas C. Zakas. All rights reserved.\n *\n * Permission is hereby granted, free of charge, to any person obtaining a copy\n * of this software and associated documentation files (the \"Software\"), to deal\n * in the Software without restriction, including without limitation the rights\n * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell\n * copies of the Software, and to permit persons to whom the Software is\n * furnished to do so, subject to the following conditions:\n *\n * The above copyright notice and this permission notice shall be included in\n * all copies or substantial portions of the Software.\n *\n * THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\n * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\n * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\n * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\n * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\n * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN\n * THE SOFTWARE.\n */\n\n/*\n * Base 64 implementation in JavaScript\n * Original source available at https://raw.github.com/nzakas/computer-science-in-javascript/02a2745b4aa8214f2cae1bf0b15b447ca1a91b23/encodings/base64/base64.js\n *\n * Linter refinement by Scott Andrews\n */\n'use strict';\n/*jshint bitwise: false */\n\nvar digits = 'ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/';\n/**\n * Base64-encodes a string of text.\n *\n * @param {string} text The text to encode.\n * @return {string} The base64-encoded string.\n */\n\nfunction base64Encode(text) {\n  if (/([^\\u0000-\\u00ff])/.test(text)) {\n    throw new Error('Can\\'t base64 encode non-ASCII characters.');\n  }\n\n  var i = 0,\n      cur,\n      prev,\n      byteNum,\n      result = [];\n\n  while (i < text.length) {\n    cur = text.charCodeAt(i);\n    byteNum = i % 3;\n\n    switch (byteNum) {\n      case 0:\n        //first byte\n        result.push(digits.charAt(cur >> 2));\n        break;\n\n      case 1:\n        //second byte\n        result.push(digits.charAt((prev & 3) << 4 | cur >> 4));\n        break;\n\n      case 2:\n        //third byte\n        result.push(digits.charAt((prev & 0x0f) << 2 | cur >> 6));\n        result.push(digits.charAt(cur & 0x3f));\n        break;\n    }\n\n    prev = cur;\n    i += 1;\n  }\n\n  if (byteNum === 0) {\n    result.push(digits.charAt((prev & 3) << 4));\n    result.push('==');\n  } else if (byteNum === 1) {\n    result.push(digits.charAt((prev & 0x0f) << 2));\n    result.push('=');\n  }\n\n  return result.join('');\n}\n/**\n * Base64-decodes a string of text.\n *\n * @param {string} text The text to decode.\n * @return {string} The base64-decoded string.\n */\n\n\nfunction base64Decode(text) {\n  //ignore white space\n  text = text.replace(/\\s/g, ''); //first check for any unexpected input\n\n  if (!/^[a-z0-9\\+\\/\\s]+\\={0,2}$/i.test(text) || text.length % 4 > 0) {\n    throw new Error('Not a base64-encoded string.');\n  } //local variables\n\n\n  var cur,\n      prev,\n      digitNum,\n      i = 0,\n      result = []; //remove any equals signs\n\n  text = text.replace(/\\=/g, ''); //loop over each character\n\n  while (i < text.length) {\n    cur = digits.indexOf(text.charAt(i));\n    digitNum = i % 4;\n\n    switch (digitNum) {\n      //case 0: first digit - do nothing, not enough info to work with\n      case 1:\n        //second digit\n        result.push(String.fromCharCode(prev << 2 | cur >> 4));\n        break;\n\n      case 2:\n        //third digit\n        result.push(String.fromCharCode((prev & 0x0f) << 4 | cur >> 2));\n        break;\n\n      case 3:\n        //fourth digit\n        result.push(String.fromCharCode((prev & 3) << 6 | cur));\n        break;\n    }\n\n    prev = cur;\n    i += 1;\n  } //return a string\n\n\n  return result.join('');\n}\n\nmodule.exports = {\n  encode: base64Encode,\n  decode: base64Decode\n};","map":{"version":3,"sources":["/Users/HHJ/Dropbox/Class/2021/DSCI554/Github/project-datadocs/demo/node_modules/rest/util/base64.js"],"names":["digits","base64Encode","text","test","Error","i","cur","prev","byteNum","result","length","charCodeAt","push","charAt","join","base64Decode","replace","digitNum","indexOf","String","fromCharCode","module","exports","encode","decode"],"mappings":"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","sourcesContent":["/*\n * Copyright (c) 2009 Nicholas C. Zakas. All rights reserved.\n *\n * Permission is hereby granted, free of charge, to any person obtaining a copy\n * of this software and associated documentation files (the \"Software\"), to deal\n * in the Software without restriction, including without limitation the rights\n * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell\n * copies of the Software, and to permit persons to whom the Software is\n * furnished to do so, subject to the following conditions:\n *\n * The above copyright notice and this permission notice shall be included in\n * all copies or substantial portions of the Software.\n *\n * THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\n * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\n * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\n * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\n * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\n * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN\n * THE SOFTWARE.\n */\n\n/*\n * Base 64 implementation in JavaScript\n * Original source available at https://raw.github.com/nzakas/computer-science-in-javascript/02a2745b4aa8214f2cae1bf0b15b447ca1a91b23/encodings/base64/base64.js\n *\n * Linter refinement by Scott Andrews\n */\n\n'use strict';\n\n/*jshint bitwise: false */\n\nvar digits = 'ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/';\n\n/**\n * Base64-encodes a string of text.\n *\n * @param {string} text The text to encode.\n * @return {string} The base64-encoded string.\n */\nfunction base64Encode(text) {\n\n\tif (/([^\\u0000-\\u00ff])/.test(text)) {\n\t\tthrow new Error('Can\\'t base64 encode non-ASCII characters.');\n\t}\n\n\tvar i = 0,\n\t\tcur, prev, byteNum,\n\t\tresult = [];\n\n\twhile (i < text.length) {\n\n\t\tcur = text.charCodeAt(i);\n\t\tbyteNum = i % 3;\n\n\t\tswitch (byteNum) {\n\t\tcase 0: //first byte\n\t\t\tresult.push(digits.charAt(cur >> 2));\n\t\t\tbreak;\n\n\t\tcase 1: //second byte\n\t\t\tresult.push(digits.charAt((prev & 3) << 4 | (cur >> 4)));\n\t\t\tbreak;\n\n\t\tcase 2: //third byte\n\t\t\tresult.push(digits.charAt((prev & 0x0f) << 2 | (cur >> 6)));\n\t\t\tresult.push(digits.charAt(cur & 0x3f));\n\t\t\tbreak;\n\t\t}\n\n\t\tprev = cur;\n\t\ti += 1;\n\t}\n\n\tif (byteNum === 0) {\n\t\tresult.push(digits.charAt((prev & 3) << 4));\n\t\tresult.push('==');\n\t} else if (byteNum === 1) {\n\t\tresult.push(digits.charAt((prev & 0x0f) << 2));\n\t\tresult.push('=');\n\t}\n\n\treturn result.join('');\n}\n\n/**\n * Base64-decodes a string of text.\n *\n * @param {string} text The text to decode.\n * @return {string} The base64-decoded string.\n */\nfunction base64Decode(text) {\n\n\t//ignore white space\n\ttext = text.replace(/\\s/g, '');\n\n\t//first check for any unexpected input\n\tif (!(/^[a-z0-9\\+\\/\\s]+\\={0,2}$/i.test(text)) || text.length % 4 > 0) {\n\t\tthrow new Error('Not a base64-encoded string.');\n\t}\n\n\t//local variables\n\tvar cur, prev, digitNum,\n\t\ti = 0,\n\t\tresult = [];\n\n\t//remove any equals signs\n\ttext = text.replace(/\\=/g, '');\n\n\t//loop over each character\n\twhile (i < text.length) {\n\n\t\tcur = digits.indexOf(text.charAt(i));\n\t\tdigitNum = i % 4;\n\n\t\tswitch (digitNum) {\n\n\t\t//case 0: first digit - do nothing, not enough info to work with\n\n\t\tcase 1: //second digit\n\t\t\tresult.push(String.fromCharCode(prev << 2 | cur >> 4));\n\t\t\tbreak;\n\n\t\tcase 2: //third digit\n\t\t\tresult.push(String.fromCharCode((prev & 0x0f) << 4 | cur >> 2));\n\t\t\tbreak;\n\n\t\tcase 3: //fourth digit\n\t\t\tresult.push(String.fromCharCode((prev & 3) << 6 | cur));\n\t\t\tbreak;\n\t\t}\n\n\t\tprev = cur;\n\t\ti += 1;\n\t}\n\n\t//return a string\n\treturn result.join('');\n\n}\n\nmodule.exports = {\n\tencode: base64Encode,\n\tdecode: base64Decode\n};\n"]},"metadata":{},"sourceType":"script"}