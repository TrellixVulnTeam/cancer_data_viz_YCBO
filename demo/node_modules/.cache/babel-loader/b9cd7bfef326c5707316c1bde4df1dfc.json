{"ast":null,"code":"'use strict';\n\nvar invariant = require('../../vendor/invariant');\n\nvar makeService = require('../make_service');\n/**\n * @class MapboxTokens\n */\n\n\nvar MapboxTokens = module.exports = makeService('MapboxTokens');\nvar API_TOKENS_LIST = '/tokens/v2/{owner}{?access_token}';\nvar API_TOKENS_CREATE = '/tokens/v2/{owner}{?access_token}';\nvar API_TOKENS_UPDATE_AUTHORIZATION = '/tokens/v2/{owner}/{authorization_id}{?access_token}';\nvar API_TOKENS_DELETE_AUTHORIZATION = '/tokens/v2/{owner}/{authorization_id}{?access_token}';\nvar API_TOKENS_RETRIEVE = '/tokens/v2{?access_token}';\nvar API_TOKENS_LIST_SCOPES = '/scopes/v1/{owner}{?access_token}';\n/**\n * To retrieve a listing of tokens for a particular account.\n *\n * @param {Function} [callback] called with (err, tokens, response)\n * @returns {Promise} response\n * @example\n * var MapboxClient = require('mapbox');\n * var client = new MapboxClient('ACCESSTOKEN');\n * client.listTokens(function(err, tokens) {\n *   console.log(tokens);\n *   // [{ client: 'api'\n *   //  note: 'Default Public Token',\n *   //  usage: 'pk',\n *   //  id: 'TOKENID',\n *   //  default: true,\n *   //  scopes: ['styles:tiles','styles:read','fonts:read','datasets:read'],\n *   //  created: '2016-02-09T14:26:15.059Z',\n *   //  modified: '2016-02-09T14:28:31.253Z',\n *   //  token: 'pk.TOKEN' }]\n * });\n */\n\nMapboxTokens.prototype.listTokens = function (callback) {\n  return this.client({\n    path: API_TOKENS_LIST,\n    params: {\n      owner: this.owner\n    },\n    callback: callback\n  });\n};\n/**\n * Create a token\n *\n * @param {string} note Note attached to the token\n * @param {Array} scopes List of scopes for the new token\n * @param {Function} [callback] called with (err, token, response)\n * @returns {Promise} response\n * @example\n * var MapboxClient = require('mapbox');\n * var client = new MapboxClient('ACCESSTOKEN');\n * client.createToken('My top secret project', [\"styles:read\", \"fonts:read\"], function(err, createdToken) {\n *   console.log(createdToken);\n * });\n */\n\n\nMapboxTokens.prototype.createToken = function (note, scopes, callback) {\n  invariant(typeof note === 'string', 'note must be a string');\n  invariant(Object.prototype.toString.call(scopes) === '[object Array]', 'scopes must be an array');\n  return this.client({\n    path: API_TOKENS_CREATE,\n    params: {\n      owner: this.owner\n    },\n    entity: {\n      scopes: scopes,\n      note: note\n    },\n    callback: callback\n  });\n};\n/**\n * Create a temporary token\n *\n * @param {string} expires Time token expires in RFC 3339\n * @param {Array} scopes List of scopes for the new token\n * @param {Function} [callback] called with (err, token, response)\n * @returns {Promise} response\n * @example\n * var MapboxClient = require('mapbox');\n * var client = new MapboxClient('ACCESSTOKEN');\n * client.createTemporaryToken('2016-09-15T19:27:53.000Z', [\"styles:read\", \"fonts:read\"], function(err, createdToken) {\n *   console.log(createdToken);\n * });\n */\n\n\nMapboxTokens.prototype.createTemporaryToken = function (expires, scopes, callback) {\n  invariant(typeof expires === 'string', 'expires must be a string');\n  invariant(Object.prototype.toString.call(scopes) === '[object Array]', 'scopes must be an array');\n  return this.client({\n    path: API_TOKENS_CREATE,\n    params: {\n      owner: this.owner\n    },\n    entity: {\n      scopes: scopes,\n      expires: expires\n    },\n    callback: callback\n  });\n};\n/**\n * Update a token's authorization\n *\n * @param {string} authorization_id Authorization ID\n * @param {Array} scopes List of scopes for the new token\n * @param {Function} [callback] called with (err, token, response)\n * @returns {Promise} response\n * @example\n * var MapboxClient = require('mapbox');\n * var client = new MapboxClient('ACCESSTOKEN');\n * client.updateTokenAuthorization('auth id', [\"styles:read\", \"fonts:read\"], function(err, updatedToken) {\n *   console.log(updatedToken);\n * });\n */\n\n\nMapboxTokens.prototype.updateTokenAuthorization = function (authorization_id, scopes, callback) {\n  invariant(typeof authorization_id === 'string', 'authorization_id must be a string');\n  invariant(Object.prototype.toString.call(scopes) === '[object Array]', 'scopes must be an array');\n  return this.client({\n    path: API_TOKENS_UPDATE_AUTHORIZATION,\n    params: {\n      authorization_id: authorization_id,\n      owner: this.owner\n    },\n    entity: {\n      scopes: scopes\n    },\n    method: 'patch',\n    callback: callback\n  });\n};\n/**\n * Delete a token's authorization\n *\n * @param {string} authorization_id Authorization ID\n * @param {Function} [callback] called with (err, token, response)\n * @returns {Promise} response\n * @example\n * var MapboxClient = require('mapbox');\n * var client = new MapboxClient('ACCESSTOKEN');\n * client.deleteTokenAuthorization('auth id', function(err) {\n * });\n */\n\n\nMapboxTokens.prototype.deleteTokenAuthorization = function (authorization_id, callback) {\n  invariant(typeof authorization_id === 'string', 'authorization_id must be a string');\n  return this.client({\n    path: API_TOKENS_DELETE_AUTHORIZATION,\n    params: {\n      authorization_id: authorization_id,\n      owner: this.owner\n    },\n    method: 'delete',\n    callback: callback\n  });\n};\n/**\n * Retrieve a token\n *\n * @param {string} access_token access token to check\n * @param {Function} [callback] called with (err, token, response)\n * @returns {Promise} response\n * @example\n * var MapboxClient = require('mapbox');\n * var client = new MapboxClient('ACCESSTOKEN');\n * client.retrieveToken('ACCESSTOKEN', function(err, tokenResponse) {\n *   console.log(tokenResponse);\n * });\n */\n\n\nMapboxTokens.prototype.retrieveToken = function (access_token, callback) {\n  invariant(typeof access_token === 'string', 'access_token must be a string');\n  return this.client({\n    path: API_TOKENS_RETRIEVE,\n    params: {\n      access_token: access_token\n    },\n    callback: callback\n  });\n};\n/**\n * List scopes\n *\n * @param {Function} [callback] called with (err, scopes, response)\n * @returns {Promise} response\n * @example\n * var MapboxClient = require('mapbox');\n * var client = new MapboxClient('ACCESSTOKEN');\n * client.listScopes(function(err, scopes) {\n *   console.log(scopes);\n * });\n */\n\n\nMapboxTokens.prototype.listScopes = function (callback) {\n  return this.client({\n    path: API_TOKENS_LIST_SCOPES,\n    params: {\n      owner: this.owner\n    },\n    callback: callback\n  });\n};","map":{"version":3,"sources":["/Users/HHJ/Dropbox/Class/2021/DSCI554/Github/project-datadocs/demo/node_modules/mapbox/lib/services/tokens.js"],"names":["invariant","require","makeService","MapboxTokens","module","exports","API_TOKENS_LIST","API_TOKENS_CREATE","API_TOKENS_UPDATE_AUTHORIZATION","API_TOKENS_DELETE_AUTHORIZATION","API_TOKENS_RETRIEVE","API_TOKENS_LIST_SCOPES","prototype","listTokens","callback","client","path","params","owner","createToken","note","scopes","Object","toString","call","entity","createTemporaryToken","expires","updateTokenAuthorization","authorization_id","method","deleteTokenAuthorization","retrieveToken","access_token","listScopes"],"mappings":"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","sourcesContent":["'use strict';\n\nvar invariant = require('../../vendor/invariant');\nvar makeService = require('../make_service');\n\n/**\n * @class MapboxTokens\n */\nvar MapboxTokens = module.exports = makeService('MapboxTokens');\n\nvar API_TOKENS_LIST = '/tokens/v2/{owner}{?access_token}';\nvar API_TOKENS_CREATE = '/tokens/v2/{owner}{?access_token}';\nvar API_TOKENS_UPDATE_AUTHORIZATION = '/tokens/v2/{owner}/{authorization_id}{?access_token}';\nvar API_TOKENS_DELETE_AUTHORIZATION = '/tokens/v2/{owner}/{authorization_id}{?access_token}';\nvar API_TOKENS_RETRIEVE = '/tokens/v2{?access_token}';\nvar API_TOKENS_LIST_SCOPES = '/scopes/v1/{owner}{?access_token}';\n\n/**\n * To retrieve a listing of tokens for a particular account.\n *\n * @param {Function} [callback] called with (err, tokens, response)\n * @returns {Promise} response\n * @example\n * var MapboxClient = require('mapbox');\n * var client = new MapboxClient('ACCESSTOKEN');\n * client.listTokens(function(err, tokens) {\n *   console.log(tokens);\n *   // [{ client: 'api'\n *   //  note: 'Default Public Token',\n *   //  usage: 'pk',\n *   //  id: 'TOKENID',\n *   //  default: true,\n *   //  scopes: ['styles:tiles','styles:read','fonts:read','datasets:read'],\n *   //  created: '2016-02-09T14:26:15.059Z',\n *   //  modified: '2016-02-09T14:28:31.253Z',\n *   //  token: 'pk.TOKEN' }]\n * });\n */\nMapboxTokens.prototype.listTokens = function(callback) {\n  return this.client({\n    path: API_TOKENS_LIST,\n    params: {\n      owner: this.owner\n    },\n    callback: callback\n  });\n};\n\n/**\n * Create a token\n *\n * @param {string} note Note attached to the token\n * @param {Array} scopes List of scopes for the new token\n * @param {Function} [callback] called with (err, token, response)\n * @returns {Promise} response\n * @example\n * var MapboxClient = require('mapbox');\n * var client = new MapboxClient('ACCESSTOKEN');\n * client.createToken('My top secret project', [\"styles:read\", \"fonts:read\"], function(err, createdToken) {\n *   console.log(createdToken);\n * });\n */\nMapboxTokens.prototype.createToken = function(note, scopes, callback) {\n  invariant(typeof note === 'string', 'note must be a string');\n  invariant(Object.prototype.toString.call(scopes) === '[object Array]', 'scopes must be an array');\n\n  return this.client({\n    path: API_TOKENS_CREATE,\n    params: {\n      owner: this.owner\n    },\n    entity: {\n      scopes: scopes,\n      note: note\n    },\n    callback: callback\n  });\n};\n\n/**\n * Create a temporary token\n *\n * @param {string} expires Time token expires in RFC 3339\n * @param {Array} scopes List of scopes for the new token\n * @param {Function} [callback] called with (err, token, response)\n * @returns {Promise} response\n * @example\n * var MapboxClient = require('mapbox');\n * var client = new MapboxClient('ACCESSTOKEN');\n * client.createTemporaryToken('2016-09-15T19:27:53.000Z', [\"styles:read\", \"fonts:read\"], function(err, createdToken) {\n *   console.log(createdToken);\n * });\n */\nMapboxTokens.prototype.createTemporaryToken = function(expires, scopes, callback) {\n  invariant(typeof expires === 'string', 'expires must be a string');\n  invariant(Object.prototype.toString.call(scopes) === '[object Array]', 'scopes must be an array');\n\n  return this.client({\n    path: API_TOKENS_CREATE,\n    params: {\n      owner: this.owner\n    },\n    entity: {\n      scopes: scopes,\n      expires: expires\n    },\n    callback: callback\n  });\n};\n\n/**\n * Update a token's authorization\n *\n * @param {string} authorization_id Authorization ID\n * @param {Array} scopes List of scopes for the new token\n * @param {Function} [callback] called with (err, token, response)\n * @returns {Promise} response\n * @example\n * var MapboxClient = require('mapbox');\n * var client = new MapboxClient('ACCESSTOKEN');\n * client.updateTokenAuthorization('auth id', [\"styles:read\", \"fonts:read\"], function(err, updatedToken) {\n *   console.log(updatedToken);\n * });\n */\nMapboxTokens.prototype.updateTokenAuthorization = function(authorization_id, scopes, callback) {\n  invariant(typeof authorization_id === 'string', 'authorization_id must be a string');\n  invariant(Object.prototype.toString.call(scopes) === '[object Array]', 'scopes must be an array');\n\n  return this.client({\n    path: API_TOKENS_UPDATE_AUTHORIZATION,\n    params: {\n      authorization_id: authorization_id,\n      owner: this.owner\n    },\n    entity: {\n      scopes: scopes\n    },\n    method: 'patch',\n    callback: callback\n  });\n};\n\n/**\n * Delete a token's authorization\n *\n * @param {string} authorization_id Authorization ID\n * @param {Function} [callback] called with (err, token, response)\n * @returns {Promise} response\n * @example\n * var MapboxClient = require('mapbox');\n * var client = new MapboxClient('ACCESSTOKEN');\n * client.deleteTokenAuthorization('auth id', function(err) {\n * });\n */\nMapboxTokens.prototype.deleteTokenAuthorization = function(authorization_id, callback) {\n  invariant(typeof authorization_id === 'string', 'authorization_id must be a string');\n\n  return this.client({\n    path: API_TOKENS_DELETE_AUTHORIZATION,\n    params: {\n      authorization_id: authorization_id,\n      owner: this.owner\n    },\n    method: 'delete',\n    callback: callback\n  });\n};\n\n/**\n * Retrieve a token\n *\n * @param {string} access_token access token to check\n * @param {Function} [callback] called with (err, token, response)\n * @returns {Promise} response\n * @example\n * var MapboxClient = require('mapbox');\n * var client = new MapboxClient('ACCESSTOKEN');\n * client.retrieveToken('ACCESSTOKEN', function(err, tokenResponse) {\n *   console.log(tokenResponse);\n * });\n */\nMapboxTokens.prototype.retrieveToken = function(access_token, callback) {\n  invariant(typeof access_token === 'string', 'access_token must be a string');\n\n  return this.client({\n    path: API_TOKENS_RETRIEVE,\n    params: {\n      access_token: access_token\n    },\n    callback: callback\n  });\n};\n\n/**\n * List scopes\n *\n * @param {Function} [callback] called with (err, scopes, response)\n * @returns {Promise} response\n * @example\n * var MapboxClient = require('mapbox');\n * var client = new MapboxClient('ACCESSTOKEN');\n * client.listScopes(function(err, scopes) {\n *   console.log(scopes);\n * });\n */\nMapboxTokens.prototype.listScopes = function(callback) {\n  return this.client({\n    path: API_TOKENS_LIST_SCOPES,\n    params: {\n      owner: this.owner\n    },\n    callback: callback\n  });\n};\n"]},"metadata":{},"sourceType":"script"}