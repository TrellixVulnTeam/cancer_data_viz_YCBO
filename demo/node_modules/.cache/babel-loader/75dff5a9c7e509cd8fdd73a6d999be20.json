{"ast":null,"code":"'use strict';\n\nvar invariant = require('../../vendor/invariant');\n\nvar formatPoints = require('../format_points');\n\nvar makeService = require('../make_service');\n/**\n * @class MapboxDirections\n */\n\n\nvar MapboxDirections = makeService('MapboxDirections');\nvar API_DIRECTIONS = '/directions/v5/{account}/{profile}/{encodedWaypoints}.json{?access_token,alternatives,geometries,overview,radiuses,steps,continue_straight,bearings}';\n/**\n * Find directions from A to B, or between any number of locations.\n * Consult the [Mapbox Directions API](https://www.mapbox.com/api-documentation/#directions)\n * for more documentation.\n *\n * @param {Array<Object>} waypoints an array of objects with `latitude`\n * and `longitude` properties that represent waypoints in order. Up to\n * 25 waypoints can be specified.\n * @param {Object} [options={}] additional options meant to tune\n * the request\n * @param {string} [options.profile=driving] the directions\n * profile, which determines how to prioritize different routes.\n * Options are `'driving-traffic'` for automotive routing which factors\n * in current and historic traffic conditions to avoid slowdowns,\n * `'driving'`, which assumes transportation via an\n * automobile and will use highways, `'walking'`, which avoids\n * streets without sidewalks, and `'cycling'`, which prefers streets\n * with bicycle lanes and lower speed limits for transportation via\n * bicycle.\n * @param {string} [options.account=mapbox] Account for the profile.\n * @param {string} [options.alternatives=true] whether to generate\n * alternative routes along with the preferred route.\n * @param {string} [options.geometries=geojson] format for the returned\n * route. Options are `'geojson'`, `'polyline'`, or `false`: `polyline`\n * yields more compact responses which can be decoded on the client side.\n * [GeoJSON](http://geojson.org/), the default, is compatible with libraries\n * like [Mapbox GL](https://www.mapbox.com/mapbox-gl/),\n * Leaflet and [Mapbox.js](https://www.mapbox.com/mapbox.js/). `false`\n * omits the geometry entirely and only returns instructions.\n * @param {string} [options.overview=simplified] type of returned overview\n * geometry. Can be `full` (the most detailed geometry available), `simplified`\n * (a simplified version of the full geometry), or `false`.\n * @param {Array<number|string>} [options.radiuses] an array of integers in meters\n * indicating the maximum distance each coordinate is allowed to move when\n * snapped to a nearby road segment. There must be as many radiuses as there\n * are coordinates in the request. Values can be any number greater than `0` or\n * they can be the string `unlimited`. If no routable road is found within the\n * radius, a `NoSegment` error is returned.\n * @param {boolean} [options.steps=false] whether to return steps and\n * turn-by-turn instructions. Can be `true` or `false`.\n * @param {boolean} [options.continue_straight] sets allowed direction of travel\n * when departing intermediate waypoints. If `true` the route will continue in\n * the same direction of travel. If `false` the route may continue in the\n * opposite direction of travel. Defaults to `true` for the `driving` profile\n * and `false` for the `walking` and `cycling` profiles.\n * @param {Array<Array>} [options.bearings] used to filter the road\n * segment the waypoint will be placed on by direction and dictates the angle\n * of approach. This option should always be used in conjunction with the\n * `radiuses` option. The parameter takes two values per waypoint: the first is\n * an angle clockwise from true north between `0` and `360`. The second is the\n * range of degrees the angle can deviate by. We recommend a value of `45` or\n * `90` for the range, as bearing measurements tend to be inaccurate. This is\n * useful for making sure we reroute vehicles on new routes that continue\n * traveling in their current direction. A request that does this would provide\n * bearing and radius values for the first waypoint and leave the remaining\n * values empty.If provided, the list of bearings must be the same length as\n * the list of waypoints, but you can skip a coordinate and show its position\n * by providing an empty array.\n * @param {Function} callback called with (err, results)\n * @returns {Promise} response\n * @example\n * var mapboxClient = new MapboxClient('ACCESSTOKEN');\n * mapboxClient.getDirections(\n *   [\n *     { latitude: 33.6, longitude: -95.4431 },\n *     { latitude: 33.2, longitude: -95.4431 } ],\n *   function(err, res) {\n *   // res is a document with directions\n * });\n *\n * // With options\n * mapboxClient.getDirections([\n *   { latitude: 33.6875431, longitude: -95.4431142 },\n *   { latitude: 33.6875431, longitude: -95.4831142 }\n * ], {\n *   profile: 'walking',\n *   alternatives: false,\n *   geometry: 'polyline'\n * }, function(err, results) {\n *   console.log(results);\n * });\n */\n\nMapboxDirections.prototype.getDirections = function (waypoints, options, callback) {\n  // permit the options argument to be omitted\n  if (callback === undefined && typeof options === 'function') {\n    callback = options;\n    options = {};\n  } else if (options === undefined) {\n    options = {};\n  } // typecheck arguments\n\n\n  invariant(Array.isArray(waypoints), 'waypoints must be an array');\n  invariant(typeof options === 'object', 'options must be an object');\n  var encodedWaypoints = formatPoints(waypoints);\n  var params = {\n    encodedWaypoints: encodedWaypoints,\n    profile: 'driving',\n    account: 'mapbox',\n    alternatives: true,\n    steps: true,\n    geometries: 'geojson'\n  };\n\n  if (options.profile) {\n    invariant(typeof options.profile === 'string', 'profile option must be string');\n    params.profile = options.profile;\n  }\n\n  if (options.account) {\n    invariant(typeof options.account === 'string', 'account option must be string');\n    params.account = options.account;\n  }\n\n  if (typeof options.alternatives !== 'undefined') {\n    invariant(typeof options.alternatives === 'boolean', 'alternatives option must be boolean');\n    params.alternatives = options.alternatives;\n  }\n\n  if (options.radiuses) {\n    invariant(Array.isArray(options.radiuses), 'radiuses must be an array');\n    invariant(options.radiuses.length === waypoints.length, 'There must be as many radiuses as there are waypoints in the request');\n    params.radiuses = options.radiuses.join(';');\n  }\n\n  if (typeof options.steps !== 'undefined') {\n    invariant(typeof options.steps === 'boolean', 'steps option must be boolean');\n    params.steps = options.steps;\n  }\n\n  var allowedGeometries = ['polyline', 'geojson'];\n\n  if (options.geometries) {\n    invariant(allowedGeometries.indexOf(options.geometries) !== -1, 'geometries option must be ' + allowedGeometries);\n    params.geometries = options.geometries;\n  }\n\n  var allowedOverviews = ['simplified', 'full'];\n\n  if (options.overview) {\n    invariant(allowedOverviews.indexOf(options.overview) !== -1, 'overview option must be ' + allowedOverviews);\n    params.overview = options.overview;\n  }\n\n  if (typeof options.continue_straight !== 'undefined') {\n    invariant(typeof options.continue_straight === 'boolean', 'continue_straight option must be boolean');\n    params.continue_straight = options.continue_straight;\n  }\n\n  if (options.bearings) {\n    invariant(Array.isArray(options.radiuses), 'bearings must be an array');\n    invariant(options.bearings.length === waypoints.length, 'There must be as many bearings as there are waypoints in the request');\n    params.bearings = options.bearings.join(';');\n  }\n\n  return this.client({\n    path: API_DIRECTIONS,\n    params: params,\n    callback: callback\n  });\n};\n\nmodule.exports = MapboxDirections;","map":{"version":3,"sources":["/Users/carlin/Desktop/USC_classes/DSCI_554/project-datadocs-real/demo/node_modules/mapbox/lib/services/directions.js"],"names":["invariant","require","formatPoints","makeService","MapboxDirections","API_DIRECTIONS","prototype","getDirections","waypoints","options","callback","undefined","Array","isArray","encodedWaypoints","params","profile","account","alternatives","steps","geometries","radiuses","length","join","allowedGeometries","indexOf","allowedOverviews","overview","continue_straight","bearings","client","path","module","exports"],"mappings":"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","sourcesContent":["'use strict';\n\nvar invariant = require('../../vendor/invariant');\nvar formatPoints = require('../format_points');\nvar makeService = require('../make_service');\n\n/**\n * @class MapboxDirections\n */\nvar MapboxDirections = makeService('MapboxDirections');\n\nvar API_DIRECTIONS = '/directions/v5/{account}/{profile}/{encodedWaypoints}.json{?access_token,alternatives,geometries,overview,radiuses,steps,continue_straight,bearings}';\n\n/**\n * Find directions from A to B, or between any number of locations.\n * Consult the [Mapbox Directions API](https://www.mapbox.com/api-documentation/#directions)\n * for more documentation.\n *\n * @param {Array<Object>} waypoints an array of objects with `latitude`\n * and `longitude` properties that represent waypoints in order. Up to\n * 25 waypoints can be specified.\n * @param {Object} [options={}] additional options meant to tune\n * the request\n * @param {string} [options.profile=driving] the directions\n * profile, which determines how to prioritize different routes.\n * Options are `'driving-traffic'` for automotive routing which factors\n * in current and historic traffic conditions to avoid slowdowns,\n * `'driving'`, which assumes transportation via an\n * automobile and will use highways, `'walking'`, which avoids\n * streets without sidewalks, and `'cycling'`, which prefers streets\n * with bicycle lanes and lower speed limits for transportation via\n * bicycle.\n * @param {string} [options.account=mapbox] Account for the profile.\n * @param {string} [options.alternatives=true] whether to generate\n * alternative routes along with the preferred route.\n * @param {string} [options.geometries=geojson] format for the returned\n * route. Options are `'geojson'`, `'polyline'`, or `false`: `polyline`\n * yields more compact responses which can be decoded on the client side.\n * [GeoJSON](http://geojson.org/), the default, is compatible with libraries\n * like [Mapbox GL](https://www.mapbox.com/mapbox-gl/),\n * Leaflet and [Mapbox.js](https://www.mapbox.com/mapbox.js/). `false`\n * omits the geometry entirely and only returns instructions.\n * @param {string} [options.overview=simplified] type of returned overview\n * geometry. Can be `full` (the most detailed geometry available), `simplified`\n * (a simplified version of the full geometry), or `false`.\n * @param {Array<number|string>} [options.radiuses] an array of integers in meters\n * indicating the maximum distance each coordinate is allowed to move when\n * snapped to a nearby road segment. There must be as many radiuses as there\n * are coordinates in the request. Values can be any number greater than `0` or\n * they can be the string `unlimited`. If no routable road is found within the\n * radius, a `NoSegment` error is returned.\n * @param {boolean} [options.steps=false] whether to return steps and\n * turn-by-turn instructions. Can be `true` or `false`.\n * @param {boolean} [options.continue_straight] sets allowed direction of travel\n * when departing intermediate waypoints. If `true` the route will continue in\n * the same direction of travel. If `false` the route may continue in the\n * opposite direction of travel. Defaults to `true` for the `driving` profile\n * and `false` for the `walking` and `cycling` profiles.\n * @param {Array<Array>} [options.bearings] used to filter the road\n * segment the waypoint will be placed on by direction and dictates the angle\n * of approach. This option should always be used in conjunction with the\n * `radiuses` option. The parameter takes two values per waypoint: the first is\n * an angle clockwise from true north between `0` and `360`. The second is the\n * range of degrees the angle can deviate by. We recommend a value of `45` or\n * `90` for the range, as bearing measurements tend to be inaccurate. This is\n * useful for making sure we reroute vehicles on new routes that continue\n * traveling in their current direction. A request that does this would provide\n * bearing and radius values for the first waypoint and leave the remaining\n * values empty.If provided, the list of bearings must be the same length as\n * the list of waypoints, but you can skip a coordinate and show its position\n * by providing an empty array.\n * @param {Function} callback called with (err, results)\n * @returns {Promise} response\n * @example\n * var mapboxClient = new MapboxClient('ACCESSTOKEN');\n * mapboxClient.getDirections(\n *   [\n *     { latitude: 33.6, longitude: -95.4431 },\n *     { latitude: 33.2, longitude: -95.4431 } ],\n *   function(err, res) {\n *   // res is a document with directions\n * });\n *\n * // With options\n * mapboxClient.getDirections([\n *   { latitude: 33.6875431, longitude: -95.4431142 },\n *   { latitude: 33.6875431, longitude: -95.4831142 }\n * ], {\n *   profile: 'walking',\n *   alternatives: false,\n *   geometry: 'polyline'\n * }, function(err, results) {\n *   console.log(results);\n * });\n */\nMapboxDirections.prototype.getDirections = function(waypoints, options, callback) {\n\n  // permit the options argument to be omitted\n  if (callback === undefined && typeof options === 'function') {\n    callback = options;\n    options = {};\n  } else if (options === undefined) {\n    options = {};\n  }\n\n  // typecheck arguments\n  invariant(Array.isArray(waypoints), 'waypoints must be an array');\n  invariant(typeof options === 'object', 'options must be an object');\n\n  var encodedWaypoints = formatPoints(waypoints);\n\n  var params = {\n    encodedWaypoints: encodedWaypoints,\n    profile: 'driving',\n    account: 'mapbox',\n    alternatives: true,\n    steps: true,\n    geometries: 'geojson'\n  };\n\n  if (options.profile) {\n    invariant(typeof options.profile === 'string', 'profile option must be string');\n    params.profile = options.profile;\n  }\n\n  if (options.account) {\n    invariant(typeof options.account === 'string', 'account option must be string');\n    params.account = options.account;\n  }\n\n  if (typeof options.alternatives !== 'undefined') {\n    invariant(typeof options.alternatives === 'boolean', 'alternatives option must be boolean');\n    params.alternatives = options.alternatives;\n  }\n\n  if (options.radiuses) {\n    invariant(Array.isArray(options.radiuses), 'radiuses must be an array');\n    invariant(options.radiuses.length === waypoints.length, 'There must be as many radiuses as there are waypoints in the request');\n    params.radiuses = options.radiuses.join(';');\n  }\n\n  if (typeof options.steps !== 'undefined') {\n    invariant(typeof options.steps === 'boolean', 'steps option must be boolean');\n    params.steps = options.steps;\n  }\n\n  var allowedGeometries = ['polyline', 'geojson'];\n  if (options.geometries) {\n    invariant(allowedGeometries.indexOf(options.geometries) !== -1, 'geometries option must be ' + allowedGeometries);\n    params.geometries = options.geometries;\n  }\n\n  var allowedOverviews = ['simplified', 'full'];\n  if (options.overview) {\n    invariant(allowedOverviews.indexOf(options.overview) !== -1, 'overview option must be ' + allowedOverviews);\n    params.overview = options.overview;\n  }\n\n  if (typeof options.continue_straight !== 'undefined') {\n    invariant(typeof options.continue_straight === 'boolean', 'continue_straight option must be boolean');\n    params.continue_straight = options.continue_straight;\n  }\n\n  if (options.bearings) {\n    invariant(Array.isArray(options.radiuses), 'bearings must be an array');\n    invariant(options.bearings.length === waypoints.length, 'There must be as many bearings as there are waypoints in the request');\n    params.bearings = options.bearings.join(';');\n  }\n\n  return this.client({\n    path: API_DIRECTIONS,\n    params: params,\n    callback: callback\n  });\n};\n\nmodule.exports = MapboxDirections;\n"]},"metadata":{},"sourceType":"script"}