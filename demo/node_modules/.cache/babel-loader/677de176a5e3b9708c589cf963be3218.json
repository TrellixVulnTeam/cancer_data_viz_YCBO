{"ast":null,"code":"'use strict';\n\nvar invariant = require('../../vendor/invariant');\n\nvar formatPoints = require('../format_points');\n\nvar makeService = require('../make_service');\n/**\n * @class MapboxMatrix\n */\n\n\nvar MapboxMatrix = makeService('MapboxMatrix');\nvar API_MATRIX = '/directions-matrix/v1/mapbox/{profile}/{encodedWaypoints}.json{?access_token}';\n/**\n * Compute a table of travel-time estimates between a set of waypoints.\n * Consult the [Mapbox Matrix API](https://www.mapbox.com/api-documentation/#matrix)\n * for more documentation and limits.\n *\n * @param {Array<Object>} waypoints an array of coordinate objects\n * in the form `{longitude: 0, latitude: 0}`.\n * @param {Object} [options={}] additional options meant to tune\n * the request\n * @param {string} [options.profile=driving] the directions\n * profile, which determines how to prioritize different routes.\n * Options are `'driving'`, which assumes transportation via an\n * automobile and will use highways, `'walking'`, which avoids\n * streets without sidewalks, and `'cycling'`, which prefers streets\n * with bicycle lanes and lower speed limits for transportation via\n * bicycle. The `'driving-traffic'` profile is not supported.\n * @param {Function} callback called with (err, results)\n * @returns {Promise} response\n * @example\n * var mapboxClient = new MapboxClient('ACCESSTOKEN');\n * // Without options\n * mapboxClient.getMatrix([{\n *   longitude: -122.42,\n *   latitude: 37.78\n * },\n * {\n *   longitude: -122.45,\n *   latitude: 37.91\n * },\n * {\n *   longitude: -122.48,\n *   latitude: 37.73\n * }], {\n * }, function(err, results) {\n *   console.log(results);\n * });\n *\n * // With options\n * mapboxClient.getMatrix([{\n *   longitude: -122.42,\n *   latitude: 37.78\n * },\n * {\n *   longitude: -122.45,\n *   latitude: 37.91\n * },\n * {\n *   longitude: -122.48,\n *   latitude: 37.73\n * }], { profile: 'walking' }, {\n * }, function(err, results) {\n *   console.log(results);\n * });\n *\n * // Results is an object like:\n * { durations:\n *   [ [ 0, 1196, 3977, 3415, 5196 ],\n *     [ 1207, 0, 3775, 3213, 4993 ],\n *     [ 3976, 3774, 0, 2650, 2579 ],\n *     [ 3415, 3212, 2650, 0, 3869 ],\n *     [ 5208, 5006, 2579, 3882, 0 ] ] }\n *\n * // If the coordinates include an un-routable place, then\n * // the table may contain 'null' values to indicate this, like\n * { durations:\n *   [ [ 0, 11642, 57965, null, 72782 ],\n *     [ 11642, 0, 56394, null, 69918 ],\n *     [ 57965, 56394, 0, null, 19284 ],\n *     [ null, null, null, 0, null ],\n *     [ 72782, 69918, 19284, null, 0 ] ] }\n */\n\nMapboxMatrix.prototype.getMatrix = function (waypoints, options, callback) {\n  // permit the options argument to be omitted\n  if (callback === undefined && typeof options === 'function') {\n    callback = options;\n    options = {};\n  } else if (options === undefined) {\n    options = {};\n  } // typecheck arguments\n\n\n  invariant(Array.isArray(waypoints), 'waypoints must be an array');\n  invariant(typeof options === 'object', 'options must be an object');\n  var encodedWaypoints = formatPoints(waypoints);\n  var params = {\n    encodedWaypoints: encodedWaypoints,\n    profile: 'driving'\n  };\n\n  if (options.profile) {\n    invariant(typeof options.profile === 'string', 'profile option must be string');\n    params.profile = options.profile;\n  }\n\n  return this.client({\n    path: API_MATRIX,\n    params: params,\n    callback: callback\n  });\n};\n\nmodule.exports = MapboxMatrix;","map":{"version":3,"sources":["/Users/carlin/Desktop/USC_classes/DSCI_554/project-datadocs-real/demo/node_modules/mapbox/lib/services/matrix.js"],"names":["invariant","require","formatPoints","makeService","MapboxMatrix","API_MATRIX","prototype","getMatrix","waypoints","options","callback","undefined","Array","isArray","encodedWaypoints","params","profile","client","path","module","exports"],"mappings":"AAAA;;AAEA,IAAIA,SAAS,GAAGC,OAAO,CAAC,wBAAD,CAAvB;;AACA,IAAIC,YAAY,GAAGD,OAAO,CAAC,kBAAD,CAA1B;;AACA,IAAIE,WAAW,GAAGF,OAAO,CAAC,iBAAD,CAAzB;AAEA;AACA;AACA;;;AACA,IAAIG,YAAY,GAAGD,WAAW,CAAC,cAAD,CAA9B;AAEA,IAAIE,UAAU,GAAG,+EAAjB;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEAD,YAAY,CAACE,SAAb,CAAuBC,SAAvB,GAAmC,UAASC,SAAT,EAAoBC,OAApB,EAA6BC,QAA7B,EAAuC;AAExE;AACA,MAAIA,QAAQ,KAAKC,SAAb,IAA0B,OAAOF,OAAP,KAAmB,UAAjD,EAA6D;AAC3DC,IAAAA,QAAQ,GAAGD,OAAX;AACAA,IAAAA,OAAO,GAAG,EAAV;AACD,GAHD,MAGO,IAAIA,OAAO,KAAKE,SAAhB,EAA2B;AAChCF,IAAAA,OAAO,GAAG,EAAV;AACD,GARuE,CAUxE;;;AACAT,EAAAA,SAAS,CAACY,KAAK,CAACC,OAAN,CAAcL,SAAd,CAAD,EAA2B,4BAA3B,CAAT;AACAR,EAAAA,SAAS,CAAC,OAAOS,OAAP,KAAmB,QAApB,EAA8B,2BAA9B,CAAT;AAEA,MAAIK,gBAAgB,GAAGZ,YAAY,CAACM,SAAD,CAAnC;AAEA,MAAIO,MAAM,GAAG;AACXD,IAAAA,gBAAgB,EAAEA,gBADP;AAEXE,IAAAA,OAAO,EAAE;AAFE,GAAb;;AAKA,MAAIP,OAAO,CAACO,OAAZ,EAAqB;AACnBhB,IAAAA,SAAS,CAAC,OAAOS,OAAO,CAACO,OAAf,KAA2B,QAA5B,EAAsC,+BAAtC,CAAT;AACAD,IAAAA,MAAM,CAACC,OAAP,GAAiBP,OAAO,CAACO,OAAzB;AACD;;AAED,SAAO,KAAKC,MAAL,CAAY;AACjBC,IAAAA,IAAI,EAAEb,UADW;AAEjBU,IAAAA,MAAM,EAAEA,MAFS;AAGjBL,IAAAA,QAAQ,EAAEA;AAHO,GAAZ,CAAP;AAKD,CA/BD;;AAiCAS,MAAM,CAACC,OAAP,GAAiBhB,YAAjB","sourcesContent":["'use strict';\n\nvar invariant = require('../../vendor/invariant');\nvar formatPoints = require('../format_points');\nvar makeService = require('../make_service');\n\n/**\n * @class MapboxMatrix\n */\nvar MapboxMatrix = makeService('MapboxMatrix');\n\nvar API_MATRIX = '/directions-matrix/v1/mapbox/{profile}/{encodedWaypoints}.json{?access_token}';\n\n/**\n * Compute a table of travel-time estimates between a set of waypoints.\n * Consult the [Mapbox Matrix API](https://www.mapbox.com/api-documentation/#matrix)\n * for more documentation and limits.\n *\n * @param {Array<Object>} waypoints an array of coordinate objects\n * in the form `{longitude: 0, latitude: 0}`.\n * @param {Object} [options={}] additional options meant to tune\n * the request\n * @param {string} [options.profile=driving] the directions\n * profile, which determines how to prioritize different routes.\n * Options are `'driving'`, which assumes transportation via an\n * automobile and will use highways, `'walking'`, which avoids\n * streets without sidewalks, and `'cycling'`, which prefers streets\n * with bicycle lanes and lower speed limits for transportation via\n * bicycle. The `'driving-traffic'` profile is not supported.\n * @param {Function} callback called with (err, results)\n * @returns {Promise} response\n * @example\n * var mapboxClient = new MapboxClient('ACCESSTOKEN');\n * // Without options\n * mapboxClient.getMatrix([{\n *   longitude: -122.42,\n *   latitude: 37.78\n * },\n * {\n *   longitude: -122.45,\n *   latitude: 37.91\n * },\n * {\n *   longitude: -122.48,\n *   latitude: 37.73\n * }], {\n * }, function(err, results) {\n *   console.log(results);\n * });\n *\n * // With options\n * mapboxClient.getMatrix([{\n *   longitude: -122.42,\n *   latitude: 37.78\n * },\n * {\n *   longitude: -122.45,\n *   latitude: 37.91\n * },\n * {\n *   longitude: -122.48,\n *   latitude: 37.73\n * }], { profile: 'walking' }, {\n * }, function(err, results) {\n *   console.log(results);\n * });\n *\n * // Results is an object like:\n * { durations:\n *   [ [ 0, 1196, 3977, 3415, 5196 ],\n *     [ 1207, 0, 3775, 3213, 4993 ],\n *     [ 3976, 3774, 0, 2650, 2579 ],\n *     [ 3415, 3212, 2650, 0, 3869 ],\n *     [ 5208, 5006, 2579, 3882, 0 ] ] }\n *\n * // If the coordinates include an un-routable place, then\n * // the table may contain 'null' values to indicate this, like\n * { durations:\n *   [ [ 0, 11642, 57965, null, 72782 ],\n *     [ 11642, 0, 56394, null, 69918 ],\n *     [ 57965, 56394, 0, null, 19284 ],\n *     [ null, null, null, 0, null ],\n *     [ 72782, 69918, 19284, null, 0 ] ] }\n */\n\nMapboxMatrix.prototype.getMatrix = function(waypoints, options, callback) {\n\n  // permit the options argument to be omitted\n  if (callback === undefined && typeof options === 'function') {\n    callback = options;\n    options = {};\n  } else if (options === undefined) {\n    options = {};\n  }\n\n  // typecheck arguments\n  invariant(Array.isArray(waypoints), 'waypoints must be an array');\n  invariant(typeof options === 'object', 'options must be an object');\n\n  var encodedWaypoints = formatPoints(waypoints);\n\n  var params = {\n    encodedWaypoints: encodedWaypoints,\n    profile: 'driving'\n  };\n\n  if (options.profile) {\n    invariant(typeof options.profile === 'string', 'profile option must be string');\n    params.profile = options.profile;\n  }\n\n  return this.client({\n    path: API_MATRIX,\n    params: params,\n    callback: callback\n  });\n};\n\nmodule.exports = MapboxMatrix;\n"]},"metadata":{},"sourceType":"script"}