{"ast":null,"code":"'use strict';\n\nvar invariant = require('../vendor/invariant'),\n    invariantLocation = require('./invariant_location'),\n    polyline = require('../vendor/polyline');\n/**\n * Given a list of markers, encode them for display\n * @param {Array<Object>} markers a list of markers\n * @returns {string} encoded markers\n * @private\n */\n\n\nfunction encodeMarkers(markers) {\n  return markers.map(function (marker) {\n    invariantLocation(marker);\n    var size = marker.size || 'l';\n    var symbol = marker.symbol || 'circle';\n    return 'pin-' + size + '-' + symbol + '(' + marker.longitude + ',' + marker.latitude + ')';\n  }).join(',');\n}\n\nmodule.exports.encodeMarkers = encodeMarkers;\n/**\n * Given a path and style, encode it for display\n * @param {Object} path an object of a path and style\n * @param {Object} path.geojson a GeoJSON LineString\n * @param {Object} [path.style={}] style parameters\n * @returns {string} encoded path as polyline\n * @private\n */\n\nfunction encodePath(path) {\n  invariant(path.geojson.type === 'LineString', 'path line must be a LineString');\n  var encoded = polyline.fromGeoJSON(path.geojson);\n  var style = '';\n\n  if (path.style) {\n    if (path.style.strokewidth !== undefined) style += '-' + path.style.strokewidth;\n    if (path.style.strokecolor !== undefined) style += '+' + path.style.strokecolor;\n  }\n\n  return 'path' + style + '(' + encoded + ')';\n}\n\nmodule.exports.encodePath = encodePath;\n/**\n * Given a GeoJSON object, encode it for a static map.\n * @param {Object} geojson a geojson object\n * @returns {string} encoded geojson as string\n * @private\n */\n\nfunction encodeGeoJSON(geojson) {\n  var encoded = JSON.stringify(geojson);\n  invariant(encoded.length < 4096, 'encoded GeoJSON must be shorter than 4096 characters long');\n  return 'geojson(' + encoded + ')';\n}\n\nmodule.exports.encodeGeoJSON = encodeGeoJSON;","map":{"version":3,"sources":["/Users/HHJ/Dropbox/Class/2021/DSCI554/Github/project-datadocs/demo/node_modules/mapbox/lib/encode_overlay.js"],"names":["invariant","require","invariantLocation","polyline","encodeMarkers","markers","map","marker","size","symbol","longitude","latitude","join","module","exports","encodePath","path","geojson","type","encoded","fromGeoJSON","style","strokewidth","undefined","strokecolor","encodeGeoJSON","JSON","stringify","length"],"mappings":"AAAA;;AAEA,IAAIA,SAAS,GAAGC,OAAO,CAAC,qBAAD,CAAvB;AAAA,IACEC,iBAAiB,GAAGD,OAAO,CAAC,sBAAD,CAD7B;AAAA,IAEEE,QAAQ,GAAGF,OAAO,CAAC,oBAAD,CAFpB;AAIA;AACA;AACA;AACA;AACA;AACA;;;AACA,SAASG,aAAT,CAAuBC,OAAvB,EAAgC;AAC9B,SAAOA,OAAO,CAACC,GAAR,CAAY,UAASC,MAAT,EAAiB;AAClCL,IAAAA,iBAAiB,CAACK,MAAD,CAAjB;AACA,QAAIC,IAAI,GAAGD,MAAM,CAACC,IAAP,IAAe,GAA1B;AACA,QAAIC,MAAM,GAAGF,MAAM,CAACE,MAAP,IAAiB,QAA9B;AACA,WAAO,SAASD,IAAT,GAAgB,GAAhB,GAAsBC,MAAtB,GAA+B,GAA/B,GACLF,MAAM,CAACG,SADF,GACc,GADd,GACoBH,MAAM,CAACI,QAD3B,GACsC,GAD7C;AAED,GANM,EAMJC,IANI,CAMC,GAND,CAAP;AAOD;;AAEDC,MAAM,CAACC,OAAP,CAAeV,aAAf,GAA+BA,aAA/B;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AACA,SAASW,UAAT,CAAoBC,IAApB,EAA0B;AACxBhB,EAAAA,SAAS,CAACgB,IAAI,CAACC,OAAL,CAAaC,IAAb,KAAsB,YAAvB,EAAqC,gCAArC,CAAT;AACA,MAAIC,OAAO,GAAGhB,QAAQ,CAACiB,WAAT,CAAqBJ,IAAI,CAACC,OAA1B,CAAd;AAEA,MAAII,KAAK,GAAG,EAAZ;;AACA,MAAIL,IAAI,CAACK,KAAT,EAAgB;AACd,QAAIL,IAAI,CAACK,KAAL,CAAWC,WAAX,KAA2BC,SAA/B,EAA0CF,KAAK,IAAI,MAAML,IAAI,CAACK,KAAL,CAAWC,WAA1B;AAC1C,QAAIN,IAAI,CAACK,KAAL,CAAWG,WAAX,KAA2BD,SAA/B,EAA0CF,KAAK,IAAI,MAAML,IAAI,CAACK,KAAL,CAAWG,WAA1B;AAC3C;;AACD,SAAO,SAASH,KAAT,GAAiB,GAAjB,GAAuBF,OAAvB,GAAiC,GAAxC;AACD;;AAEDN,MAAM,CAACC,OAAP,CAAeC,UAAf,GAA4BA,UAA5B;AAEA;AACA;AACA;AACA;AACA;AACA;;AACA,SAASU,aAAT,CAAuBR,OAAvB,EAAgC;AAC9B,MAAIE,OAAO,GAAGO,IAAI,CAACC,SAAL,CAAeV,OAAf,CAAd;AACAjB,EAAAA,SAAS,CAACmB,OAAO,CAACS,MAAR,GAAiB,IAAlB,EAAwB,2DAAxB,CAAT;AACA,SAAO,aAAaT,OAAb,GAAuB,GAA9B;AACD;;AAEDN,MAAM,CAACC,OAAP,CAAeW,aAAf,GAA+BA,aAA/B","sourcesContent":["'use strict';\n\nvar invariant = require('../vendor/invariant'),\n  invariantLocation = require('./invariant_location'),\n  polyline = require('../vendor/polyline');\n\n/**\n * Given a list of markers, encode them for display\n * @param {Array<Object>} markers a list of markers\n * @returns {string} encoded markers\n * @private\n */\nfunction encodeMarkers(markers) {\n  return markers.map(function(marker) {\n    invariantLocation(marker);\n    var size = marker.size || 'l';\n    var symbol = marker.symbol || 'circle';\n    return 'pin-' + size + '-' + symbol + '(' +\n      marker.longitude + ',' + marker.latitude + ')';\n  }).join(',');\n}\n\nmodule.exports.encodeMarkers = encodeMarkers;\n\n/**\n * Given a path and style, encode it for display\n * @param {Object} path an object of a path and style\n * @param {Object} path.geojson a GeoJSON LineString\n * @param {Object} [path.style={}] style parameters\n * @returns {string} encoded path as polyline\n * @private\n */\nfunction encodePath(path) {\n  invariant(path.geojson.type === 'LineString', 'path line must be a LineString');\n  var encoded = polyline.fromGeoJSON(path.geojson);\n\n  var style = '';\n  if (path.style) {\n    if (path.style.strokewidth !== undefined) style += '-' + path.style.strokewidth;\n    if (path.style.strokecolor !== undefined) style += '+' + path.style.strokecolor;\n  }\n  return 'path' + style + '(' + encoded + ')';\n}\n\nmodule.exports.encodePath = encodePath;\n\n/**\n * Given a GeoJSON object, encode it for a static map.\n * @param {Object} geojson a geojson object\n * @returns {string} encoded geojson as string\n * @private\n */\nfunction encodeGeoJSON(geojson) {\n  var encoded = JSON.stringify(geojson);\n  invariant(encoded.length < 4096, 'encoded GeoJSON must be shorter than 4096 characters long');\n  return 'geojson(' + encoded + ')';\n}\n\nmodule.exports.encodeGeoJSON = encodeGeoJSON;\n"]},"metadata":{},"sourceType":"script"}