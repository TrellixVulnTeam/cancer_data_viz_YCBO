{"ast":null,"code":"'use strict';\n\nvar invariant = require('../../vendor/invariant');\n\nvar makeService = require('../make_service');\n/**\n * @class MapboxTilestats\n */\n\n\nvar MapboxTilestats = module.exports = makeService('MapboxTilestats');\nvar API_TILESTATS_STATISTICS = '/tilestats/v1/{owner}/{tileset}{?access_token}';\n/**\n * To retrieve statistics about a specific tileset.\n *\n * @param {String} tileset - the id for the tileset\n * @param {Function} callback called with (err, tilestats)\n * @returns {Promise} response\n * @example\n * var client = new MapboxClient('ACCESSTOKEN');\n * client.getTilestats('tileset-id', function(err, info) {\n *   console.log(info);\n *   // {\n *   //   \"layerCount\": {layer count},\n *   //   \"layers\": [\n *   //     {\n *   //       \"layer\": {layer name},\n *   //       \"geometry\": {dominant geometry},\n *   //       \"count\": {feature count},\n *   //       \"attributeCount\": {attribute count}\n *   //       \"attributes\": [\n *   //         {\n *   //           \"attribute\": {attribute name},\n *   //           \"type\": {attribute type},\n *   //           \"count\": {unique value count},\n *   //           \"min\": {minimum value if type is number},\n *   //           \"max\": {maximum value if type is number},\n *   //           \"values\": [{...unique values}]\n *   //         }\n *   //       ]\n *   //     }\n *   //   ]\n *   // }\n * });\n */\n\nMapboxTilestats.prototype.getTilestats = function (tileset, callback) {\n  invariant(typeof tileset === 'string', 'tileset must be a string');\n  var owner = tileset.split('.')[0];\n  if (owner === tileset) owner = this.owner;\n  return this.client({\n    path: API_TILESTATS_STATISTICS,\n    params: {\n      owner: owner,\n      tileset: tileset\n    },\n    callback: callback\n  });\n};\n/**\n * To create or update statistics about a specific tileset.\n *\n * @param {String} tileset - the id for the tileset\n * @param {object} statistics - the statistics to upload\n * @param {Function} callback called with (err, tilestats)\n * @returns {Promise} response\n * @example\n * var client = new MapboxClient('ACCESSTOKEN');\n * client.getTilestats('tileset-id', function(err, stats) {\n *   console.log(stats);\n *   // {\n *   //   \"account\": {account}\n *   //   ... see stats example above (for Tilestats#getTilestats)\n *   // }\n * });\n */\n\n\nMapboxTilestats.prototype.putTilestats = function (tileset, statistics, callback) {\n  invariant(typeof tileset === 'string', 'tileset must be a string');\n  var owner = tileset.split('.')[0];\n  if (owner === tileset) owner = this.owner;\n  return this.client({\n    path: API_TILESTATS_STATISTICS,\n    params: {\n      owner: owner,\n      tileset: tileset\n    },\n    entity: statistics,\n    method: 'put',\n    callback: callback\n  });\n};","map":{"version":3,"sources":["/Users/carlin/Desktop/USC_classes/DSCI_554/project-datadocs-real/demo/node_modules/mapbox/lib/services/tilestats.js"],"names":["invariant","require","makeService","MapboxTilestats","module","exports","API_TILESTATS_STATISTICS","prototype","getTilestats","tileset","callback","owner","split","client","path","params","putTilestats","statistics","entity","method"],"mappings":"AAAA;;AAEA,IAAIA,SAAS,GAAGC,OAAO,CAAC,wBAAD,CAAvB;;AACA,IAAIC,WAAW,GAAGD,OAAO,CAAC,iBAAD,CAAzB;AAEA;AACA;AACA;;;AACA,IAAIE,eAAe,GAAGC,MAAM,CAACC,OAAP,GAAiBH,WAAW,CAAC,iBAAD,CAAlD;AAEA,IAAII,wBAAwB,GAAG,gDAA/B;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AACAH,eAAe,CAACI,SAAhB,CAA0BC,YAA1B,GAAyC,UAASC,OAAT,EAAkBC,QAAlB,EAA4B;AACnEV,EAAAA,SAAS,CAAC,OAAOS,OAAP,KAAmB,QAApB,EAA8B,0BAA9B,CAAT;AAEA,MAAIE,KAAK,GAAGF,OAAO,CAACG,KAAR,CAAc,GAAd,EAAmB,CAAnB,CAAZ;AACA,MAAID,KAAK,KAAKF,OAAd,EAAuBE,KAAK,GAAG,KAAKA,KAAb;AAEvB,SAAO,KAAKE,MAAL,CAAY;AACjBC,IAAAA,IAAI,EAAER,wBADW;AAEjBS,IAAAA,MAAM,EAAE;AACNJ,MAAAA,KAAK,EAAEA,KADD;AAENF,MAAAA,OAAO,EAAEA;AAFH,KAFS;AAMjBC,IAAAA,QAAQ,EAAEA;AANO,GAAZ,CAAP;AAQD,CAdD;AAiBA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;AACAP,eAAe,CAACI,SAAhB,CAA0BS,YAA1B,GAAyC,UAASP,OAAT,EAAkBQ,UAAlB,EAA8BP,QAA9B,EAAwC;AAC/EV,EAAAA,SAAS,CAAC,OAAOS,OAAP,KAAmB,QAApB,EAA8B,0BAA9B,CAAT;AAEA,MAAIE,KAAK,GAAGF,OAAO,CAACG,KAAR,CAAc,GAAd,EAAmB,CAAnB,CAAZ;AACA,MAAID,KAAK,KAAKF,OAAd,EAAuBE,KAAK,GAAG,KAAKA,KAAb;AAEvB,SAAO,KAAKE,MAAL,CAAY;AACjBC,IAAAA,IAAI,EAAER,wBADW;AAEjBS,IAAAA,MAAM,EAAE;AACNJ,MAAAA,KAAK,EAAEA,KADD;AAENF,MAAAA,OAAO,EAAEA;AAFH,KAFS;AAMjBS,IAAAA,MAAM,EAAED,UANS;AAOjBE,IAAAA,MAAM,EAAE,KAPS;AAQjBT,IAAAA,QAAQ,EAAEA;AARO,GAAZ,CAAP;AAUD,CAhBD","sourcesContent":["'use strict';\n\nvar invariant = require('../../vendor/invariant');\nvar makeService = require('../make_service');\n\n/**\n * @class MapboxTilestats\n */\nvar MapboxTilestats = module.exports = makeService('MapboxTilestats');\n\nvar API_TILESTATS_STATISTICS = '/tilestats/v1/{owner}/{tileset}{?access_token}';\n\n/**\n * To retrieve statistics about a specific tileset.\n *\n * @param {String} tileset - the id for the tileset\n * @param {Function} callback called with (err, tilestats)\n * @returns {Promise} response\n * @example\n * var client = new MapboxClient('ACCESSTOKEN');\n * client.getTilestats('tileset-id', function(err, info) {\n *   console.log(info);\n *   // {\n *   //   \"layerCount\": {layer count},\n *   //   \"layers\": [\n *   //     {\n *   //       \"layer\": {layer name},\n *   //       \"geometry\": {dominant geometry},\n *   //       \"count\": {feature count},\n *   //       \"attributeCount\": {attribute count}\n *   //       \"attributes\": [\n *   //         {\n *   //           \"attribute\": {attribute name},\n *   //           \"type\": {attribute type},\n *   //           \"count\": {unique value count},\n *   //           \"min\": {minimum value if type is number},\n *   //           \"max\": {maximum value if type is number},\n *   //           \"values\": [{...unique values}]\n *   //         }\n *   //       ]\n *   //     }\n *   //   ]\n *   // }\n * });\n */\nMapboxTilestats.prototype.getTilestats = function(tileset, callback) {\n  invariant(typeof tileset === 'string', 'tileset must be a string');\n\n  var owner = tileset.split('.')[0];\n  if (owner === tileset) owner = this.owner;\n\n  return this.client({\n    path: API_TILESTATS_STATISTICS,\n    params: {\n      owner: owner,\n      tileset: tileset\n    },\n    callback: callback\n  });\n};\n\n\n/**\n * To create or update statistics about a specific tileset.\n *\n * @param {String} tileset - the id for the tileset\n * @param {object} statistics - the statistics to upload\n * @param {Function} callback called with (err, tilestats)\n * @returns {Promise} response\n * @example\n * var client = new MapboxClient('ACCESSTOKEN');\n * client.getTilestats('tileset-id', function(err, stats) {\n *   console.log(stats);\n *   // {\n *   //   \"account\": {account}\n *   //   ... see stats example above (for Tilestats#getTilestats)\n *   // }\n * });\n */\nMapboxTilestats.prototype.putTilestats = function(tileset, statistics, callback) {\n  invariant(typeof tileset === 'string', 'tileset must be a string');\n\n  var owner = tileset.split('.')[0];\n  if (owner === tileset) owner = this.owner;\n\n  return this.client({\n    path: API_TILESTATS_STATISTICS,\n    params: {\n      owner: owner,\n      tileset: tileset\n    },\n    entity: statistics,\n    method: 'put',\n    callback: callback\n  });\n};\n"]},"metadata":{},"sourceType":"script"}