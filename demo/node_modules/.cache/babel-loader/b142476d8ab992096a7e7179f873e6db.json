{"ast":null,"code":"'use strict';\n\nvar invariant = require('../../vendor/invariant');\n\nvar makeService = require('../make_service');\n/**\n * @class MapboxTilesets\n */\n\n\nvar MapboxTilesets = module.exports = makeService('MapboxTilesets');\nvar API_TILESETS_TILEQUERY = '/v4/{mapid}/tilequery/{longitude},{latitude}.json{?access_token,radius,limit}';\nvar API_TILESETS_LIST = '/tilesets/v1/{owner}{?access_token,limit}';\n/**\n * Retrieve data about specific vector features at a specified location within a vector tileset\n *\n * @param {String} mapid Map ID of the tileset to query (eg. mapbox.mapbox-streets-v7)\n * @param {Array} position An array in the form [longitude, latitude] of the position to query\n * @param {Object} [options] optional options\n * @param {Number} options.radius Approximate distance in meters to query for features\n * @param {Number} options.limit Number of features between 1-50 to return\n * @param {Function} [callback] called with (err, results, response)\n * @returns {Promise} response\n * @example\n * var MapboxClient = require('mapbox');\n * var client = new MapboxClient('ACCESSTOKEN');\n * client.tilequery('mapbox.mapbox-streets-v7', [-77, 38], {}, function(err, response) {\n *   console.log(response);\n * });\n */\n\nMapboxTilesets.prototype.tilequery = function (mapid, position, options, callback) {\n  invariant(typeof mapid === 'string', 'mapid must be a string');\n  invariant(typeof position === 'object', 'position must be an array');\n  invariant(position.length == 2, 'position must be an array of length 2');\n  invariant(typeof position[0] === 'number' && typeof position[1] === 'number', 'position must be an array of two numbers');\n\n  if (typeof options === 'function') {\n    callback = options;\n    options = {};\n  }\n\n  return this.client({\n    path: API_TILESETS_TILEQUERY,\n    params: {\n      mapid: mapid,\n      longitude: position[0],\n      latitude: position[1],\n      radius: options.radius,\n      limit: options.limit\n    },\n    callback: callback\n  });\n};\n/**\n * Retrieve all tilesets\n *\n * @param {Object} [options] optional options\n * @param {Number} options.limit Maximum Number of tilesets to return\n * @param {Function} [callback] called with (err, tilesets, response)\n * @returns {Promise} response\n * @example\n * var MapboxClient = require('mapbox');\n * var client = new MapboxClient('ACCESSTOKEN');\n * client.listTilesets(function(err, tilesets) {\n *   console.log(tilesets);\n * });\n */\n\n\nMapboxTilesets.prototype.listTilesets = function (options, callback) {\n  if (typeof options === 'function') {\n    callback = options;\n    options = null;\n  }\n\n  options = options || {};\n  return this.client({\n    path: API_TILESETS_LIST,\n    params: {\n      owner: this.owner,\n      limit: options.limit\n    },\n    callback: callback\n  });\n};","map":{"version":3,"sources":["/Users/HHJ/Dropbox/Class/2021/DSCI554/Github/project-datadocs/demo/node_modules/mapbox/lib/services/tilesets.js"],"names":["invariant","require","makeService","MapboxTilesets","module","exports","API_TILESETS_TILEQUERY","API_TILESETS_LIST","prototype","tilequery","mapid","position","options","callback","length","client","path","params","longitude","latitude","radius","limit","listTilesets","owner"],"mappings":"AAAA;;AAEA,IAAIA,SAAS,GAAGC,OAAO,CAAC,wBAAD,CAAvB;;AACA,IAAIC,WAAW,GAAGD,OAAO,CAAC,iBAAD,CAAzB;AAEA;AACA;AACA;;;AACA,IAAIE,cAAc,GAAGC,MAAM,CAACC,OAAP,GAAiBH,WAAW,CAAC,gBAAD,CAAjD;AAEA,IAAII,sBAAsB,GAAG,+EAA7B;AACA,IAAIC,iBAAiB,GAAG,2CAAxB;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AACAJ,cAAc,CAACK,SAAf,CAAyBC,SAAzB,GAAqC,UAASC,KAAT,EAAgBC,QAAhB,EAA0BC,OAA1B,EAAmCC,QAAnC,EAA6C;AAChFb,EAAAA,SAAS,CAAC,OAAOU,KAAP,KAAiB,QAAlB,EAA4B,wBAA5B,CAAT;AACAV,EAAAA,SAAS,CAAC,OAAOW,QAAP,KAAoB,QAArB,EAA+B,2BAA/B,CAAT;AACAX,EAAAA,SAAS,CAACW,QAAQ,CAACG,MAAT,IAAmB,CAApB,EAAuB,uCAAvB,CAAT;AACAd,EAAAA,SAAS,CAAC,OAAOW,QAAQ,CAAC,CAAD,CAAf,KAAuB,QAAvB,IAAmC,OAAOA,QAAQ,CAAC,CAAD,CAAf,KAAuB,QAA3D,EAAqE,0CAArE,CAAT;;AAEA,MAAI,OAAOC,OAAP,KAAmB,UAAvB,EAAmC;AACjCC,IAAAA,QAAQ,GAAGD,OAAX;AACAA,IAAAA,OAAO,GAAG,EAAV;AACD;;AAED,SAAO,KAAKG,MAAL,CAAY;AACjBC,IAAAA,IAAI,EAAEV,sBADW;AAEjBW,IAAAA,MAAM,EAAE;AACNP,MAAAA,KAAK,EAAEA,KADD;AAENQ,MAAAA,SAAS,EAAEP,QAAQ,CAAC,CAAD,CAFb;AAGNQ,MAAAA,QAAQ,EAAER,QAAQ,CAAC,CAAD,CAHZ;AAINS,MAAAA,MAAM,EAAER,OAAO,CAACQ,MAJV;AAKNC,MAAAA,KAAK,EAAET,OAAO,CAACS;AALT,KAFS;AASjBR,IAAAA,QAAQ,EAAEA;AATO,GAAZ,CAAP;AAWD,CAtBD;AAwBA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;AACAV,cAAc,CAACK,SAAf,CAAyBc,YAAzB,GAAwC,UAASV,OAAT,EAAkBC,QAAlB,EAA4B;AAClE,MAAI,OAAOD,OAAP,KAAmB,UAAvB,EAAmC;AACjCC,IAAAA,QAAQ,GAAGD,OAAX;AACAA,IAAAA,OAAO,GAAG,IAAV;AACD;;AACDA,EAAAA,OAAO,GAAGA,OAAO,IAAI,EAArB;AAEA,SAAO,KAAKG,MAAL,CAAY;AACjBC,IAAAA,IAAI,EAAET,iBADW;AAEjBU,IAAAA,MAAM,EAAE;AACNM,MAAAA,KAAK,EAAE,KAAKA,KADN;AAENF,MAAAA,KAAK,EAAET,OAAO,CAACS;AAFT,KAFS;AAMjBR,IAAAA,QAAQ,EAAEA;AANO,GAAZ,CAAP;AAQD,CAfD","sourcesContent":["'use strict';\n\nvar invariant = require('../../vendor/invariant');\nvar makeService = require('../make_service');\n\n/**\n * @class MapboxTilesets\n */\nvar MapboxTilesets = module.exports = makeService('MapboxTilesets');\n\nvar API_TILESETS_TILEQUERY = '/v4/{mapid}/tilequery/{longitude},{latitude}.json{?access_token,radius,limit}';\nvar API_TILESETS_LIST = '/tilesets/v1/{owner}{?access_token,limit}';\n\n/**\n * Retrieve data about specific vector features at a specified location within a vector tileset\n *\n * @param {String} mapid Map ID of the tileset to query (eg. mapbox.mapbox-streets-v7)\n * @param {Array} position An array in the form [longitude, latitude] of the position to query\n * @param {Object} [options] optional options\n * @param {Number} options.radius Approximate distance in meters to query for features\n * @param {Number} options.limit Number of features between 1-50 to return\n * @param {Function} [callback] called with (err, results, response)\n * @returns {Promise} response\n * @example\n * var MapboxClient = require('mapbox');\n * var client = new MapboxClient('ACCESSTOKEN');\n * client.tilequery('mapbox.mapbox-streets-v7', [-77, 38], {}, function(err, response) {\n *   console.log(response);\n * });\n */\nMapboxTilesets.prototype.tilequery = function(mapid, position, options, callback) {\n  invariant(typeof mapid === 'string', 'mapid must be a string');\n  invariant(typeof position === 'object', 'position must be an array');\n  invariant(position.length == 2, 'position must be an array of length 2');\n  invariant(typeof position[0] === 'number' && typeof position[1] === 'number', 'position must be an array of two numbers');\n\n  if (typeof options === 'function') {\n    callback = options;\n    options = {};\n  }\n\n  return this.client({\n    path: API_TILESETS_TILEQUERY,\n    params: {\n      mapid: mapid,\n      longitude: position[0],\n      latitude: position[1],\n      radius: options.radius,\n      limit: options.limit\n    },\n    callback: callback\n  });\n};\n\n/**\n * Retrieve all tilesets\n *\n * @param {Object} [options] optional options\n * @param {Number} options.limit Maximum Number of tilesets to return\n * @param {Function} [callback] called with (err, tilesets, response)\n * @returns {Promise} response\n * @example\n * var MapboxClient = require('mapbox');\n * var client = new MapboxClient('ACCESSTOKEN');\n * client.listTilesets(function(err, tilesets) {\n *   console.log(tilesets);\n * });\n */\nMapboxTilesets.prototype.listTilesets = function(options, callback) {\n  if (typeof options === 'function') {\n    callback = options;\n    options = null;\n  }\n  options = options || {};\n\n  return this.client({\n    path: API_TILESETS_LIST,\n    params: {\n      owner: this.owner,\n      limit: options.limit\n    },\n    callback: callback\n  });\n};\n"]},"metadata":{},"sourceType":"script"}