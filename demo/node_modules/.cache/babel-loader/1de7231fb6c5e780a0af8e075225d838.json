{"ast":null,"code":"'use strict';\n\nvar invariant = require('../../vendor/invariant');\n\nvar uriTemplate = require('rest/util/uriTemplate');\n\nvar makeService = require('../make_service');\n/**\n * @class MapboxStyles\n */\n\n\nvar MapboxStyles = module.exports = makeService('MapboxStyles');\nvar API_STYLES_LIST = '/styles/v1/{owner}{?access_token}';\nvar API_STYLES_CREATE = '/styles/v1/{owner}{?access_token}';\nvar API_STYLES_READ = '/styles/v1/{owner}/{styleid}{?access_token}';\nvar API_STYLES_UPDATE = '/styles/v1/{owner}/{styleid}{?access_token}';\nvar API_STYLES_DELETE = '/styles/v1/{owner}/{styleid}{?access_token}';\nvar API_STYLES_EMBED = '/styles/v1/{owner}/{styleid}.html{?access_token,zoomwheel,title}';\nvar API_STYLES_SPRITE = '/styles/v1/{owner}/{styleid}/sprite{+retina}{.format}{?access_token}';\nvar API_STYLES_SPRITE_ICON = '/styles/v1/{owner}/{styleid}/sprite/{iconName}{?access_token}';\nvar API_STYLES_FONT_GLYPH_RANGES = '/fonts/v1/{owner}/{font}/{start}-{end}.pbf{?access_token}';\n/**\n * To retrieve a listing of styles for a particular account.\n *\n * @param {Function} callback called with (err, styles)\n * @returns {Promise} response\n * @example\n * var MapboxClient = require('mapbox');\n * var client = new MapboxClient('ACCESSTOKEN');\n * client.listStyles(function(err, styles) {\n *   console.log(styles);\n *   // [{ version: 8,\n *   //  name: 'Light',\n *   //  center: [ -77.0469979435026, 38.898634927602814 ],\n *   //  zoom: 12.511766533145998,\n *   //  bearing: 0,\n *   //  pitch: 0,\n *   //  created: '2016-02-09T14:26:15.059Z',\n *   //  id: 'STYLEID',\n *   //  modified: '2016-02-09T14:28:31.253Z',\n *   //  owner: '{username}' },\n *   //  { version: 8,\n *   //  name: 'Dark',\n *   //  created: '2015-08-28T18:05:22.517Z',\n *   //  id: 'STYILEID',\n *   //  modified: '2015-08-28T18:05:22.517Z',\n *   //  owner: '{username}' }]\n * });\n */\n\nMapboxStyles.prototype.listStyles = function (callback) {\n  return this.client({\n    path: API_STYLES_LIST,\n    params: {\n      owner: this.owner\n    },\n    callback: callback\n  });\n};\n/**\n * Create a style, given the style as a JSON object.\n *\n * @param {Object} style Mapbox GL Style Spec object\n * @param {Function} callback called with (err, createdStyle)\n * @returns {Promise} response\n * @example\n * var MapboxClient = require('mapbox');\n * var client = new MapboxClient('ACCESSTOKEN');\n * var style = {\n *   'version': 8,\n *   'name': 'My Awesome Style',\n *   'metadata': {},\n *   'sources': {},\n *   'layers': [],\n *   'glyphs': 'mapbox://fonts/{owner}/{fontstack}/{range}.pbf'\n * };\n * client.createStyle(style, function(err, createdStyle) {\n *   console.log(createdStyle);\n * });\n */\n\n\nMapboxStyles.prototype.createStyle = function (style, callback) {\n  return this.client({\n    path: API_STYLES_CREATE,\n    params: {\n      owner: this.owner\n    },\n    entity: style,\n    callback: callback\n  });\n};\n/**\n * Update a style, given the style as a JSON object.\n *\n * @param {Object} style Mapbox GL Style Spec object\n * @param {string} styleid style id\n * @param {Function} callback called with (err, createdStyle)\n * @returns {Promise} response\n * @example\n * var MapboxClient = require('mapbox');\n * var client = new MapboxClient('ACCESSTOKEN');\n * var style = {\n *   'version': 8,\n *   'name': 'My Awesome Style',\n *   'metadata': {},\n *   'sources': {},\n *   'layers': [],\n *   'glyphs': 'mapbox://fonts/{owner}/{fontstack}/{range}.pbf'\n * };\n * client.updateStyle(style, 'style-id', function(err, createdStyle) {\n *   console.log(createdStyle);\n * });\n */\n\n\nMapboxStyles.prototype.updateStyle = function (style, styleid, callback) {\n  invariant(typeof styleid === 'string', 'style id must be a string');\n  return this.client({\n    path: API_STYLES_UPDATE,\n    params: {\n      owner: this.owner,\n      styleid: styleid\n    },\n    entity: style,\n    method: 'patch',\n    callback: callback\n  });\n};\n/**\n * Deletes a particular style.\n *\n * @param {string} styleid the id for an existing style\n * @param {Function} callback called with (err)\n * @returns {Promise} a promise with the response\n * @example\n * var MapboxClient = require('mapbox');\n * var client = new MapboxClient('ACCESSTOKEN');\n * client.deleteStyle('style-id', function(err) {\n *   if (!err) console.log('deleted!');\n * });\n */\n\n\nMapboxStyles.prototype.deleteStyle = function (styleid, callback) {\n  invariant(typeof styleid === 'string', 'styleid must be a string');\n  return this.client({\n    path: API_STYLES_DELETE,\n    params: {\n      owner: this.owner,\n      styleid: styleid\n    },\n    method: 'delete',\n    callback: callback\n  });\n};\n/**\n * Reads a particular style.\n *\n * @param {string} styleid the id for an existing style\n * @param {Function} callback called with (err, style)\n * @returns {Promise} response\n * @example\n * var MapboxClient = require('mapbox');\n * var client = new MapboxClient('ACCESSTOKEN');\n * client.readStyle('style-id', function(err, style) {\n *   if (!err) console.log(style);\n * });\n */\n\n\nMapboxStyles.prototype.readStyle = function (styleid, callback) {\n  invariant(typeof styleid === 'string', 'styleid must be a string');\n  return this.client({\n    path: API_STYLES_READ,\n    params: {\n      owner: this.owner,\n      styleid: styleid\n    },\n    callback: callback\n  });\n};\n/**\n * Read sprite\n *\n * @param {string} styleid the id for an existing style\n * @param {Object=} options optional options\n * @param {boolean} options.retina whether the sprite JSON should be for a\n * retina sprite.\n * @param {Function} callback called with (err)\n * @returns {Promise} response\n * @example\n * var MapboxClient = require('mapbox');\n * var client = new MapboxClient('ACCESSTOKEN');\n * client.readSprite('style-id', {\n *   retina: true\n * }, function(err) {\n *   if (!err) console.log('deleted!');\n * });\n */\n\n\nMapboxStyles.prototype.readSprite = function (styleid, options, callback) {\n  invariant(typeof styleid === 'string', 'styleid must be a string');\n\n  if (typeof options === 'function') {\n    callback = options;\n    options = {};\n  }\n\n  var retina = '';\n\n  if (options.retina) {\n    invariant(typeof options.retina === 'boolean', 'retina option must be a boolean value');\n\n    if (options.retina) {\n      retina = '@2x';\n    }\n  }\n\n  var format = 'json';\n\n  if (options.format) {\n    invariant(options.format === 'json' || options.format === 'png', 'format parameter must be either json or png');\n    format = options.format;\n  }\n\n  return this.client({\n    path: API_STYLES_SPRITE,\n    params: {\n      owner: this.owner,\n      retina: retina,\n      format: format,\n      styleid: styleid\n    },\n    callback: callback\n  });\n};\n/**\n * Get font glyph ranges\n *\n * @param {string} font or fonts\n * @param {number} start character code of starting glyph\n * @param {number} end character code of last glyph. typically the same\n * as start + 255\n * @param {Function} callback called with (err)\n * @returns {Promise} response\n * @example\n * var MapboxClient = require('mapbox');\n * var client = new MapboxClient('ACCESSTOKEN');\n * client.readFontGlyphRanges('Arial Unicode', 0, 255, function(err, ranges) {\n *   if (!err) console.log(ranges);\n * });\n */\n\n\nMapboxStyles.prototype.readFontGlyphRanges = function (font, start, end, callback) {\n  invariant(typeof font === 'string', 'font must be a string');\n  invariant(typeof start === 'number', 'start must be a number');\n  invariant(typeof end === 'number', 'end must be a number');\n  return this.client({\n    path: API_STYLES_FONT_GLYPH_RANGES,\n    params: {\n      owner: this.owner,\n      font: font,\n      start: start,\n      end: end\n    },\n    callback: callback\n  });\n};\n/**\n * Add an icon to a sprite.\n *\n * @param {string} styleid the id for an existing style\n * @param {string} iconName icon's name\n * @param {Buffer} icon icon content as a buffer\n * @param {Function} callback called with (err)\n * @returns {Promise} response\n * @example\n * var MapboxClient = require('mapbox');\n * var fs = require('fs');\n * var client = new MapboxClient('ACCESSTOKEN');\n * client.addIcon('style-id', 'icon-name', fs.readFileSync('icon.png'), function(err) {\n *   if (!err) console.log('added icon!');\n * });\n */\n\n\nMapboxStyles.prototype.addIcon = function (styleid, iconName, icon, callback) {\n  invariant(typeof styleid === 'string', 'style must be a string');\n  invariant(typeof iconName === 'string', 'icon name must be a string');\n  invariant(Buffer.isBuffer(icon), 'icon must be a Buffer');\n  return this.client({\n    path: API_STYLES_SPRITE_ICON,\n    params: {\n      owner: this.owner,\n      styleid: styleid,\n      iconName: iconName\n    },\n    headers: {\n      'Content-Type': 'text/plain'\n    },\n    entity: icon,\n    method: 'put',\n    callback: callback\n  });\n};\n/**\n * Delete an icon from a sprite.\n *\n * @param {string} styleid the id for an existing style\n * @param {string} iconName icon's name\n * @param {Function} callback called with (err)\n * @returns {Promise} response\n * @example\n * var MapboxClient = require('mapbox');\n * var client = new MapboxClient('ACCESSTOKEN');\n * client.deleteIcon('style-id', 'icon-name', function(err) {\n *   if (!err) console.log('deleted icon!');\n * });\n */\n\n\nMapboxStyles.prototype.deleteIcon = function (styleid, iconName, callback) {\n  invariant(typeof styleid === 'string', 'style must be a string');\n  invariant(typeof iconName === 'string', 'icon name must be a string');\n  return this.client({\n    path: API_STYLES_SPRITE_ICON,\n    params: {\n      owner: this.owner,\n      styleid: styleid,\n      iconName: iconName\n    },\n    method: 'delete',\n    callback: callback\n  });\n};\n/**\n * Embed a style.\n *\n * @param {string} styleid the id for an existing style\n * @param {Object} options optional params\n * @param {boolean} [options.title=false] If true, shows a title box in upper right\n * corner with map title and owner\n * @param {boolean} [options.zoomwheel=true] Disables zooming with mouse scroll wheel\n * @returns {string} URL of style embed page\n * @example\n * var MapboxClient = require('mapbox');\n * var client = new MapboxClient('ACCESSTOKEN');\n * var url = client.embedStyle('style-id');\n */\n\n\nMapboxStyles.prototype.embedStyle = function (styleid, options) {\n  invariant(typeof styleid === 'string', 'style must be a string');\n  var params = {\n    styleid: styleid,\n    access_token: this.accessToken,\n    owner: this.owner,\n    title: false,\n    zoomwheel: true\n  };\n\n  if (options) {\n    if (options.title !== undefined) {\n      invariant(typeof options.title === 'boolean', 'title must be a boolean');\n      params.title = options.title;\n    }\n\n    if (options.zoomwheel !== undefined) {\n      invariant(typeof options.zoomwheel === 'boolean', 'zoomwheel must be a boolean');\n      params.zoomwheel = options.zoomwheel;\n    }\n  }\n\n  return this.endpoint + uriTemplate.expand(API_STYLES_EMBED, params);\n};","map":{"version":3,"sources":["/Users/carlin/Desktop/USC_classes/DSCI_554/project-datadocs-real/demo/node_modules/mapbox/lib/services/styles.js"],"names":["invariant","require","uriTemplate","makeService","MapboxStyles","module","exports","API_STYLES_LIST","API_STYLES_CREATE","API_STYLES_READ","API_STYLES_UPDATE","API_STYLES_DELETE","API_STYLES_EMBED","API_STYLES_SPRITE","API_STYLES_SPRITE_ICON","API_STYLES_FONT_GLYPH_RANGES","prototype","listStyles","callback","client","path","params","owner","createStyle","style","entity","updateStyle","styleid","method","deleteStyle","readStyle","readSprite","options","retina","format","readFontGlyphRanges","font","start","end","addIcon","iconName","icon","Buffer","isBuffer","headers","deleteIcon","embedStyle","access_token","accessToken","title","zoomwheel","undefined","endpoint","expand"],"mappings":"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","sourcesContent":["'use strict';\n\nvar invariant = require('../../vendor/invariant');\nvar uriTemplate = require('rest/util/uriTemplate');\nvar makeService = require('../make_service');\n\n/**\n * @class MapboxStyles\n */\nvar MapboxStyles = module.exports = makeService('MapboxStyles');\n\nvar API_STYLES_LIST = '/styles/v1/{owner}{?access_token}';\nvar API_STYLES_CREATE = '/styles/v1/{owner}{?access_token}';\nvar API_STYLES_READ = '/styles/v1/{owner}/{styleid}{?access_token}';\nvar API_STYLES_UPDATE = '/styles/v1/{owner}/{styleid}{?access_token}';\nvar API_STYLES_DELETE = '/styles/v1/{owner}/{styleid}{?access_token}';\nvar API_STYLES_EMBED = '/styles/v1/{owner}/{styleid}.html{?access_token,zoomwheel,title}';\nvar API_STYLES_SPRITE = '/styles/v1/{owner}/{styleid}/sprite{+retina}{.format}{?access_token}';\nvar API_STYLES_SPRITE_ICON = '/styles/v1/{owner}/{styleid}/sprite/{iconName}{?access_token}';\nvar API_STYLES_FONT_GLYPH_RANGES = '/fonts/v1/{owner}/{font}/{start}-{end}.pbf{?access_token}';\n\n/**\n * To retrieve a listing of styles for a particular account.\n *\n * @param {Function} callback called with (err, styles)\n * @returns {Promise} response\n * @example\n * var MapboxClient = require('mapbox');\n * var client = new MapboxClient('ACCESSTOKEN');\n * client.listStyles(function(err, styles) {\n *   console.log(styles);\n *   // [{ version: 8,\n *   //  name: 'Light',\n *   //  center: [ -77.0469979435026, 38.898634927602814 ],\n *   //  zoom: 12.511766533145998,\n *   //  bearing: 0,\n *   //  pitch: 0,\n *   //  created: '2016-02-09T14:26:15.059Z',\n *   //  id: 'STYLEID',\n *   //  modified: '2016-02-09T14:28:31.253Z',\n *   //  owner: '{username}' },\n *   //  { version: 8,\n *   //  name: 'Dark',\n *   //  created: '2015-08-28T18:05:22.517Z',\n *   //  id: 'STYILEID',\n *   //  modified: '2015-08-28T18:05:22.517Z',\n *   //  owner: '{username}' }]\n * });\n */\nMapboxStyles.prototype.listStyles = function(callback) {\n  return this.client({\n    path: API_STYLES_LIST,\n    params: {\n      owner: this.owner\n    },\n    callback: callback\n  });\n};\n\n/**\n * Create a style, given the style as a JSON object.\n *\n * @param {Object} style Mapbox GL Style Spec object\n * @param {Function} callback called with (err, createdStyle)\n * @returns {Promise} response\n * @example\n * var MapboxClient = require('mapbox');\n * var client = new MapboxClient('ACCESSTOKEN');\n * var style = {\n *   'version': 8,\n *   'name': 'My Awesome Style',\n *   'metadata': {},\n *   'sources': {},\n *   'layers': [],\n *   'glyphs': 'mapbox://fonts/{owner}/{fontstack}/{range}.pbf'\n * };\n * client.createStyle(style, function(err, createdStyle) {\n *   console.log(createdStyle);\n * });\n */\nMapboxStyles.prototype.createStyle = function(style, callback) {\n  return this.client({\n    path: API_STYLES_CREATE,\n    params: {\n      owner: this.owner\n    },\n    entity: style,\n    callback: callback\n  });\n};\n\n/**\n * Update a style, given the style as a JSON object.\n *\n * @param {Object} style Mapbox GL Style Spec object\n * @param {string} styleid style id\n * @param {Function} callback called with (err, createdStyle)\n * @returns {Promise} response\n * @example\n * var MapboxClient = require('mapbox');\n * var client = new MapboxClient('ACCESSTOKEN');\n * var style = {\n *   'version': 8,\n *   'name': 'My Awesome Style',\n *   'metadata': {},\n *   'sources': {},\n *   'layers': [],\n *   'glyphs': 'mapbox://fonts/{owner}/{fontstack}/{range}.pbf'\n * };\n * client.updateStyle(style, 'style-id', function(err, createdStyle) {\n *   console.log(createdStyle);\n * });\n */\nMapboxStyles.prototype.updateStyle = function(style, styleid, callback) {\n  invariant(typeof styleid === 'string', 'style id must be a string');\n  return this.client({\n    path: API_STYLES_UPDATE,\n    params: {\n      owner: this.owner,\n      styleid: styleid\n    },\n    entity: style,\n    method: 'patch',\n    callback: callback\n  });\n};\n\n/**\n * Deletes a particular style.\n *\n * @param {string} styleid the id for an existing style\n * @param {Function} callback called with (err)\n * @returns {Promise} a promise with the response\n * @example\n * var MapboxClient = require('mapbox');\n * var client = new MapboxClient('ACCESSTOKEN');\n * client.deleteStyle('style-id', function(err) {\n *   if (!err) console.log('deleted!');\n * });\n */\nMapboxStyles.prototype.deleteStyle = function(styleid, callback) {\n  invariant(typeof styleid === 'string', 'styleid must be a string');\n\n  return this.client({\n    path: API_STYLES_DELETE,\n    params: {\n      owner: this.owner,\n      styleid: styleid\n    },\n    method: 'delete',\n    callback: callback\n  });\n};\n\n/**\n * Reads a particular style.\n *\n * @param {string} styleid the id for an existing style\n * @param {Function} callback called with (err, style)\n * @returns {Promise} response\n * @example\n * var MapboxClient = require('mapbox');\n * var client = new MapboxClient('ACCESSTOKEN');\n * client.readStyle('style-id', function(err, style) {\n *   if (!err) console.log(style);\n * });\n */\nMapboxStyles.prototype.readStyle = function(styleid, callback) {\n  invariant(typeof styleid === 'string', 'styleid must be a string');\n\n  return this.client({\n    path: API_STYLES_READ,\n    params: {\n      owner: this.owner,\n      styleid: styleid\n    },\n    callback: callback\n  });\n};\n\n/**\n * Read sprite\n *\n * @param {string} styleid the id for an existing style\n * @param {Object=} options optional options\n * @param {boolean} options.retina whether the sprite JSON should be for a\n * retina sprite.\n * @param {Function} callback called with (err)\n * @returns {Promise} response\n * @example\n * var MapboxClient = require('mapbox');\n * var client = new MapboxClient('ACCESSTOKEN');\n * client.readSprite('style-id', {\n *   retina: true\n * }, function(err) {\n *   if (!err) console.log('deleted!');\n * });\n */\nMapboxStyles.prototype.readSprite = function(styleid, options, callback) {\n  invariant(typeof styleid === 'string', 'styleid must be a string');\n\n  if (typeof options === 'function') {\n    callback = options;\n    options = {};\n  }\n\n  var retina = '';\n  if (options.retina) {\n    invariant(typeof options.retina === 'boolean',\n      'retina option must be a boolean value');\n    if (options.retina) {\n      retina = '@2x';\n    }\n  }\n\n  var format = 'json';\n  if (options.format) {\n    invariant(options.format === 'json' ||\n      options.format === 'png',\n      'format parameter must be either json or png');\n    format = options.format;\n  }\n\n  return this.client({\n    path: API_STYLES_SPRITE,\n    params: {\n      owner: this.owner,\n      retina: retina,\n      format: format,\n      styleid: styleid\n    },\n    callback: callback\n  });\n};\n\n/**\n * Get font glyph ranges\n *\n * @param {string} font or fonts\n * @param {number} start character code of starting glyph\n * @param {number} end character code of last glyph. typically the same\n * as start + 255\n * @param {Function} callback called with (err)\n * @returns {Promise} response\n * @example\n * var MapboxClient = require('mapbox');\n * var client = new MapboxClient('ACCESSTOKEN');\n * client.readFontGlyphRanges('Arial Unicode', 0, 255, function(err, ranges) {\n *   if (!err) console.log(ranges);\n * });\n */\nMapboxStyles.prototype.readFontGlyphRanges = function(font, start, end, callback) {\n  invariant(typeof font === 'string', 'font must be a string');\n  invariant(typeof start === 'number', 'start must be a number');\n  invariant(typeof end === 'number', 'end must be a number');\n\n  return this.client({\n    path: API_STYLES_FONT_GLYPH_RANGES,\n    params: {\n      owner: this.owner,\n      font: font,\n      start: start,\n      end: end\n    },\n    callback: callback\n  });\n};\n\n/**\n * Add an icon to a sprite.\n *\n * @param {string} styleid the id for an existing style\n * @param {string} iconName icon's name\n * @param {Buffer} icon icon content as a buffer\n * @param {Function} callback called with (err)\n * @returns {Promise} response\n * @example\n * var MapboxClient = require('mapbox');\n * var fs = require('fs');\n * var client = new MapboxClient('ACCESSTOKEN');\n * client.addIcon('style-id', 'icon-name', fs.readFileSync('icon.png'), function(err) {\n *   if (!err) console.log('added icon!');\n * });\n */\nMapboxStyles.prototype.addIcon = function(styleid, iconName, icon, callback) {\n  invariant(typeof styleid === 'string', 'style must be a string');\n  invariant(typeof iconName === 'string', 'icon name must be a string');\n  invariant(Buffer.isBuffer(icon), 'icon must be a Buffer');\n\n  return this.client({\n    path: API_STYLES_SPRITE_ICON,\n    params: {\n      owner: this.owner,\n      styleid: styleid,\n      iconName: iconName\n    },\n    headers: {\n      'Content-Type': 'text/plain'\n    },\n    entity: icon,\n    method: 'put',\n    callback: callback\n  });\n};\n\n/**\n * Delete an icon from a sprite.\n *\n * @param {string} styleid the id for an existing style\n * @param {string} iconName icon's name\n * @param {Function} callback called with (err)\n * @returns {Promise} response\n * @example\n * var MapboxClient = require('mapbox');\n * var client = new MapboxClient('ACCESSTOKEN');\n * client.deleteIcon('style-id', 'icon-name', function(err) {\n *   if (!err) console.log('deleted icon!');\n * });\n */\nMapboxStyles.prototype.deleteIcon = function(styleid, iconName, callback) {\n  invariant(typeof styleid === 'string', 'style must be a string');\n  invariant(typeof iconName === 'string', 'icon name must be a string');\n\n  return this.client({\n    path: API_STYLES_SPRITE_ICON,\n    params: {\n      owner: this.owner,\n      styleid: styleid,\n      iconName: iconName\n    },\n    method: 'delete',\n    callback: callback\n  });\n};\n\n/**\n * Embed a style.\n *\n * @param {string} styleid the id for an existing style\n * @param {Object} options optional params\n * @param {boolean} [options.title=false] If true, shows a title box in upper right\n * corner with map title and owner\n * @param {boolean} [options.zoomwheel=true] Disables zooming with mouse scroll wheel\n * @returns {string} URL of style embed page\n * @example\n * var MapboxClient = require('mapbox');\n * var client = new MapboxClient('ACCESSTOKEN');\n * var url = client.embedStyle('style-id');\n */\nMapboxStyles.prototype.embedStyle = function(styleid, options) {\n  invariant(typeof styleid === 'string', 'style must be a string');\n\n  var params = {\n    styleid: styleid,\n    access_token: this.accessToken,\n    owner: this.owner,\n    title: false,\n    zoomwheel: true\n  };\n\n  if (options) {\n    if (options.title !== undefined) {\n      invariant(typeof options.title === 'boolean', 'title must be a boolean');\n      params.title = options.title;\n    }\n    if (options.zoomwheel !== undefined) {\n      invariant(typeof options.zoomwheel === 'boolean', 'zoomwheel must be a boolean');\n      params.zoomwheel = options.zoomwheel;\n    }\n  }\n\n  return this.endpoint + uriTemplate.expand(API_STYLES_EMBED, params);\n};\n"]},"metadata":{},"sourceType":"script"}